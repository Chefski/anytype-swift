// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen


// swiftlint:disable superfluous_disable_command file_length implicit_return

// MARK: - Asset Catalogs

// swiftlint:disable identifier_name line_length nesting type_body_length type_name
internal extension ImageAsset {
  static let play = ImageAsset(name: "play")
  static let authPhotoIcon = ImageAsset(name: "auth_photo_icon")
  static let arrowDown = ImageAsset(name: "arrowDown")
  static let arrowForward = ImageAsset(name: "arrowForward")
  static let backArrow = ImageAsset(name: "backArrow")
  static let ghost = ImageAsset(name: "ghost")
  static let logo = ImageAsset(name: "logo")
  static let more = ImageAsset(name: "more")
  static let noImage = ImageAsset(name: "no_image")
  static let optionChecked = ImageAsset(name: "option_checked")
  static let plus = ImageAsset(name: "plus")
  static let draft = ImageAsset(name: "draft")
  static let mainSearch = ImageAsset(name: "main_search")
  static let mainSettings = ImageAsset(name: "main_settings")
  static let marketplace = ImageAsset(name: "marketplace")
  static let selection = ImageAsset(name: "selection")
  enum EditingToolbar {
    static let actions = ImageAsset(name: "EditingToolbar/actions")
    static let addNew = ImageAsset(name: "EditingToolbar/add_new")
    static let mention = ImageAsset(name: "EditingToolbar/mention")
    static let move = ImageAsset(name: "EditingToolbar/move")
    static let style = ImageAsset(name: "EditingToolbar/style")
  }
  enum Emoji {
  }
  static let createNewObject = ImageAsset(name: "createNewObject")
  static let todoCheckbox = ImageAsset(name: "todo_checkbox")
  static let todoCheckmark = ImageAsset(name: "todo_checkmark")
  static let card = ImageAsset(name: "card")
  static let text = ImageAsset(name: "text")
  static let addNew = ImageAsset(name: "addNew")
  static let addToFavorites = ImageAsset(name: "addToFavorites")
  static let delete = ImageAsset(name: "delete")
  static let duplicate = ImageAsset(name: "duplicate")
  static let lock = ImageAsset(name: "lock")
  static let moveTo = ImageAsset(name: "moveTo")
  static let restore = ImageAsset(name: "restore")
  static let search = ImageAsset(name: "search")
  static let undoredo = ImageAsset(name: "undoredo")
  static let unfavorite = ImageAsset(name: "unfavorite")
  static let unlock = ImageAsset(name: "unlock")
  static let layoutSettingsBasic = ImageAsset(name: "layout_settings_basic")
  static let layoutSettingsNote = ImageAsset(name: "layout_settings_note")
  static let layoutSettingsProfile = ImageAsset(name: "layout_settings_profile")
  static let layoutSettingsTodo = ImageAsset(name: "layout_settings_todo")
  static let relationSmallEmailIcon = ImageAsset(name: "relation_small_email_icon")
  static let relationSmallGoToUrlIcon = ImageAsset(name: "relation_small_go_to_url_icon")
  static let relationSmallPhoneIcon = ImageAsset(name: "relation_small_phone_icon")
  static let relationAddToFeatured = ImageAsset(name: "relation_add_to_featured")
  static let relationCheckboxChecked = ImageAsset(name: "relation_checkbox_checked")
  static let relationCheckboxUnchecked = ImageAsset(name: "relation_checkbox_unchecked")
  static let relationLocked = ImageAsset(name: "relation_locked")
  static let relationLockedSmall = ImageAsset(name: "relation_locked_small")
  static let relationNew = ImageAsset(name: "relation_new")
  static let relationRemoveFromFeatured = ImageAsset(name: "relation_remove_from_featured")
  static let redo = ImageAsset(name: "redo")
  static let undo = ImageAsset(name: "undo")
  static let objectSettingsCover = ImageAsset(name: "object_settings_cover")
  static let objectSettingsIcon = ImageAsset(name: "object_settings_icon")
  static let objectSettingsLayout = ImageAsset(name: "object_settings_layout")
  static let objectSettingsRelations = ImageAsset(name: "object_settings_relations")
  static let searchTextFieldIcon = ImageAsset(name: "searchTextFieldIcon")
  static let openToEdit = ImageAsset(name: "open_to_edit")
  static let setPaginationArrowBackward = ImageAsset(name: "set_pagination_arrow_backward")
  static let setPaginationArrowForward = ImageAsset(name: "set_pagination_arrow_forward")
  static let setSettings = ImageAsset(name: "set_settings")
  static let setSettinsFilter = ImageAsset(name: "set_settins_filter")
  static let setSettinsGroup = ImageAsset(name: "set_settins_group")
  static let setSettinsSettings = ImageAsset(name: "set_settins_settings")
  static let setSettinsSort = ImageAsset(name: "set_settins_sort")
  static let setSettinsView = ImageAsset(name: "set_settins_view")
  static let themeDark = ImageAsset(name: "theme_dark")
  static let themeLight = ImageAsset(name: "theme_light")
  static let themeSystem = ImageAsset(name: "theme_system")
  static let settingsAbout = ImageAsset(name: "settings_about")
  static let settingsAccountAndData = ImageAsset(name: "settings_account_and_data")
  static let settingsAppearance = ImageAsset(name: "settings_appearance")
  static let settingsDebug = ImageAsset(name: "settings_debug")
  static let settingsPersonalization = ImageAsset(name: "settings_personalization")
  static let settingsSetKeychainPhrase = ImageAsset(name: "settings_set_keychain_phrase")
  static let settingsSetPinCode = ImageAsset(name: "settings_set_pin_code")
  static let settingsSetWallpaper = ImageAsset(name: "settings_set_wallpaper")
  static let slashMenuActionClear = ImageAsset(name: "slash_menu_action_clear")
  static let slashMenuActionCopy = ImageAsset(name: "slash_menu_action_copy")
  static let slashMenuActionDuplicate = ImageAsset(name: "slash_menu_action_duplicate")
  static let slashMenuActionMove = ImageAsset(name: "slash_menu_action_move")
  static let slashMenuActionMoveTo = ImageAsset(name: "slash_menu_action_moveTo")
  static let slashMenuActionPaste = ImageAsset(name: "slash_menu_action_paste")
  static let slashMenuAlignmentCenter = ImageAsset(name: "slash_menu_alignment_center")
  static let slashMenuAlignmentLeft = ImageAsset(name: "slash_menu_alignment_left")
  static let slashMenuAlignmentRight = ImageAsset(name: "slash_menu_alignment_right")
  static let slashMenuMediaAudio = ImageAsset(name: "slash_menu_media_audio")
  static let slashMenuMediaBookmark = ImageAsset(name: "slash_menu_media_bookmark")
  static let slashMenuMediaCode = ImageAsset(name: "slash_menu_media_code")
  static let slashMenuMediaFile = ImageAsset(name: "slash_menu_media_file")
  static let slashMenuMediaPicture = ImageAsset(name: "slash_menu_media_picture")
  static let slashMenuMediaVideo = ImageAsset(name: "slash_menu_media_video")
  static let slashMenuDotsDivider = ImageAsset(name: "slash_menu_dots_divider")
  static let slashMenuLineDivider = ImageAsset(name: "slash_menu_line_divider")
  static let slashMenuTable = ImageAsset(name: "slash_menu_table")
  static let slashMenuTableOfContents = ImageAsset(name: "slash_menu_table_of_contents")
  static let slashMenuStyleBold = ImageAsset(name: "slash_menu_style_bold")
  static let slashMenuStyleBulleted = ImageAsset(name: "slash_menu_style_bulleted")
  static let slashMenuStyleCallout = ImageAsset(name: "slash_menu_style_callout")
  static let slashMenuStyleCheckbox = ImageAsset(name: "slash_menu_style_checkbox")
  static let slashMenuStyleCode = ImageAsset(name: "slash_menu_style_code")
  static let slashMenuStyleHeading = ImageAsset(name: "slash_menu_style_heading")
  static let slashMenuStyleHighlighted = ImageAsset(name: "slash_menu_style_highlighted")
  static let slashMenuStyleItalic = ImageAsset(name: "slash_menu_style_italic")
  static let slashMenuStyleLink = ImageAsset(name: "slash_menu_style_link")
  static let slashMenuStyleNumbered = ImageAsset(name: "slash_menu_style_numbered")
  static let slashMenuStyleStrikethrough = ImageAsset(name: "slash_menu_style_strikethrough")
  static let slashMenuStyleSubheading = ImageAsset(name: "slash_menu_style_subheading")
  static let slashMenuStyleText = ImageAsset(name: "slash_menu_style_text")
  static let slashMenuStyleTitle = ImageAsset(name: "slash_menu_style_title")
  static let slashMenuStyleToggle = ImageAsset(name: "slash_menu_style_toggle")
  static let slashMenuGroupActions = ImageAsset(name: "slash_menu_group_actions")
  static let slashMenuGroupMedia = ImageAsset(name: "slash_menu_group_media")
  static let slashMenuGroupObjects = ImageAsset(name: "slash_menu_group_objects")
  static let slashMenuGroupOther = ImageAsset(name: "slash_menu_group_other")
  static let slashMenuGroupRelation = ImageAsset(name: "slash_menu_group_relation")
  static let slashMenuGroupStyle = ImageAsset(name: "slash_menu_group_style")
  enum Format {
    static let attachment = ImageAsset(name: "format/attachment")
    static let checkbox = ImageAsset(name: "format/checkbox")
    static let date = ImageAsset(name: "format/date")
    static let email = ImageAsset(name: "format/email")
    static let name = ImageAsset(name: "format/name")
    static let number = ImageAsset(name: "format/number")
    static let object = ImageAsset(name: "format/object")
    static let phone = ImageAsset(name: "format/phone")
    static let status = ImageAsset(name: "format/status")
    static let tag = ImageAsset(name: "format/tag")
    static let text = ImageAsset(name: "format/text")
    static let unknown = ImageAsset(name: "format/unknown")
    static let url = ImageAsset(name: "format/url")
  }
  static let slashMenuAddRelation = ImageAsset(name: "slash_menu_addRelation")
  static let slashBackArrow = ImageAsset(name: "slash_back_arrow")
  static let slashMenuLinkTo = ImageAsset(name: "slash_menu_link_to")
  enum StyleBottomSheet {
    static let bullet = ImageAsset(name: "StyleBottomSheet/bullet")
    static let checkbox = ImageAsset(name: "StyleBottomSheet/checkbox")
    static let color = ImageAsset(name: "StyleBottomSheet/color")
    static let numbered = ImageAsset(name: "StyleBottomSheet/numbered")
    static let toggle = ImageAsset(name: "StyleBottomSheet/toggle")
  }
  enum TextAttributes {
    static let alignCenter = ImageAsset(name: "TextAttributes/align_center")
    static let alignLeft = ImageAsset(name: "TextAttributes/align_left")
    static let alignRight = ImageAsset(name: "TextAttributes/align_right")
    static let bold = ImageAsset(name: "TextAttributes/bold")
    static let code = ImageAsset(name: "TextAttributes/code")
    static let italic = ImageAsset(name: "TextAttributes/italic")
    static let strikethrough = ImageAsset(name: "TextAttributes/strikethrough")
    static let url = ImageAsset(name: "TextAttributes/url")
  }
  enum TextEditor {
    enum BlockFile {
      enum Content {
        static let archive = ImageAsset(name: "TextEditor/BlockFile/Content/Archive")
        static let audio = ImageAsset(name: "TextEditor/BlockFile/Content/Audio")
        static let image = ImageAsset(name: "TextEditor/BlockFile/Content/Image")
        static let other = ImageAsset(name: "TextEditor/BlockFile/Content/Other")
        static let pdf = ImageAsset(name: "TextEditor/BlockFile/Content/PDF")
        static let presentation = ImageAsset(name: "TextEditor/BlockFile/Content/Presentation")
        static let spreadsheet = ImageAsset(name: "TextEditor/BlockFile/Content/Spreadsheet")
        static let text = ImageAsset(name: "TextEditor/BlockFile/Content/Text")
        static let video = ImageAsset(name: "TextEditor/BlockFile/Content/Video")
      }
      enum Empty {
        static let bookmark = ImageAsset(name: "TextEditor/BlockFile/Empty/Bookmark")
        static let file = ImageAsset(name: "TextEditor/BlockFile/Empty/File")
        static let image = ImageAsset(name: "TextEditor/BlockFile/Empty/Image")
        static let video = ImageAsset(name: "TextEditor/BlockFile/Empty/Video")
      }
    }
    enum BlocksOption {
      static let addBelow = ImageAsset(name: "TextEditor/BlocksOption/add_below")
      static let cellMenuClear = ImageAsset(name: "TextEditor/BlocksOption/cell_menu_clear")
      static let cellMenuColor = ImageAsset(name: "TextEditor/BlocksOption/cell_menu_color")
      static let columnInsertLeft = ImageAsset(name: "TextEditor/BlocksOption/column_insert_left")
      static let columnInsertRight = ImageAsset(name: "TextEditor/BlocksOption/column_insert_right")
      static let columnMoveLeft = ImageAsset(name: "TextEditor/BlocksOption/column_move_left")
      static let columnMoveRight = ImageAsset(name: "TextEditor/BlocksOption/column_move_right")
      static let columnSort = ImageAsset(name: "TextEditor/BlocksOption/column_sort")
      static let copy = ImageAsset(name: "TextEditor/BlocksOption/copy")
      static let delete = ImageAsset(name: "TextEditor/BlocksOption/delete")
      static let download = ImageAsset(name: "TextEditor/BlocksOption/download")
      static let duplicate = ImageAsset(name: "TextEditor/BlocksOption/duplicate")
      static let move = ImageAsset(name: "TextEditor/BlocksOption/move")
      static let moveTo = ImageAsset(name: "TextEditor/BlocksOption/move_to")
      static let paste = ImageAsset(name: "TextEditor/BlocksOption/paste")
      static let rowInsertAbove = ImageAsset(name: "TextEditor/BlocksOption/row_insert_above")
      static let rowInsertBelow = ImageAsset(name: "TextEditor/BlocksOption/row_insert_below")
      static let rowMoveDown = ImageAsset(name: "TextEditor/BlocksOption/row_move_down")
      static let rowMoveUp = ImageAsset(name: "TextEditor/BlocksOption/row_move_up")
      static let turnIntoObject = ImageAsset(name: "TextEditor/BlocksOption/turn_into_object")
      static let view = ImageAsset(name: "TextEditor/BlocksOption/view")
    }
    static let turnIntoArrow = ImageAsset(name: "TextEditor/turn_into_arrow")
    enum Divider {
      static let dots = ImageAsset(name: "TextEditor/Divider/Dots")
    }
    static let backArrow = ImageAsset(name: "TextEditor/backArrow")
    static let forwardArrow = ImageAsset(name: "TextEditor/forwardArrow")
    static let home = ImageAsset(name: "TextEditor/home")
    static let lockedObject = ImageAsset(name: "TextEditor/locked_object")
    static let search = ImageAsset(name: "TextEditor/search")
    enum Text {
      static let checked = ImageAsset(name: "TextEditor/Text/checked")
      static let folded = ImageAsset(name: "TextEditor/Text/folded")
      static let unchecked = ImageAsset(name: "TextEditor/Text/unchecked")
    }
    static let bigGhost = ImageAsset(name: "TextEditor/bigGhost")
    static let questionMark = ImageAsset(name: "TextEditor/questionMark")
  }
  static let splashLogo = ImageAsset(name: "splash_logo")
}
// swiftlint:enable identifier_name line_length nesting type_body_length type_name

// MARK: - Implementation Details

internal struct ImageAsset: Hashable {
  internal let name: String
}
