// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/changes.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// the element of change tree used to store and internal apply smartBlock history
struct Anytype_Change {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ids of previous changes
  var previousIds: [String] = []

  /// id of the last snapshot
  var lastSnapshotID: String = String()

  /// ids of the last changes with details content
  var previousDetailsIds: [String] = []

  /// set of actions to apply
  var content: [Anytype_Change.Content] = []

  /// snapshot - when not null, the content will ignoring
  var snapshot: Anytype_Change.Snapshot {
    get {return _snapshot ?? Anytype_Change.Snapshot()}
    set {_snapshot = newValue}
  }
  /// Returns true if `snapshot` has been explicitly set.
  var hasSnapshot: Bool {return self._snapshot != nil}
  /// Clears the value of `snapshot`. Subsequent reads from it will return its default value.
  mutating func clearSnapshot() {self._snapshot = nil}

  /// file keys related to changes content
  var fileKeys: [Anytype_Change.FileKeys] = []

  /// creation timestamp
  var timestamp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Snapshot {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// logId -> lastChangeId
    var logHeads: Dictionary<String,String> = [:]

    /// snapshot data
    var data: Anytype_Model_SmartBlockSnapshotBase {
      get {return _data ?? Anytype_Model_SmartBlockSnapshotBase()}
      set {_data = newValue}
    }
    /// Returns true if `data` has been explicitly set.
    var hasData: Bool {return self._data != nil}
    /// Clears the value of `data`. Subsequent reads from it will return its default value.
    mutating func clearData() {self._data = nil}

    /// all file keys related to doc
    var fileKeys: [Anytype_Change.FileKeys] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _data: Anytype_Model_SmartBlockSnapshotBase? = nil
  }

  struct FileKeys {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hash: String = String()

    var keys: Dictionary<String,String> = [:]

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Content {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var value: Anytype_Change.Content.OneOf_Value? = nil

    var blockCreate: Anytype_Change.BlockCreate {
      get {
        if case .blockCreate(let v)? = value {return v}
        return Anytype_Change.BlockCreate()
      }
      set {value = .blockCreate(newValue)}
    }

    var blockUpdate: Anytype_Change.BlockUpdate {
      get {
        if case .blockUpdate(let v)? = value {return v}
        return Anytype_Change.BlockUpdate()
      }
      set {value = .blockUpdate(newValue)}
    }

    var blockRemove: Anytype_Change.BlockRemove {
      get {
        if case .blockRemove(let v)? = value {return v}
        return Anytype_Change.BlockRemove()
      }
      set {value = .blockRemove(newValue)}
    }

    var blockMove: Anytype_Change.BlockMove {
      get {
        if case .blockMove(let v)? = value {return v}
        return Anytype_Change.BlockMove()
      }
      set {value = .blockMove(newValue)}
    }

    var blockDuplicate: Anytype_Change.BlockDuplicate {
      get {
        if case .blockDuplicate(let v)? = value {return v}
        return Anytype_Change.BlockDuplicate()
      }
      set {value = .blockDuplicate(newValue)}
    }

    var detailsSet: Anytype_Change.DetailsSet {
      get {
        if case .detailsSet(let v)? = value {return v}
        return Anytype_Change.DetailsSet()
      }
      set {value = .detailsSet(newValue)}
    }

    var detailsUnset: Anytype_Change.DetailsUnset {
      get {
        if case .detailsUnset(let v)? = value {return v}
        return Anytype_Change.DetailsUnset()
      }
      set {value = .detailsUnset(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Value: Equatable {
      case blockCreate(Anytype_Change.BlockCreate)
      case blockUpdate(Anytype_Change.BlockUpdate)
      case blockRemove(Anytype_Change.BlockRemove)
      case blockMove(Anytype_Change.BlockMove)
      case blockDuplicate(Anytype_Change.BlockDuplicate)
      case detailsSet(Anytype_Change.DetailsSet)
      case detailsUnset(Anytype_Change.DetailsUnset)

    #if !swift(>=4.1)
      static func ==(lhs: Anytype_Change.Content.OneOf_Value, rhs: Anytype_Change.Content.OneOf_Value) -> Bool {
        switch (lhs, rhs) {
        case (.blockCreate(let l), .blockCreate(let r)): return l == r
        case (.blockUpdate(let l), .blockUpdate(let r)): return l == r
        case (.blockRemove(let l), .blockRemove(let r)): return l == r
        case (.blockMove(let l), .blockMove(let r)): return l == r
        case (.blockDuplicate(let l), .blockDuplicate(let r)): return l == r
        case (.detailsSet(let l), .detailsSet(let r)): return l == r
        case (.detailsUnset(let l), .detailsUnset(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}
  }

  struct BlockCreate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var targetID: String = String()

    var position: Anytype_Model_Block.Position = .none

    var blocks: [Anytype_Model_Block] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct BlockUpdate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var events: [Anytype_Event.Message] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct BlockRemove {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ids: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct BlockMove {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var targetID: String = String()

    var position: Anytype_Model_Block.Position = .none

    var ids: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct BlockDuplicate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var targetID: String = String()

    var position: Anytype_Model_Block.Position = .none

    var ids: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct DetailsSet {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var key: String = String()

    var value: SwiftProtobuf.Google_Protobuf_Value {
      get {return _value ?? SwiftProtobuf.Google_Protobuf_Value()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() {self._value = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _value: SwiftProtobuf.Google_Protobuf_Value? = nil
  }

  struct DetailsUnset {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var key: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _snapshot: Anytype_Change.Snapshot? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"

extension Anytype_Change: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Change"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "previous_ids"),
    2: .standard(proto: "last_snapshot_id"),
    5: .standard(proto: "previous_details_ids"),
    3: .same(proto: "content"),
    4: .same(proto: "snapshot"),
    6: .same(proto: "fileKeys"),
    7: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.previousIds)
      case 2: try decoder.decodeSingularStringField(value: &self.lastSnapshotID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.content)
      case 4: try decoder.decodeSingularMessageField(value: &self._snapshot)
      case 5: try decoder.decodeRepeatedStringField(value: &self.previousDetailsIds)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.fileKeys)
      case 7: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.previousIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.previousIds, fieldNumber: 1)
    }
    if !self.lastSnapshotID.isEmpty {
      try visitor.visitSingularStringField(value: self.lastSnapshotID, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.content, fieldNumber: 3)
    }
    if let v = self._snapshot {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.previousDetailsIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.previousDetailsIds, fieldNumber: 5)
    }
    if !self.fileKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileKeys, fieldNumber: 6)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Change, rhs: Anytype_Change) -> Bool {
    if lhs.previousIds != rhs.previousIds {return false}
    if lhs.lastSnapshotID != rhs.lastSnapshotID {return false}
    if lhs.previousDetailsIds != rhs.previousDetailsIds {return false}
    if lhs.content != rhs.content {return false}
    if lhs._snapshot != rhs._snapshot {return false}
    if lhs.fileKeys != rhs.fileKeys {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.Snapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Change.protoMessageName + ".Snapshot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "logHeads"),
    2: .same(proto: "data"),
    3: .same(proto: "fileKeys"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.logHeads)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.fileKeys)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.logHeads.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.logHeads, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.fileKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileKeys, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Change.Snapshot, rhs: Anytype_Change.Snapshot) -> Bool {
    if lhs.logHeads != rhs.logHeads {return false}
    if lhs._data != rhs._data {return false}
    if lhs.fileKeys != rhs.fileKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.FileKeys: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Change.protoMessageName + ".FileKeys"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "keys"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.hash)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.keys)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if !self.keys.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.keys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Change.FileKeys, rhs: Anytype_Change.FileKeys) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Change.protoMessageName + ".Content"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blockCreate"),
    2: .same(proto: "blockUpdate"),
    3: .same(proto: "blockRemove"),
    4: .same(proto: "blockMove"),
    5: .same(proto: "blockDuplicate"),
    100: .same(proto: "detailsSet"),
    101: .same(proto: "detailsUnset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Anytype_Change.BlockCreate?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .blockCreate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .blockCreate(v)}
      case 2:
        var v: Anytype_Change.BlockUpdate?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .blockUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .blockUpdate(v)}
      case 3:
        var v: Anytype_Change.BlockRemove?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .blockRemove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .blockRemove(v)}
      case 4:
        var v: Anytype_Change.BlockMove?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .blockMove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .blockMove(v)}
      case 5:
        var v: Anytype_Change.BlockDuplicate?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .blockDuplicate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .blockDuplicate(v)}
      case 100:
        var v: Anytype_Change.DetailsSet?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .detailsSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .detailsSet(v)}
      case 101:
        var v: Anytype_Change.DetailsUnset?
        if let current = self.value {
          try decoder.handleConflictingOneOf()
          if case .detailsUnset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.value = .detailsUnset(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.value {
    case .blockCreate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .blockUpdate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .blockRemove(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .blockMove(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .blockDuplicate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .detailsSet(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    case .detailsUnset(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Change.Content, rhs: Anytype_Change.Content) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockCreate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targetId"),
    2: .same(proto: "position"),
    3: .same(proto: "blocks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.targetID)
      case 2: try decoder.decodeSingularEnumField(value: &self.position)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.blocks)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 2)
    }
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Change.BlockCreate, rhs: Anytype_Change.BlockCreate) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.blocks != rhs.blocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "events"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.events)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Change.BlockUpdate, rhs: Anytype_Change.BlockUpdate) -> Bool {
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockRemove"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.ids)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Change.BlockRemove, rhs: Anytype_Change.BlockRemove) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockMove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockMove"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targetId"),
    2: .same(proto: "position"),
    3: .same(proto: "ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.targetID)
      case 2: try decoder.decodeSingularEnumField(value: &self.position)
      case 3: try decoder.decodeRepeatedStringField(value: &self.ids)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 2)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Change.BlockMove, rhs: Anytype_Change.BlockMove) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockDuplicate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockDuplicate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targetId"),
    2: .same(proto: "position"),
    3: .same(proto: "ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.targetID)
      case 2: try decoder.decodeSingularEnumField(value: &self.position)
      case 3: try decoder.decodeRepeatedStringField(value: &self.ids)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 2)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Change.BlockDuplicate, rhs: Anytype_Change.BlockDuplicate) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.DetailsSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Change.protoMessageName + ".DetailsSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularMessageField(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Change.DetailsSet, rhs: Anytype_Change.DetailsSet) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.DetailsUnset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Change.protoMessageName + ".DetailsUnset"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Change.DetailsUnset, rhs: Anytype_Change.DetailsUnset) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
