// DO NOT EDIT.
//
// Generated by the AnytypeSwiftCodegen.
//
// For information on using the generated types, please see the documentation:
//   https://github.com/anytypeio/anytype-swift-codegen

import Foundation
import SwiftProtobuf

extension Anytype_Model_Account {
  public init(id: String, name: String, avatar: Anytype_Model_Account.Avatar) {
    self.id = id
    self.name = name
    self.avatar = avatar
  }
}

extension Anytype_Model_Account.Avatar {
  public init(avatar: Anytype_Model_Account.Avatar.OneOf_Avatar?) {
    self.avatar = avatar
  }
}

extension Anytype_Model_Block {
  public init(
    id: String, fields: SwiftProtobuf.Google_Protobuf_Struct, restrictions: Anytype_Model_Block.Restrictions, childrenIds: [String], backgroundColor: String, align: Anytype_Model_Block.Align,
    content: OneOf_Content?
  ) {
    self.id = id
    self.fields = fields
    self.restrictions = restrictions
    self.childrenIds = childrenIds
    self.backgroundColor = backgroundColor
    self.align = align
    self.content = content
  }
}

extension Anytype_Model_Block.Content.Bookmark {
  public init(url: String, title: String, description_p: String, imageHash: String, faviconHash: String, type: Anytype_Model_LinkPreview.TypeEnum) {
    self.url = url
    self.title = title
    self.description_p = description_p
    self.imageHash = imageHash
    self.faviconHash = faviconHash
    self.type = type
  }
}

extension Anytype_Model_Block.Content.Dataview {
  public init(databaseID: String, views: [Anytype_Model_Block.Content.Dataview.View], schemaURL: String) {
    self.databaseID = databaseID
    self.views = views
    self.schemaURL = schemaURL
  }
}

extension Anytype_Model_Block.Content.Dataview.Filter {
  public init(
    `operator`: Anytype_Model_Block.Content.Dataview.Filter.Operator, relationID: String, relationProperty: String, condition: Anytype_Model_Block.Content.Dataview.Filter.Condition,
    value: SwiftProtobuf.Google_Protobuf_Value
  ) {
    self.`operator` = `operator`
    self.relationID = relationID
    self.relationProperty = relationProperty
    self.condition = condition
    self.value = value
  }
}

extension Anytype_Model_Block.Content.Dataview.Relation {
  public init(id: String, isVisible: Bool, width: Int32, options: Anytype_Model_Block.Content.Dataview.Relation.OneOf_Options?) {
    self.id = id
    self.isVisible = isVisible
    self.width = width
    self.options = options
  }
}

extension Anytype_Model_Block.Content.Dataview.Relation.DateOptions {
  public init(includeTime: Bool, timeFormat: Anytype_Model_Block.Content.Dataview.Relation.TimeFormat, dateFormat: Anytype_Model_Block.Content.Dataview.Relation.DateFormat) {
    self.includeTime = includeTime
    self.timeFormat = timeFormat
    self.dateFormat = dateFormat
  }
}

extension Anytype_Model_Block.Content.Dataview.Sort {
  public init(relationID: String, type: Anytype_Model_Block.Content.Dataview.Sort.TypeEnum) {
    self.relationID = relationID
    self.type = type
  }
}

extension Anytype_Model_Block.Content.Dataview.View {
  public init(
    id: String, type: Anytype_Model_Block.Content.Dataview.View.TypeEnum, name: String, sorts: [Anytype_Model_Block.Content.Dataview.Sort], filters: [Anytype_Model_Block.Content.Dataview.Filter],
    relations: [Anytype_Model_Block.Content.Dataview.Relation]
  ) {
    self.id = id
    self.type = type
    self.name = name
    self.sorts = sorts
    self.filters = filters
    self.relations = relations
  }
}

extension Anytype_Model_Block.Content.Div {
  public init(style: Anytype_Model_Block.Content.Div.Style) {
    self.style = style
  }
}

extension Anytype_Model_Block.Content.File {
  public init(hash: String, name: String, type: Anytype_Model_Block.Content.File.TypeEnum, mime: String, size: Int64, addedAt: Int64, state: Anytype_Model_Block.Content.File.State) {
    self.hash = hash
    self.name = name
    self.type = type
    self.mime = mime
    self.size = size
    self.addedAt = addedAt
    self.state = state
  }
}

extension Anytype_Model_Block.Content.Icon {
  public init(name: String) {
    self.name = name
  }
}

extension Anytype_Model_Block.Content.Layout {
  public init(style: Anytype_Model_Block.Content.Layout.Style) {
    self.style = style
  }
}

extension Anytype_Model_Block.Content.Link {
  public init(targetBlockID: String, style: Anytype_Model_Block.Content.Link.Style, fields: SwiftProtobuf.Google_Protobuf_Struct) {
    self.targetBlockID = targetBlockID
    self.style = style
    self.fields = fields
  }
}

extension Anytype_Model_Block.Content.Text {
  public init(text: String, style: Anytype_Model_Block.Content.Text.Style, marks: Anytype_Model_Block.Content.Text.Marks, checked: Bool, color: String) {
    self.text = text
    self.style = style
    self.marks = marks
    self.checked = checked
    self.color = color
  }
}

extension Anytype_Model_Block.Content.Text.Mark {
  public init(range: Anytype_Model_Range, type: Anytype_Model_Block.Content.Text.Mark.TypeEnum, param: String) {
    self.range = range
    self.type = type
    self.param = param
  }
}

extension Anytype_Model_Block.Content.Text.Marks {
  public init(marks: [Anytype_Model_Block.Content.Text.Mark]) {
    self.marks = marks
  }
}

extension Anytype_Model_Block.Restrictions {
  public init(read: Bool, edit: Bool, remove: Bool, drag: Bool, dropOn: Bool) {
    self.read = read
    self.edit = edit
    self.remove = remove
    self.drag = drag
    self.dropOn = dropOn
  }
}

extension Anytype_Model_BlockMetaOnly {
  public init(id: String, fields: SwiftProtobuf.Google_Protobuf_Struct) {
    self.id = id
    self.fields = fields
  }
}

extension Anytype_Model_LinkPreview {
  public init(url: String, title: String, description_p: String, imageURL: String, faviconURL: String, type: Anytype_Model_LinkPreview.TypeEnum) {
    self.url = url
    self.title = title
    self.description_p = description_p
    self.imageURL = imageURL
    self.faviconURL = faviconURL
    self.type = type
  }
}

extension Anytype_Model_Range {
  public init(from: Int32, to: Int32) {
    self.from = from
    self.to = to
  }
}

extension Anytype_Model_SmartBlockSnapshotBase {
  public init(blocks: [Anytype_Model_Block], details: SwiftProtobuf.Google_Protobuf_Struct, fileKeys: SwiftProtobuf.Google_Protobuf_Struct) {
    self.blocks = blocks
    self.details = details
    self.fileKeys = fileKeys
  }
}
