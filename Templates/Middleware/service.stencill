// DO NOT EDIT
//
// Generated automatically by the AnytypeSwiftCodegen.
//
// For more info see:
// https://github.com/anytypeio/anytype-swift-codegen

import Combine
import Foundation
import Lib
import SwiftProtobuf

{% macro functionArguments fields %}{% filter removeNewlines:"leading" %}
    {% for field in fields %}
        {{ field.name }}: {{field.type}}{% if field.defaultValue %} = {{ field.defaultValue }}{% endif %}
        {{ ", " if not forloop.last }}
    {% endfor %}
{% endfilter %}{% endmacro %}
{% macro functionCallArguments fields %}{% filter removeNewlines:"leading" %}
    {% for field in fields %}
        {{ field.name }}: {{ field.name }}
        {{ ", " if not forloop.last }}
    {% endfor %}
{% endfilter %}{% endmacro %}
{% for endpoint in endpoints %}
extension {{ endpoint.type }} {
  public enum Service {
    public static func invoke({% filter removeNewlines:"leading" %}
        {% call functionArguments endpoint.requestArguments %}
        {% if endpoint.requestArguments.count != 0 %}, {% endif %}
        queue: DispatchQueue? = nil
        {% endfilter %}) -> Future<Response, Error> {
        return invocation({% call functionCallArguments endpoint.requestArguments %}).invoke(on: queue)
    }
    public static func invoke({% call functionArguments endpoint.requestArguments %}) -> Result<Response, Error> {
        return invocation({% call functionCallArguments endpoint.requestArguments %}).invoke()
    }
    public static func invocation({% call functionArguments endpoint.requestArguments %}) -> ProtobufMessages.Invocation<Response> {
        return Invocation<Response> {
            return self.invoke(.init({% call functionCallArguments endpoint.requestArguments %}))
        }
    }
    private static func invoke(_ request: Request) -> Response? {
        return Lib.Service{{ endpoint.invocationName }}(try? request.serializedData()).flatMap {
            try? Response(serializedData: $0)
        }
    }
  }
}

{% endfor %}
