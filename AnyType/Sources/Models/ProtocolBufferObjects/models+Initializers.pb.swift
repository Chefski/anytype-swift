// DO NOT EDIT.
//
// Generated by the AnytypeSwiftCodegen.
//
// For information on using the generated types, please see the documentation:
//   https://github.com/anytypeio/anytype-swift-codegen

import Foundation
import SwiftProtobuf

extension Anytype_Model_Account {
  init(id: String, name: String, avatar: Anytype_Model_Account.Avatar) {
    self.id = id
    self.name = name
    self.avatar = avatar
  }
}

extension Anytype_Model_Account.Avatar {
  init(avatar: OneOf_Avatar?) {
    self.avatar = avatar
  }
}

extension Anytype_Model_Block {
  init(id: String, fields: SwiftProtobuf.Google_Protobuf_Struct, restrictions: Anytype_Model_Block.Restrictions, childrenIds: [String], isArchived: Bool, content: OneOf_Content?) {
    self.id = id
    self.fields = fields
    self.restrictions = restrictions
    self.childrenIds = childrenIds
    self.isArchived = isArchived
    self.content = content
  }
}

extension Anytype_Model_Block.Content.Dashboard {
  init(style: Anytype_Model_Block.Content.Dashboard.Style) {
    self.style = style
  }
}

extension Anytype_Model_Block.Content.Div {
  init(style: Anytype_Model_Block.Content.Div.Style) {
    self.style = style
  }
}

extension Anytype_Model_Block.Content.File {
  init(hash: String, name: String, type: Anytype_Model_Block.Content.File.TypeEnum, mime: String, size: Int64, addedAt: Int64, state: Anytype_Model_Block.Content.File.State) {
    self.hash = hash
    self.name = name
    self.type = type
    self.mime = mime
    self.size = size
    self.addedAt = addedAt
    self.state = state
  }
}

extension Anytype_Model_Block.Content.Icon {
  init(name: String) {
    self.name = name
  }
}

extension Anytype_Model_Block.Content.Layout {
  init(style: Anytype_Model_Block.Content.Layout.Style) {
    self.style = style
  }
}

extension Anytype_Model_Block.Content.Link {
  init(targetBlockID: String, style: Anytype_Model_Block.Content.Link.Style, fields: SwiftProtobuf.Google_Protobuf_Struct, isArchived: Bool) {
    self.targetBlockID = targetBlockID
    self.style = style
    self.fields = fields
    self.isArchived = isArchived
  }
}

extension Anytype_Model_Block.Content.Page {
  init(style: Anytype_Model_Block.Content.Page.Style) {
    self.style = style
  }
}

extension Anytype_Model_Block.Content.Text {
  init(text: String, style: Anytype_Model_Block.Content.Text.Style, marks: Anytype_Model_Block.Content.Text.Marks, checked: Bool, color: String, backgroundColor: String) {
    self.text = text
    self.style = style
    self.marks = marks
    self.checked = checked
    self.color = color
    self.backgroundColor = backgroundColor
  }
}

extension Anytype_Model_Block.Content.Text.Mark {
  init(range: Anytype_Model_Range, type: Anytype_Model_Block.Content.Text.Mark.TypeEnum, param: String) {
    self.range = range
    self.type = type
    self.param = param
  }
}

extension Anytype_Model_Block.Content.Text.Marks {
  init(marks: [Anytype_Model_Block.Content.Text.Mark]) {
    self.marks = marks
  }
}

extension Anytype_Model_Block.Restrictions {
  init(read: Bool, edit: Bool, remove: Bool, drag: Bool, dropOn: Bool) {
    self.read = read
    self.edit = edit
    self.remove = remove
    self.drag = drag
    self.dropOn = dropOn
  }
}

extension Anytype_Model_BlockMetaOnly {
  init(id: String, fields: SwiftProtobuf.Google_Protobuf_Struct, isArchived: Bool) {
    self.id = id
    self.fields = fields
    self.isArchived = isArchived
  }
}

extension Anytype_Model_Range {
  init(from: Int32, to: Int32) {
    self.from = from
    self.to = to
  }
}
