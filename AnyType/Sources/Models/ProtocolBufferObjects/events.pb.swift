// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Anytype_SmartBlockType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case page // = 0

  /// have only Link simpleblocks
  case home // = 1

  /// just a usual page for now
  case profilePage // = 2

  /// have only Link simpleblocks
  case archive // = 3

  /// have only Link simpleblocks
  case breadcrumbs // = 4

  /// only have dataview simpleblock
  case set // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .page
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .page
    case 1: self = .home
    case 2: self = .profilePage
    case 3: self = .archive
    case 4: self = .breadcrumbs
    case 5: self = .set
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .page: return 0
    case .home: return 1
    case .profilePage: return 2
    case .archive: return 3
    case .breadcrumbs: return 4
    case .set: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Anytype_SmartBlockType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_SmartBlockType] = [
    .page,
    .home,
    .profilePage,
    .archive,
    .breadcrumbs,
    .set,
  ]
}

#endif  // swift(>=4.2)

///
/// Event â€“ type of message, that could be sent from a middleware to the corresponding front-end.
struct Anytype_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var messages: [Anytype_Event.Message] = []

  var contextID: String = String()

  var initiator: Anytype_Model_Account {
    get {return _initiator ?? Anytype_Model_Account()}
    set {_initiator = newValue}
  }
  /// Returns true if `initiator` has been explicitly set.
  var hasInitiator: Bool {return self._initiator != nil}
  /// Clears the value of `initiator`. Subsequent reads from it will return its default value.
  mutating func clearInitiator() {self._initiator = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Message {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var value: OneOf_Value? {
      get {return _storage._value}
      set {_uniqueStorage()._value = newValue}
    }

    var accountShow: Anytype_Event.Account.Show {
      get {
        if case .accountShow(let v)? = _storage._value {return v}
        return Anytype_Event.Account.Show()
      }
      set {_uniqueStorage()._value = .accountShow(newValue)}
    }

    var accountDetails: Anytype_Event.Account.Details {
      get {
        if case .accountDetails(let v)? = _storage._value {return v}
        return Anytype_Event.Account.Details()
      }
      set {_uniqueStorage()._value = .accountDetails(newValue)}
    }

    var blockAdd: Anytype_Event.Block.Add {
      get {
        if case .blockAdd(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Add()
      }
      set {_uniqueStorage()._value = .blockAdd(newValue)}
    }

    var blockDelete: Anytype_Event.Block.Delete {
      get {
        if case .blockDelete(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Delete()
      }
      set {_uniqueStorage()._value = .blockDelete(newValue)}
    }

    var filesUpload: Anytype_Event.Block.FilesUpload {
      get {
        if case .filesUpload(let v)? = _storage._value {return v}
        return Anytype_Event.Block.FilesUpload()
      }
      set {_uniqueStorage()._value = .filesUpload(newValue)}
    }

    var marksInfo: Anytype_Event.Block.MarksInfo {
      get {
        if case .marksInfo(let v)? = _storage._value {return v}
        return Anytype_Event.Block.MarksInfo()
      }
      set {_uniqueStorage()._value = .marksInfo(newValue)}
    }

    var blockSetFields: Anytype_Event.Block.Set.Fields {
      get {
        if case .blockSetFields(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Fields()
      }
      set {_uniqueStorage()._value = .blockSetFields(newValue)}
    }

    var blockSetChildrenIds: Anytype_Event.Block.Set.ChildrenIds {
      get {
        if case .blockSetChildrenIds(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.ChildrenIds()
      }
      set {_uniqueStorage()._value = .blockSetChildrenIds(newValue)}
    }

    var blockSetRestrictions: Anytype_Event.Block.Set.Restrictions {
      get {
        if case .blockSetRestrictions(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Restrictions()
      }
      set {_uniqueStorage()._value = .blockSetRestrictions(newValue)}
    }

    var blockSetBackgroundColor: Anytype_Event.Block.Set.BackgroundColor {
      get {
        if case .blockSetBackgroundColor(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.BackgroundColor()
      }
      set {_uniqueStorage()._value = .blockSetBackgroundColor(newValue)}
    }

    var blockSetText: Anytype_Event.Block.Set.Text {
      get {
        if case .blockSetText(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Text()
      }
      set {_uniqueStorage()._value = .blockSetText(newValue)}
    }

    var blockSetFile: Anytype_Event.Block.Set.File {
      get {
        if case .blockSetFile(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.File()
      }
      set {_uniqueStorage()._value = .blockSetFile(newValue)}
    }

    var blockSetLink: Anytype_Event.Block.Set.Link {
      get {
        if case .blockSetLink(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Link()
      }
      set {_uniqueStorage()._value = .blockSetLink(newValue)}
    }

    var blockSetBookmark: Anytype_Event.Block.Set.Bookmark {
      get {
        if case .blockSetBookmark(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Bookmark()
      }
      set {_uniqueStorage()._value = .blockSetBookmark(newValue)}
    }

    var blockSetAlign: Anytype_Event.Block.Set.Align {
      get {
        if case .blockSetAlign(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Align()
      }
      set {_uniqueStorage()._value = .blockSetAlign(newValue)}
    }

    var blockSetDetails: Anytype_Event.Block.Set.Details {
      get {
        if case .blockSetDetails(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Details()
      }
      set {_uniqueStorage()._value = .blockSetDetails(newValue)}
    }

    var blockSetDiv: Anytype_Event.Block.Set.Div {
      get {
        if case .blockSetDiv(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Div()
      }
      set {_uniqueStorage()._value = .blockSetDiv(newValue)}
    }

    var blockSetDataviewRecords: Anytype_Event.Block.Set.Dataview.Records {
      get {
        if case .blockSetDataviewRecords(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Dataview.Records()
      }
      set {_uniqueStorage()._value = .blockSetDataviewRecords(newValue)}
    }

    var blockSetDataviewView: Anytype_Event.Block.Set.Dataview.View {
      get {
        if case .blockSetDataviewView(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Dataview.View()
      }
      set {_uniqueStorage()._value = .blockSetDataviewView(newValue)}
    }

    var blockDeleteDataviewView: Anytype_Event.Block.Delete.Dataview.View {
      get {
        if case .blockDeleteDataviewView(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Delete.Dataview.View()
      }
      set {_uniqueStorage()._value = .blockDeleteDataviewView(newValue)}
    }

    var blockShow: Anytype_Event.Block.Show {
      get {
        if case .blockShow(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Show()
      }
      set {_uniqueStorage()._value = .blockShow(newValue)}
    }

    var userBlockJoin: Anytype_Event.User.Block.Join {
      get {
        if case .userBlockJoin(let v)? = _storage._value {return v}
        return Anytype_Event.User.Block.Join()
      }
      set {_uniqueStorage()._value = .userBlockJoin(newValue)}
    }

    var userBlockLeft: Anytype_Event.User.Block.Left {
      get {
        if case .userBlockLeft(let v)? = _storage._value {return v}
        return Anytype_Event.User.Block.Left()
      }
      set {_uniqueStorage()._value = .userBlockLeft(newValue)}
    }

    var userBlockSelectRange: Anytype_Event.User.Block.SelectRange {
      get {
        if case .userBlockSelectRange(let v)? = _storage._value {return v}
        return Anytype_Event.User.Block.SelectRange()
      }
      set {_uniqueStorage()._value = .userBlockSelectRange(newValue)}
    }

    var userBlockTextRange: Anytype_Event.User.Block.TextRange {
      get {
        if case .userBlockTextRange(let v)? = _storage._value {return v}
        return Anytype_Event.User.Block.TextRange()
      }
      set {_uniqueStorage()._value = .userBlockTextRange(newValue)}
    }

    var ping: Anytype_Event.Ping {
      get {
        if case .ping(let v)? = _storage._value {return v}
        return Anytype_Event.Ping()
      }
      set {_uniqueStorage()._value = .ping(newValue)}
    }

    var processNew: Anytype_Event.Process.New {
      get {
        if case .processNew(let v)? = _storage._value {return v}
        return Anytype_Event.Process.New()
      }
      set {_uniqueStorage()._value = .processNew(newValue)}
    }

    var processUpdate: Anytype_Event.Process.Update {
      get {
        if case .processUpdate(let v)? = _storage._value {return v}
        return Anytype_Event.Process.Update()
      }
      set {_uniqueStorage()._value = .processUpdate(newValue)}
    }

    var processDone: Anytype_Event.Process.Done {
      get {
        if case .processDone(let v)? = _storage._value {return v}
        return Anytype_Event.Process.Done()
      }
      set {_uniqueStorage()._value = .processDone(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Value: Equatable {
      case accountShow(Anytype_Event.Account.Show)
      case accountDetails(Anytype_Event.Account.Details)
      case blockAdd(Anytype_Event.Block.Add)
      case blockDelete(Anytype_Event.Block.Delete)
      case filesUpload(Anytype_Event.Block.FilesUpload)
      case marksInfo(Anytype_Event.Block.MarksInfo)
      case blockSetFields(Anytype_Event.Block.Set.Fields)
      case blockSetChildrenIds(Anytype_Event.Block.Set.ChildrenIds)
      case blockSetRestrictions(Anytype_Event.Block.Set.Restrictions)
      case blockSetBackgroundColor(Anytype_Event.Block.Set.BackgroundColor)
      case blockSetText(Anytype_Event.Block.Set.Text)
      case blockSetFile(Anytype_Event.Block.Set.File)
      case blockSetLink(Anytype_Event.Block.Set.Link)
      case blockSetBookmark(Anytype_Event.Block.Set.Bookmark)
      case blockSetAlign(Anytype_Event.Block.Set.Align)
      case blockSetDetails(Anytype_Event.Block.Set.Details)
      case blockSetDiv(Anytype_Event.Block.Set.Div)
      case blockSetDataviewRecords(Anytype_Event.Block.Set.Dataview.Records)
      case blockSetDataviewView(Anytype_Event.Block.Set.Dataview.View)
      case blockDeleteDataviewView(Anytype_Event.Block.Delete.Dataview.View)
      case blockShow(Anytype_Event.Block.Show)
      case userBlockJoin(Anytype_Event.User.Block.Join)
      case userBlockLeft(Anytype_Event.User.Block.Left)
      case userBlockSelectRange(Anytype_Event.User.Block.SelectRange)
      case userBlockTextRange(Anytype_Event.User.Block.TextRange)
      case ping(Anytype_Event.Ping)
      case processNew(Anytype_Event.Process.New)
      case processUpdate(Anytype_Event.Process.Update)
      case processDone(Anytype_Event.Process.Done)

    #if !swift(>=4.1)
      static func ==(lhs: Anytype_Event.Message.OneOf_Value, rhs: Anytype_Event.Message.OneOf_Value) -> Bool {
        switch (lhs, rhs) {
        case (.accountShow(let l), .accountShow(let r)): return l == r
        case (.accountDetails(let l), .accountDetails(let r)): return l == r
        case (.blockAdd(let l), .blockAdd(let r)): return l == r
        case (.blockDelete(let l), .blockDelete(let r)): return l == r
        case (.filesUpload(let l), .filesUpload(let r)): return l == r
        case (.marksInfo(let l), .marksInfo(let r)): return l == r
        case (.blockSetFields(let l), .blockSetFields(let r)): return l == r
        case (.blockSetChildrenIds(let l), .blockSetChildrenIds(let r)): return l == r
        case (.blockSetRestrictions(let l), .blockSetRestrictions(let r)): return l == r
        case (.blockSetBackgroundColor(let l), .blockSetBackgroundColor(let r)): return l == r
        case (.blockSetText(let l), .blockSetText(let r)): return l == r
        case (.blockSetFile(let l), .blockSetFile(let r)): return l == r
        case (.blockSetLink(let l), .blockSetLink(let r)): return l == r
        case (.blockSetBookmark(let l), .blockSetBookmark(let r)): return l == r
        case (.blockSetAlign(let l), .blockSetAlign(let r)): return l == r
        case (.blockSetDetails(let l), .blockSetDetails(let r)): return l == r
        case (.blockSetDiv(let l), .blockSetDiv(let r)): return l == r
        case (.blockSetDataviewRecords(let l), .blockSetDataviewRecords(let r)): return l == r
        case (.blockSetDataviewView(let l), .blockSetDataviewView(let r)): return l == r
        case (.blockDeleteDataviewView(let l), .blockDeleteDataviewView(let r)): return l == r
        case (.blockShow(let l), .blockShow(let r)): return l == r
        case (.userBlockJoin(let l), .userBlockJoin(let r)): return l == r
        case (.userBlockLeft(let l), .userBlockLeft(let r)): return l == r
        case (.userBlockSelectRange(let l), .userBlockSelectRange(let r)): return l == r
        case (.userBlockTextRange(let l), .userBlockTextRange(let r)): return l == r
        case (.ping(let l), .ping(let r)): return l == r
        case (.processNew(let l), .processNew(let r)): return l == r
        case (.processUpdate(let l), .processUpdate(let r)): return l == r
        case (.processDone(let l), .processDone(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Account {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    ///*
    /// Message, that will be sent to the front on each account found after an AccountRecoverRequest
    struct Show {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Number of an account in an all found accounts list
      var index: Int32 = 0

      /// An Account, that has been found for the mnemonic
      var account: Anytype_Model_Account {
        get {return _account ?? Anytype_Model_Account()}
        set {_account = newValue}
      }
      /// Returns true if `account` has been explicitly set.
      var hasAccount: Bool {return self._account != nil}
      /// Clears the value of `account`. Subsequent reads from it will return its default value.
      mutating func clearAccount() {self._account = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _account: Anytype_Model_Account? = nil
    }

    struct Details {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var profileID: String = String()

      var details: SwiftProtobuf.Google_Protobuf_Struct {
        get {return _details ?? SwiftProtobuf.Google_Protobuf_Struct()}
        set {_details = newValue}
      }
      /// Returns true if `details` has been explicitly set.
      var hasDetails: Bool {return self._details != nil}
      /// Clears the value of `details`. Subsequent reads from it will return its default value.
      mutating func clearDetails() {self._details = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _details: SwiftProtobuf.Google_Protobuf_Struct? = nil
    }

    init() {}
  }

  struct Block {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    ///
    /// Event to show internal blocks on a client.
    /// Example Scenarios
    /// A. Block Creation
    /// 1. Block A have been created on a client C1
    /// 2. Client C2 receives Event.Block.Add(Block A), Event.Block.Update(Page.children)
    /// B. Partial block load
    /// 1. Client C1 opens Page1, that contains, for example, 133 blocks.
    /// 2. M -> F: ShowFullScreen(Root, blocks1-50)
    /// 3. M -> F: Block.Add(blocks51-100)
    /// 3. M -> F: Block.Add(blocks101-133)
    struct Add {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// id -> block
      var blocks: [Anytype_Model_Block] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    ///
    /// Works with a smart blocks: Page, Dashboard
    /// Dashboard opened, click on a page, Rpc.Block.open, Block.ShowFullscreen(PageBlock)
    struct Show {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Root block id
      var rootID: String = String()

      /// dependent blocks (descendants)
      var blocks: [Anytype_Model_Block] = []

      /// details for current and dependent smart blocks
      var details: [Anytype_Event.Block.Set.Details] = []

      var type: Anytype_SmartBlockType = .page

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    ///*
    /// Middleware to front end event message, that will be sent on one of this scenarios:
    /// Precondition: user A opened a block
    /// 1. User A drops a set of files/pictures/videos
    /// 2. User A creates a MediaBlock and drops a single media, that corresponds to its type.
    struct FilesUpload {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// if empty => create new blocks
      var blockID: String = String()

      /// filepaths to the files
      var filePath: [String] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Delete {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var blockIds: [String] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Dataview {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct View {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// dataview block's id
          var id: String = String()

          /// view id to remove
          var viewID: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        init() {}
      }

      init() {}
    }

    struct MarksInfo {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var marksInRange: [Anytype_Model_Block.Content.Text.Mark.TypeEnum] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Set {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Details {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var details: SwiftProtobuf.Google_Protobuf_Struct {
          get {return _details ?? SwiftProtobuf.Google_Protobuf_Struct()}
          set {_details = newValue}
        }
        /// Returns true if `details` has been explicitly set.
        var hasDetails: Bool {return self._details != nil}
        /// Clears the value of `details`. Subsequent reads from it will return its default value.
        mutating func clearDetails() {self._details = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _details: SwiftProtobuf.Google_Protobuf_Struct? = nil
      }

      struct Dataview {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        /// sent when the active view's visible records have been
        /// changed either by the view settings(filters/sort/limit/offset) or by the data itself
        struct Records {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// dataview block's id
          var id: String = String()

          /// view id, client should double check this to make sure client doesn't switch the active view in the middle
          var viewID: String = String()

          /// existing records updated
          var updated: [SwiftProtobuf.Google_Protobuf_Struct] = []

          /// block of new records to insert
          var inserted: [SwiftProtobuf.Google_Protobuf_Struct] = []

          /// position to insert
          var insertPosition: UInt32 = 0

          var removed: [String] = []

          /// total number of records
          var total: UInt32 = 0

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        /// sent when the view settings have been changed
        struct View {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// dataview block's id
          var id: String = String()

          /// view id, client should double check this to make sure client doesn't switch the active view in the middle
          var viewID: String = String()

          var view: Anytype_Model_Block.Content.Dataview.View {
            get {return _view ?? Anytype_Model_Block.Content.Dataview.View()}
            set {_view = newValue}
          }
          /// Returns true if `view` has been explicitly set.
          var hasView: Bool {return self._view != nil}
          /// Clears the value of `view`. Subsequent reads from it will return its default value.
          mutating func clearView() {self._view = nil}

          /// middleware will try to preserve the current aciveview's offset&limit but may reset it in case it becomes invalid or not actual anymore
          var offset: UInt32 = 0

          var limit: UInt32 = 0

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _view: Anytype_Model_Block.Content.Dataview.View? = nil
        }

        init() {}
      }

      struct Fields {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var fields: SwiftProtobuf.Google_Protobuf_Struct {
          get {return _fields ?? SwiftProtobuf.Google_Protobuf_Struct()}
          set {_fields = newValue}
        }
        /// Returns true if `fields` has been explicitly set.
        var hasFields: Bool {return self._fields != nil}
        /// Clears the value of `fields`. Subsequent reads from it will return its default value.
        mutating func clearFields() {self._fields = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _fields: SwiftProtobuf.Google_Protobuf_Struct? = nil
      }

      struct ChildrenIds {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var childrenIds: [String] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Restrictions {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var restrictions: Anytype_Model_Block.Restrictions {
          get {return _restrictions ?? Anytype_Model_Block.Restrictions()}
          set {_restrictions = newValue}
        }
        /// Returns true if `restrictions` has been explicitly set.
        var hasRestrictions: Bool {return self._restrictions != nil}
        /// Clears the value of `restrictions`. Subsequent reads from it will return its default value.
        mutating func clearRestrictions() {self._restrictions = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _restrictions: Anytype_Model_Block.Restrictions? = nil
      }

      struct BackgroundColor {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var backgroundColor: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Align {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var align: Anytype_Model_Block.Align = .left

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Text {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var text: Anytype_Event.Block.Set.Text.Text {
          get {return _text ?? Anytype_Event.Block.Set.Text.Text()}
          set {_text = newValue}
        }
        /// Returns true if `text` has been explicitly set.
        var hasText: Bool {return self._text != nil}
        /// Clears the value of `text`. Subsequent reads from it will return its default value.
        mutating func clearText() {self._text = nil}

        var style: Anytype_Event.Block.Set.Text.Style {
          get {return _style ?? Anytype_Event.Block.Set.Text.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        mutating func clearStyle() {self._style = nil}

        var marks: Anytype_Event.Block.Set.Text.Marks {
          get {return _marks ?? Anytype_Event.Block.Set.Text.Marks()}
          set {_marks = newValue}
        }
        /// Returns true if `marks` has been explicitly set.
        var hasMarks: Bool {return self._marks != nil}
        /// Clears the value of `marks`. Subsequent reads from it will return its default value.
        mutating func clearMarks() {self._marks = nil}

        var checked: Anytype_Event.Block.Set.Text.Checked {
          get {return _checked ?? Anytype_Event.Block.Set.Text.Checked()}
          set {_checked = newValue}
        }
        /// Returns true if `checked` has been explicitly set.
        var hasChecked: Bool {return self._checked != nil}
        /// Clears the value of `checked`. Subsequent reads from it will return its default value.
        mutating func clearChecked() {self._checked = nil}

        var color: Anytype_Event.Block.Set.Text.Color {
          get {return _color ?? Anytype_Event.Block.Set.Text.Color()}
          set {_color = newValue}
        }
        /// Returns true if `color` has been explicitly set.
        var hasColor: Bool {return self._color != nil}
        /// Clears the value of `color`. Subsequent reads from it will return its default value.
        mutating func clearColor() {self._color = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Text {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.Text.Style = .paragraph

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Marks {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.Text.Marks {
            get {return _value ?? Anytype_Model_Block.Content.Text.Marks()}
            set {_value = newValue}
          }
          /// Returns true if `value` has been explicitly set.
          var hasValue: Bool {return self._value != nil}
          /// Clears the value of `value`. Subsequent reads from it will return its default value.
          mutating func clearValue() {self._value = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _value: Anytype_Model_Block.Content.Text.Marks? = nil
        }

        struct Checked {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Bool = false

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Color {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        init() {}

        fileprivate var _text: Anytype_Event.Block.Set.Text.Text? = nil
        fileprivate var _style: Anytype_Event.Block.Set.Text.Style? = nil
        fileprivate var _marks: Anytype_Event.Block.Set.Text.Marks? = nil
        fileprivate var _checked: Anytype_Event.Block.Set.Text.Checked? = nil
        fileprivate var _color: Anytype_Event.Block.Set.Text.Color? = nil
      }

      struct Div {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var style: Anytype_Event.Block.Set.Div.Style {
          get {return _style ?? Anytype_Event.Block.Set.Div.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        mutating func clearStyle() {self._style = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.Div.Style = .line

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        init() {}

        fileprivate var _style: Anytype_Event.Block.Set.Div.Style? = nil
      }

      struct File {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var type: Anytype_Event.Block.Set.File.TypeMessage {
          get {return _type ?? Anytype_Event.Block.Set.File.TypeMessage()}
          set {_type = newValue}
        }
        /// Returns true if `type` has been explicitly set.
        var hasType: Bool {return self._type != nil}
        /// Clears the value of `type`. Subsequent reads from it will return its default value.
        mutating func clearType() {self._type = nil}

        var state: Anytype_Event.Block.Set.File.State {
          get {return _state ?? Anytype_Event.Block.Set.File.State()}
          set {_state = newValue}
        }
        /// Returns true if `state` has been explicitly set.
        var hasState: Bool {return self._state != nil}
        /// Clears the value of `state`. Subsequent reads from it will return its default value.
        mutating func clearState() {self._state = nil}

        var mime: Anytype_Event.Block.Set.File.Mime {
          get {return _mime ?? Anytype_Event.Block.Set.File.Mime()}
          set {_mime = newValue}
        }
        /// Returns true if `mime` has been explicitly set.
        var hasMime: Bool {return self._mime != nil}
        /// Clears the value of `mime`. Subsequent reads from it will return its default value.
        mutating func clearMime() {self._mime = nil}

        var hash: Anytype_Event.Block.Set.File.Hash {
          get {return _hash ?? Anytype_Event.Block.Set.File.Hash()}
          set {_hash = newValue}
        }
        /// Returns true if `hash` has been explicitly set.
        var hasHash: Bool {return self._hash != nil}
        /// Clears the value of `hash`. Subsequent reads from it will return its default value.
        mutating func clearHash() {self._hash = nil}

        var name: Anytype_Event.Block.Set.File.Name {
          get {return _name ?? Anytype_Event.Block.Set.File.Name()}
          set {_name = newValue}
        }
        /// Returns true if `name` has been explicitly set.
        var hasName: Bool {return self._name != nil}
        /// Clears the value of `name`. Subsequent reads from it will return its default value.
        mutating func clearName() {self._name = nil}

        var size: Anytype_Event.Block.Set.File.Size {
          get {return _size ?? Anytype_Event.Block.Set.File.Size()}
          set {_size = newValue}
        }
        /// Returns true if `size` has been explicitly set.
        var hasSize: Bool {return self._size != nil}
        /// Clears the value of `size`. Subsequent reads from it will return its default value.
        mutating func clearSize() {self._size = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Name {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Width {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Int32 = 0

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct State {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.File.State = .empty

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct TypeMessage {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.File.TypeEnum = .none

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Hash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Mime {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Size {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Int64 = 0

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        init() {}

        fileprivate var _type: Anytype_Event.Block.Set.File.TypeMessage? = nil
        fileprivate var _state: Anytype_Event.Block.Set.File.State? = nil
        fileprivate var _mime: Anytype_Event.Block.Set.File.Mime? = nil
        fileprivate var _hash: Anytype_Event.Block.Set.File.Hash? = nil
        fileprivate var _name: Anytype_Event.Block.Set.File.Name? = nil
        fileprivate var _size: Anytype_Event.Block.Set.File.Size? = nil
      }

      struct Link {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var targetBlockID: Anytype_Event.Block.Set.Link.TargetBlockId {
          get {return _targetBlockID ?? Anytype_Event.Block.Set.Link.TargetBlockId()}
          set {_targetBlockID = newValue}
        }
        /// Returns true if `targetBlockID` has been explicitly set.
        var hasTargetBlockID: Bool {return self._targetBlockID != nil}
        /// Clears the value of `targetBlockID`. Subsequent reads from it will return its default value.
        mutating func clearTargetBlockID() {self._targetBlockID = nil}

        var style: Anytype_Event.Block.Set.Link.Style {
          get {return _style ?? Anytype_Event.Block.Set.Link.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        mutating func clearStyle() {self._style = nil}

        var fields: Anytype_Event.Block.Set.Link.Fields {
          get {return _fields ?? Anytype_Event.Block.Set.Link.Fields()}
          set {_fields = newValue}
        }
        /// Returns true if `fields` has been explicitly set.
        var hasFields: Bool {return self._fields != nil}
        /// Clears the value of `fields`. Subsequent reads from it will return its default value.
        mutating func clearFields() {self._fields = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct TargetBlockId {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.Link.Style = .page

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Fields {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: SwiftProtobuf.Google_Protobuf_Struct {
            get {return _value ?? SwiftProtobuf.Google_Protobuf_Struct()}
            set {_value = newValue}
          }
          /// Returns true if `value` has been explicitly set.
          var hasValue: Bool {return self._value != nil}
          /// Clears the value of `value`. Subsequent reads from it will return its default value.
          mutating func clearValue() {self._value = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _value: SwiftProtobuf.Google_Protobuf_Struct? = nil
        }

        init() {}

        fileprivate var _targetBlockID: Anytype_Event.Block.Set.Link.TargetBlockId? = nil
        fileprivate var _style: Anytype_Event.Block.Set.Link.Style? = nil
        fileprivate var _fields: Anytype_Event.Block.Set.Link.Fields? = nil
      }

      struct Bookmark {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var url: Anytype_Event.Block.Set.Bookmark.Url {
          get {return _url ?? Anytype_Event.Block.Set.Bookmark.Url()}
          set {_url = newValue}
        }
        /// Returns true if `url` has been explicitly set.
        var hasURL: Bool {return self._url != nil}
        /// Clears the value of `url`. Subsequent reads from it will return its default value.
        mutating func clearURL() {self._url = nil}

        var title: Anytype_Event.Block.Set.Bookmark.Title {
          get {return _title ?? Anytype_Event.Block.Set.Bookmark.Title()}
          set {_title = newValue}
        }
        /// Returns true if `title` has been explicitly set.
        var hasTitle: Bool {return self._title != nil}
        /// Clears the value of `title`. Subsequent reads from it will return its default value.
        mutating func clearTitle() {self._title = nil}

        var description_p: Anytype_Event.Block.Set.Bookmark.Description {
          get {return _description_p ?? Anytype_Event.Block.Set.Bookmark.Description()}
          set {_description_p = newValue}
        }
        /// Returns true if `description_p` has been explicitly set.
        var hasDescription_p: Bool {return self._description_p != nil}
        /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
        mutating func clearDescription_p() {self._description_p = nil}

        var imageHash: Anytype_Event.Block.Set.Bookmark.ImageHash {
          get {return _imageHash ?? Anytype_Event.Block.Set.Bookmark.ImageHash()}
          set {_imageHash = newValue}
        }
        /// Returns true if `imageHash` has been explicitly set.
        var hasImageHash: Bool {return self._imageHash != nil}
        /// Clears the value of `imageHash`. Subsequent reads from it will return its default value.
        mutating func clearImageHash() {self._imageHash = nil}

        var faviconHash: Anytype_Event.Block.Set.Bookmark.FaviconHash {
          get {return _faviconHash ?? Anytype_Event.Block.Set.Bookmark.FaviconHash()}
          set {_faviconHash = newValue}
        }
        /// Returns true if `faviconHash` has been explicitly set.
        var hasFaviconHash: Bool {return self._faviconHash != nil}
        /// Clears the value of `faviconHash`. Subsequent reads from it will return its default value.
        mutating func clearFaviconHash() {self._faviconHash = nil}

        var type: Anytype_Event.Block.Set.Bookmark.TypeMessage {
          get {return _type ?? Anytype_Event.Block.Set.Bookmark.TypeMessage()}
          set {_type = newValue}
        }
        /// Returns true if `type` has been explicitly set.
        var hasType: Bool {return self._type != nil}
        /// Clears the value of `type`. Subsequent reads from it will return its default value.
        mutating func clearType() {self._type = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Url {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Title {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Description {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct ImageHash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct FaviconHash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct TypeMessage {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_LinkPreview.TypeEnum = .unknown

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        init() {}

        fileprivate var _url: Anytype_Event.Block.Set.Bookmark.Url? = nil
        fileprivate var _title: Anytype_Event.Block.Set.Bookmark.Title? = nil
        fileprivate var _description_p: Anytype_Event.Block.Set.Bookmark.Description? = nil
        fileprivate var _imageHash: Anytype_Event.Block.Set.Bookmark.ImageHash? = nil
        fileprivate var _faviconHash: Anytype_Event.Block.Set.Bookmark.FaviconHash? = nil
        fileprivate var _type: Anytype_Event.Block.Set.Bookmark.TypeMessage? = nil
      }

      init() {}
    }

    struct Fill {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Details {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var details: SwiftProtobuf.Google_Protobuf_Struct {
          get {return _details ?? SwiftProtobuf.Google_Protobuf_Struct()}
          set {_details = newValue}
        }
        /// Returns true if `details` has been explicitly set.
        var hasDetails: Bool {return self._details != nil}
        /// Clears the value of `details`. Subsequent reads from it will return its default value.
        mutating func clearDetails() {self._details = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _details: SwiftProtobuf.Google_Protobuf_Struct? = nil
      }

      struct DatabaseRecords {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var records: [SwiftProtobuf.Google_Protobuf_Struct] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Fields {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var fields: SwiftProtobuf.Google_Protobuf_Struct {
          get {return _fields ?? SwiftProtobuf.Google_Protobuf_Struct()}
          set {_fields = newValue}
        }
        /// Returns true if `fields` has been explicitly set.
        var hasFields: Bool {return self._fields != nil}
        /// Clears the value of `fields`. Subsequent reads from it will return its default value.
        mutating func clearFields() {self._fields = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _fields: SwiftProtobuf.Google_Protobuf_Struct? = nil
      }

      struct ChildrenIds {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var childrenIds: [String] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Restrictions {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var restrictions: Anytype_Model_Block.Restrictions {
          get {return _restrictions ?? Anytype_Model_Block.Restrictions()}
          set {_restrictions = newValue}
        }
        /// Returns true if `restrictions` has been explicitly set.
        var hasRestrictions: Bool {return self._restrictions != nil}
        /// Clears the value of `restrictions`. Subsequent reads from it will return its default value.
        mutating func clearRestrictions() {self._restrictions = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _restrictions: Anytype_Model_Block.Restrictions? = nil
      }

      struct BackgroundColor {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var backgroundColor: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Align {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var align: Anytype_Model_Block.Align = .left

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Text {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var text: Anytype_Event.Block.Fill.Text.Text {
          get {return _text ?? Anytype_Event.Block.Fill.Text.Text()}
          set {_text = newValue}
        }
        /// Returns true if `text` has been explicitly set.
        var hasText: Bool {return self._text != nil}
        /// Clears the value of `text`. Subsequent reads from it will return its default value.
        mutating func clearText() {self._text = nil}

        var style: Anytype_Event.Block.Fill.Text.Style {
          get {return _style ?? Anytype_Event.Block.Fill.Text.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        mutating func clearStyle() {self._style = nil}

        var marks: Anytype_Event.Block.Fill.Text.Marks {
          get {return _marks ?? Anytype_Event.Block.Fill.Text.Marks()}
          set {_marks = newValue}
        }
        /// Returns true if `marks` has been explicitly set.
        var hasMarks: Bool {return self._marks != nil}
        /// Clears the value of `marks`. Subsequent reads from it will return its default value.
        mutating func clearMarks() {self._marks = nil}

        var checked: Anytype_Event.Block.Fill.Text.Checked {
          get {return _checked ?? Anytype_Event.Block.Fill.Text.Checked()}
          set {_checked = newValue}
        }
        /// Returns true if `checked` has been explicitly set.
        var hasChecked: Bool {return self._checked != nil}
        /// Clears the value of `checked`. Subsequent reads from it will return its default value.
        mutating func clearChecked() {self._checked = nil}

        var color: Anytype_Event.Block.Fill.Text.Color {
          get {return _color ?? Anytype_Event.Block.Fill.Text.Color()}
          set {_color = newValue}
        }
        /// Returns true if `color` has been explicitly set.
        var hasColor: Bool {return self._color != nil}
        /// Clears the value of `color`. Subsequent reads from it will return its default value.
        mutating func clearColor() {self._color = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Text {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.Text.Style = .paragraph

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Marks {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.Text.Marks {
            get {return _value ?? Anytype_Model_Block.Content.Text.Marks()}
            set {_value = newValue}
          }
          /// Returns true if `value` has been explicitly set.
          var hasValue: Bool {return self._value != nil}
          /// Clears the value of `value`. Subsequent reads from it will return its default value.
          mutating func clearValue() {self._value = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _value: Anytype_Model_Block.Content.Text.Marks? = nil
        }

        struct Checked {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Bool = false

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Color {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        init() {}

        fileprivate var _text: Anytype_Event.Block.Fill.Text.Text? = nil
        fileprivate var _style: Anytype_Event.Block.Fill.Text.Style? = nil
        fileprivate var _marks: Anytype_Event.Block.Fill.Text.Marks? = nil
        fileprivate var _checked: Anytype_Event.Block.Fill.Text.Checked? = nil
        fileprivate var _color: Anytype_Event.Block.Fill.Text.Color? = nil
      }

      struct Div {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var style: Anytype_Event.Block.Fill.Div.Style {
          get {return _style ?? Anytype_Event.Block.Fill.Div.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        mutating func clearStyle() {self._style = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.Div.Style = .line

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        init() {}

        fileprivate var _style: Anytype_Event.Block.Fill.Div.Style? = nil
      }

      struct File {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var type: Anytype_Event.Block.Fill.File.TypeMessage {
          get {return _type ?? Anytype_Event.Block.Fill.File.TypeMessage()}
          set {_type = newValue}
        }
        /// Returns true if `type` has been explicitly set.
        var hasType: Bool {return self._type != nil}
        /// Clears the value of `type`. Subsequent reads from it will return its default value.
        mutating func clearType() {self._type = nil}

        var state: Anytype_Event.Block.Fill.File.State {
          get {return _state ?? Anytype_Event.Block.Fill.File.State()}
          set {_state = newValue}
        }
        /// Returns true if `state` has been explicitly set.
        var hasState: Bool {return self._state != nil}
        /// Clears the value of `state`. Subsequent reads from it will return its default value.
        mutating func clearState() {self._state = nil}

        var mime: Anytype_Event.Block.Fill.File.Mime {
          get {return _mime ?? Anytype_Event.Block.Fill.File.Mime()}
          set {_mime = newValue}
        }
        /// Returns true if `mime` has been explicitly set.
        var hasMime: Bool {return self._mime != nil}
        /// Clears the value of `mime`. Subsequent reads from it will return its default value.
        mutating func clearMime() {self._mime = nil}

        var hash: Anytype_Event.Block.Fill.File.Hash {
          get {return _hash ?? Anytype_Event.Block.Fill.File.Hash()}
          set {_hash = newValue}
        }
        /// Returns true if `hash` has been explicitly set.
        var hasHash: Bool {return self._hash != nil}
        /// Clears the value of `hash`. Subsequent reads from it will return its default value.
        mutating func clearHash() {self._hash = nil}

        var name: Anytype_Event.Block.Fill.File.Name {
          get {return _name ?? Anytype_Event.Block.Fill.File.Name()}
          set {_name = newValue}
        }
        /// Returns true if `name` has been explicitly set.
        var hasName: Bool {return self._name != nil}
        /// Clears the value of `name`. Subsequent reads from it will return its default value.
        mutating func clearName() {self._name = nil}

        var size: Anytype_Event.Block.Fill.File.Size {
          get {return _size ?? Anytype_Event.Block.Fill.File.Size()}
          set {_size = newValue}
        }
        /// Returns true if `size` has been explicitly set.
        var hasSize: Bool {return self._size != nil}
        /// Clears the value of `size`. Subsequent reads from it will return its default value.
        mutating func clearSize() {self._size = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Name {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Width {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Int32 = 0

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct State {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.File.State = .empty

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct TypeMessage {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.File.TypeEnum = .none

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Hash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Mime {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Size {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Int64 = 0

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        init() {}

        fileprivate var _type: Anytype_Event.Block.Fill.File.TypeMessage? = nil
        fileprivate var _state: Anytype_Event.Block.Fill.File.State? = nil
        fileprivate var _mime: Anytype_Event.Block.Fill.File.Mime? = nil
        fileprivate var _hash: Anytype_Event.Block.Fill.File.Hash? = nil
        fileprivate var _name: Anytype_Event.Block.Fill.File.Name? = nil
        fileprivate var _size: Anytype_Event.Block.Fill.File.Size? = nil
      }

      struct Link {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var targetBlockID: Anytype_Event.Block.Fill.Link.TargetBlockId {
          get {return _targetBlockID ?? Anytype_Event.Block.Fill.Link.TargetBlockId()}
          set {_targetBlockID = newValue}
        }
        /// Returns true if `targetBlockID` has been explicitly set.
        var hasTargetBlockID: Bool {return self._targetBlockID != nil}
        /// Clears the value of `targetBlockID`. Subsequent reads from it will return its default value.
        mutating func clearTargetBlockID() {self._targetBlockID = nil}

        var style: Anytype_Event.Block.Fill.Link.Style {
          get {return _style ?? Anytype_Event.Block.Fill.Link.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        mutating func clearStyle() {self._style = nil}

        var fields: Anytype_Event.Block.Fill.Link.Fields {
          get {return _fields ?? Anytype_Event.Block.Fill.Link.Fields()}
          set {_fields = newValue}
        }
        /// Returns true if `fields` has been explicitly set.
        var hasFields: Bool {return self._fields != nil}
        /// Clears the value of `fields`. Subsequent reads from it will return its default value.
        mutating func clearFields() {self._fields = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct TargetBlockId {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.Link.Style = .page

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Fields {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: SwiftProtobuf.Google_Protobuf_Struct {
            get {return _value ?? SwiftProtobuf.Google_Protobuf_Struct()}
            set {_value = newValue}
          }
          /// Returns true if `value` has been explicitly set.
          var hasValue: Bool {return self._value != nil}
          /// Clears the value of `value`. Subsequent reads from it will return its default value.
          mutating func clearValue() {self._value = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _value: SwiftProtobuf.Google_Protobuf_Struct? = nil
        }

        init() {}

        fileprivate var _targetBlockID: Anytype_Event.Block.Fill.Link.TargetBlockId? = nil
        fileprivate var _style: Anytype_Event.Block.Fill.Link.Style? = nil
        fileprivate var _fields: Anytype_Event.Block.Fill.Link.Fields? = nil
      }

      struct Bookmark {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var url: Anytype_Event.Block.Fill.Bookmark.Url {
          get {return _url ?? Anytype_Event.Block.Fill.Bookmark.Url()}
          set {_url = newValue}
        }
        /// Returns true if `url` has been explicitly set.
        var hasURL: Bool {return self._url != nil}
        /// Clears the value of `url`. Subsequent reads from it will return its default value.
        mutating func clearURL() {self._url = nil}

        var title: Anytype_Event.Block.Fill.Bookmark.Title {
          get {return _title ?? Anytype_Event.Block.Fill.Bookmark.Title()}
          set {_title = newValue}
        }
        /// Returns true if `title` has been explicitly set.
        var hasTitle: Bool {return self._title != nil}
        /// Clears the value of `title`. Subsequent reads from it will return its default value.
        mutating func clearTitle() {self._title = nil}

        var description_p: Anytype_Event.Block.Fill.Bookmark.Description {
          get {return _description_p ?? Anytype_Event.Block.Fill.Bookmark.Description()}
          set {_description_p = newValue}
        }
        /// Returns true if `description_p` has been explicitly set.
        var hasDescription_p: Bool {return self._description_p != nil}
        /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
        mutating func clearDescription_p() {self._description_p = nil}

        var imageHash: Anytype_Event.Block.Fill.Bookmark.ImageHash {
          get {return _imageHash ?? Anytype_Event.Block.Fill.Bookmark.ImageHash()}
          set {_imageHash = newValue}
        }
        /// Returns true if `imageHash` has been explicitly set.
        var hasImageHash: Bool {return self._imageHash != nil}
        /// Clears the value of `imageHash`. Subsequent reads from it will return its default value.
        mutating func clearImageHash() {self._imageHash = nil}

        var faviconHash: Anytype_Event.Block.Fill.Bookmark.FaviconHash {
          get {return _faviconHash ?? Anytype_Event.Block.Fill.Bookmark.FaviconHash()}
          set {_faviconHash = newValue}
        }
        /// Returns true if `faviconHash` has been explicitly set.
        var hasFaviconHash: Bool {return self._faviconHash != nil}
        /// Clears the value of `faviconHash`. Subsequent reads from it will return its default value.
        mutating func clearFaviconHash() {self._faviconHash = nil}

        var type: Anytype_Event.Block.Fill.Bookmark.TypeMessage {
          get {return _type ?? Anytype_Event.Block.Fill.Bookmark.TypeMessage()}
          set {_type = newValue}
        }
        /// Returns true if `type` has been explicitly set.
        var hasType: Bool {return self._type != nil}
        /// Clears the value of `type`. Subsequent reads from it will return its default value.
        mutating func clearType() {self._type = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Url {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Title {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Description {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct ImageHash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct FaviconHash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct TypeMessage {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_LinkPreview.TypeEnum = .unknown

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        init() {}

        fileprivate var _url: Anytype_Event.Block.Fill.Bookmark.Url? = nil
        fileprivate var _title: Anytype_Event.Block.Fill.Bookmark.Title? = nil
        fileprivate var _description_p: Anytype_Event.Block.Fill.Bookmark.Description? = nil
        fileprivate var _imageHash: Anytype_Event.Block.Fill.Bookmark.ImageHash? = nil
        fileprivate var _faviconHash: Anytype_Event.Block.Fill.Bookmark.FaviconHash? = nil
        fileprivate var _type: Anytype_Event.Block.Fill.Bookmark.TypeMessage? = nil
      }

      init() {}
    }

    init() {}
  }

  struct User {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Block {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      ///*
      ///  Middleware to front end event message, that will be sent in this scenario:
      /// Precondition: user A opened a block
      /// 1. User B opens the same block
      /// 2. User A receives a message about p.1
      struct Join {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account of the user, that opened a block
        var account: Anytype_Event.Account {
          get {return _account ?? Anytype_Event.Account()}
          set {_account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        var hasAccount: Bool {return self._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        mutating func clearAccount() {self._account = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _account: Anytype_Event.Account? = nil
      }

      ///*
      ///  Middleware to front end event message, that will be sent in this scenario:
      /// Precondition: user A and user B opened the same block
      /// 1. User B closes the block
      /// 2. User A receives a message about p.1
      struct Left {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account of the user, that left the block
        var account: Anytype_Event.Account {
          get {return _account ?? Anytype_Event.Account()}
          set {_account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        var hasAccount: Bool {return self._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        mutating func clearAccount() {self._account = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _account: Anytype_Event.Account? = nil
      }

      ///*
      /// Middleware to front end event message, that will be sent in this scenario:
      /// Precondition: user A and user B opened the same block
      /// 1. User B sets cursor or selects a text region into a text block
      /// 2. User A receives a message about p.1
      struct TextRange {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account of the user, that selected a text
        var account: Anytype_Event.Account {
          get {return _account ?? Anytype_Event.Account()}
          set {_account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        var hasAccount: Bool {return self._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        mutating func clearAccount() {self._account = nil}

        /// Id of the text block, that have a selection
        var blockID: String = String()

        /// Range of the selection
        var range: Anytype_Model_Range {
          get {return _range ?? Anytype_Model_Range()}
          set {_range = newValue}
        }
        /// Returns true if `range` has been explicitly set.
        var hasRange: Bool {return self._range != nil}
        /// Clears the value of `range`. Subsequent reads from it will return its default value.
        mutating func clearRange() {self._range = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _account: Anytype_Event.Account? = nil
        fileprivate var _range: Anytype_Model_Range? = nil
      }

      ///*
      /// Middleware to front end event message, that will be sent in this scenario:
      /// Precondition: user A and user B opened the same block
      /// 1. User B selects some inner blocks
      /// 2. User A receives a message about p.1
      struct SelectRange {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account of the user, that selected blocks
        var account: Anytype_Event.Account {
          get {return _account ?? Anytype_Event.Account()}
          set {_account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        var hasAccount: Bool {return self._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        mutating func clearAccount() {self._account = nil}

        /// Ids of selected blocks.
        var blockIdsArray: [String] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _account: Anytype_Event.Account? = nil
      }

      init() {}
    }

    init() {}
  }

  struct Ping {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var index: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Process {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct New {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var process: Anytype_Model.Process {
        get {return _process ?? Anytype_Model.Process()}
        set {_process = newValue}
      }
      /// Returns true if `process` has been explicitly set.
      var hasProcess: Bool {return self._process != nil}
      /// Clears the value of `process`. Subsequent reads from it will return its default value.
      mutating func clearProcess() {self._process = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _process: Anytype_Model.Process? = nil
    }

    struct Update {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var process: Anytype_Model.Process {
        get {return _process ?? Anytype_Model.Process()}
        set {_process = newValue}
      }
      /// Returns true if `process` has been explicitly set.
      var hasProcess: Bool {return self._process != nil}
      /// Clears the value of `process`. Subsequent reads from it will return its default value.
      mutating func clearProcess() {self._process = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _process: Anytype_Model.Process? = nil
    }

    struct Done {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var process: Anytype_Model.Process {
        get {return _process ?? Anytype_Model.Process()}
        set {_process = newValue}
      }
      /// Returns true if `process` has been explicitly set.
      var hasProcess: Bool {return self._process != nil}
      /// Clears the value of `process`. Subsequent reads from it will return its default value.
      mutating func clearProcess() {self._process = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _process: Anytype_Model.Process? = nil
    }

    init() {}
  }

  init() {}

  fileprivate var _initiator: Anytype_Model_Account? = nil
}

struct Anytype_ResponseEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var messages: [Anytype_Event.Message] = []

  var contextID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Anytype_Model {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Process {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var type: Anytype_Model.Process.TypeEnum = .dropFiles

    var state: Anytype_Model.Process.State = .none

    var progress: Anytype_Model.Process.Progress {
      get {return _progress ?? Anytype_Model.Process.Progress()}
      set {_progress = newValue}
    }
    /// Returns true if `progress` has been explicitly set.
    var hasProgress: Bool {return self._progress != nil}
    /// Clears the value of `progress`. Subsequent reads from it will return its default value.
    mutating func clearProgress() {self._progress = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum TypeEnum: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case dropFiles // = 0
      case UNRECOGNIZED(Int)

      init() {
        self = .dropFiles
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .dropFiles
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .dropFiles: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    enum State: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case none // = 0
      case running // = 1
      case done // = 2
      case canceled // = 3
      case error // = 4
      case UNRECOGNIZED(Int)

      init() {
        self = .none
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .none
        case 1: self = .running
        case 2: self = .done
        case 3: self = .canceled
        case 4: self = .error
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .none: return 0
        case .running: return 1
        case .done: return 2
        case .canceled: return 3
        case .error: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    struct Progress {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var total: Int64 = 0

      var done: Int64 = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    init() {}

    fileprivate var _progress: Anytype_Model.Process.Progress? = nil
  }

  init() {}
}

#if swift(>=4.2)

extension Anytype_Model.Process.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Model.Process.TypeEnum] = [
    .dropFiles,
  ]
}

extension Anytype_Model.Process.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Model.Process.State] = [
    .none,
    .running,
    .done,
    .canceled,
    .error,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"

extension Anytype_SmartBlockType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Page"),
    1: .same(proto: "Home"),
    2: .same(proto: "ProfilePage"),
    3: .same(proto: "Archive"),
    4: .same(proto: "Breadcrumbs"),
    5: .same(proto: "Set"),
  ]
}

extension Anytype_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
    2: .same(proto: "contextId"),
    3: .same(proto: "initiator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.messages)
      case 2: try decoder.decodeSingularStringField(value: &self.contextID)
      case 3: try decoder.decodeSingularMessageField(value: &self._initiator)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 1)
    }
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 2)
    }
    if let v = self._initiator {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event, rhs: Anytype_Event) -> Bool {
    if lhs.messages != rhs.messages {return false}
    if lhs.contextID != rhs.contextID {return false}
    if lhs._initiator != rhs._initiator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.protoMessageName + ".Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accountShow"),
    201: .same(proto: "accountDetails"),
    2: .same(proto: "blockAdd"),
    3: .same(proto: "blockDelete"),
    4: .same(proto: "filesUpload"),
    5: .same(proto: "marksInfo"),
    6: .same(proto: "blockSetFields"),
    7: .same(proto: "blockSetChildrenIds"),
    8: .same(proto: "blockSetRestrictions"),
    9: .same(proto: "blockSetBackgroundColor"),
    10: .same(proto: "blockSetText"),
    11: .same(proto: "blockSetFile"),
    13: .same(proto: "blockSetLink"),
    14: .same(proto: "blockSetBookmark"),
    15: .same(proto: "blockSetAlign"),
    16: .same(proto: "blockSetDetails"),
    17: .same(proto: "blockSetDiv"),
    18: .same(proto: "blockSetDataviewRecords"),
    19: .same(proto: "blockSetDataviewView"),
    20: .same(proto: "blockDeleteDataviewView"),
    30: .same(proto: "blockShow"),
    31: .same(proto: "userBlockJoin"),
    32: .same(proto: "userBlockLeft"),
    33: .same(proto: "userBlockSelectRange"),
    34: .same(proto: "userBlockTextRange"),
    100: .same(proto: "ping"),
    101: .same(proto: "processNew"),
    102: .same(proto: "processUpdate"),
    103: .same(proto: "processDone"),
  ]

  fileprivate class _StorageClass {
    var _value: Anytype_Event.Message.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Anytype_Event.Account.Show?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .accountShow(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .accountShow(v)}
        case 2:
          var v: Anytype_Event.Block.Add?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockAdd(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockAdd(v)}
        case 3:
          var v: Anytype_Event.Block.Delete?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockDelete(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockDelete(v)}
        case 4:
          var v: Anytype_Event.Block.FilesUpload?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .filesUpload(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .filesUpload(v)}
        case 5:
          var v: Anytype_Event.Block.MarksInfo?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .marksInfo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .marksInfo(v)}
        case 6:
          var v: Anytype_Event.Block.Set.Fields?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetFields(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetFields(v)}
        case 7:
          var v: Anytype_Event.Block.Set.ChildrenIds?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetChildrenIds(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetChildrenIds(v)}
        case 8:
          var v: Anytype_Event.Block.Set.Restrictions?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetRestrictions(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetRestrictions(v)}
        case 9:
          var v: Anytype_Event.Block.Set.BackgroundColor?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetBackgroundColor(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetBackgroundColor(v)}
        case 10:
          var v: Anytype_Event.Block.Set.Text?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetText(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetText(v)}
        case 11:
          var v: Anytype_Event.Block.Set.File?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetFile(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetFile(v)}
        case 13:
          var v: Anytype_Event.Block.Set.Link?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetLink(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetLink(v)}
        case 14:
          var v: Anytype_Event.Block.Set.Bookmark?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetBookmark(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetBookmark(v)}
        case 15:
          var v: Anytype_Event.Block.Set.Align?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetAlign(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetAlign(v)}
        case 16:
          var v: Anytype_Event.Block.Set.Details?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetDetails(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetDetails(v)}
        case 17:
          var v: Anytype_Event.Block.Set.Div?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetDiv(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetDiv(v)}
        case 18:
          var v: Anytype_Event.Block.Set.Dataview.Records?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetDataviewRecords(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetDataviewRecords(v)}
        case 19:
          var v: Anytype_Event.Block.Set.Dataview.View?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetDataviewView(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetDataviewView(v)}
        case 20:
          var v: Anytype_Event.Block.Delete.Dataview.View?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockDeleteDataviewView(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockDeleteDataviewView(v)}
        case 30:
          var v: Anytype_Event.Block.Show?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockShow(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockShow(v)}
        case 31:
          var v: Anytype_Event.User.Block.Join?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .userBlockJoin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .userBlockJoin(v)}
        case 32:
          var v: Anytype_Event.User.Block.Left?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .userBlockLeft(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .userBlockLeft(v)}
        case 33:
          var v: Anytype_Event.User.Block.SelectRange?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .userBlockSelectRange(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .userBlockSelectRange(v)}
        case 34:
          var v: Anytype_Event.User.Block.TextRange?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .userBlockTextRange(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .userBlockTextRange(v)}
        case 100:
          var v: Anytype_Event.Ping?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .ping(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .ping(v)}
        case 101:
          var v: Anytype_Event.Process.New?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .processNew(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .processNew(v)}
        case 102:
          var v: Anytype_Event.Process.Update?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .processUpdate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .processUpdate(v)}
        case 103:
          var v: Anytype_Event.Process.Done?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .processDone(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .processDone(v)}
        case 201:
          var v: Anytype_Event.Account.Details?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .accountDetails(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .accountDetails(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .accountShow(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .blockAdd(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .blockDelete(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .filesUpload(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .marksInfo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .blockSetFields(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .blockSetChildrenIds(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .blockSetRestrictions(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .blockSetBackgroundColor(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .blockSetText(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .blockSetFile(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .blockSetLink(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .blockSetBookmark(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .blockSetAlign(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case .blockSetDetails(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      case .blockSetDiv(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      case .blockSetDataviewRecords(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      case .blockSetDataviewView(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      case .blockDeleteDataviewView(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      case .blockShow(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      case .userBlockJoin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      case .userBlockLeft(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      case .userBlockSelectRange(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      case .userBlockTextRange(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
      case .ping(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      case .processNew(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      case .processUpdate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
      case .processDone(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
      case .accountDetails(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 201)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Message, rhs: Anytype_Event.Message) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.protoMessageName + ".Account"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Account, rhs: Anytype_Event.Account) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account.Show: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Account.protoMessageName + ".Show"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.index)
      case 2: try decoder.decodeSingularMessageField(value: &self._account)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Account.Show, rhs: Anytype_Event.Account.Show) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs._account != rhs._account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account.Details: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Account.protoMessageName + ".Details"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profileId"),
    2: .same(proto: "details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.profileID)
      case 2: try decoder.decodeSingularMessageField(value: &self._details)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.profileID.isEmpty {
      try visitor.visitSingularStringField(value: self.profileID, fieldNumber: 1)
    }
    if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Account.Details, rhs: Anytype_Event.Account.Details) -> Bool {
    if lhs.profileID != rhs.profileID {return false}
    if lhs._details != rhs._details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.protoMessageName + ".Block"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block, rhs: Anytype_Event.Block) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Add: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Add"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blocks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.blocks)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Add, rhs: Anytype_Event.Block.Add) -> Bool {
    if lhs.blocks != rhs.blocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Show: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Show"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rootId"),
    2: .same(proto: "blocks"),
    3: .same(proto: "details"),
    4: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.rootID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.blocks)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.details)
      case 4: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rootID.isEmpty {
      try visitor.visitSingularStringField(value: self.rootID, fieldNumber: 1)
    }
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 2)
    }
    if !self.details.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.details, fieldNumber: 3)
    }
    if self.type != .page {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Show, rhs: Anytype_Event.Block.Show) -> Bool {
    if lhs.rootID != rhs.rootID {return false}
    if lhs.blocks != rhs.blocks {return false}
    if lhs.details != rhs.details {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.FilesUpload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".FilesUpload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blockId"),
    2: .same(proto: "filePath"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.blockID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.filePath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 1)
    }
    if !self.filePath.isEmpty {
      try visitor.visitRepeatedStringField(value: self.filePath, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.FilesUpload, rhs: Anytype_Event.Block.FilesUpload) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.filePath != rhs.filePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Delete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Delete"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blockIds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Delete, rhs: Anytype_Event.Block.Delete) -> Bool {
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Delete.Dataview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Delete.protoMessageName + ".Dataview"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Delete.Dataview, rhs: Anytype_Event.Block.Delete.Dataview) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Delete.Dataview.View: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Delete.Dataview.protoMessageName + ".View"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.viewID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.viewID.isEmpty {
      try visitor.visitSingularStringField(value: self.viewID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Delete.Dataview.View, rhs: Anytype_Event.Block.Delete.Dataview.View) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.viewID != rhs.viewID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.MarksInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".MarksInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "marksInRange"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.marksInRange)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.marksInRange.isEmpty {
      try visitor.visitPackedEnumField(value: self.marksInRange, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.MarksInfo, rhs: Anytype_Event.Block.MarksInfo) -> Bool {
    if lhs.marksInRange != rhs.marksInRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Set"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set, rhs: Anytype_Event.Block.Set) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Details: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Details"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._details)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Details, rhs: Anytype_Event.Block.Set.Details) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._details != rhs._details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Dataview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Dataview"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Dataview, rhs: Anytype_Event.Block.Set.Dataview) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Dataview.Records: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Dataview.protoMessageName + ".Records"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewId"),
    3: .same(proto: "updated"),
    4: .same(proto: "inserted"),
    5: .same(proto: "insertPosition"),
    6: .same(proto: "removed"),
    7: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.viewID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.updated)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.inserted)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.insertPosition)
      case 6: try decoder.decodeRepeatedStringField(value: &self.removed)
      case 7: try decoder.decodeSingularUInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.viewID.isEmpty {
      try visitor.visitSingularStringField(value: self.viewID, fieldNumber: 2)
    }
    if !self.updated.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.updated, fieldNumber: 3)
    }
    if !self.inserted.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inserted, fieldNumber: 4)
    }
    if self.insertPosition != 0 {
      try visitor.visitSingularUInt32Field(value: self.insertPosition, fieldNumber: 5)
    }
    if !self.removed.isEmpty {
      try visitor.visitRepeatedStringField(value: self.removed, fieldNumber: 6)
    }
    if self.total != 0 {
      try visitor.visitSingularUInt32Field(value: self.total, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Dataview.Records, rhs: Anytype_Event.Block.Set.Dataview.Records) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.viewID != rhs.viewID {return false}
    if lhs.updated != rhs.updated {return false}
    if lhs.inserted != rhs.inserted {return false}
    if lhs.insertPosition != rhs.insertPosition {return false}
    if lhs.removed != rhs.removed {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Dataview.View: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Dataview.protoMessageName + ".View"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewId"),
    3: .same(proto: "view"),
    4: .same(proto: "offset"),
    5: .same(proto: "limit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.viewID)
      case 3: try decoder.decodeSingularMessageField(value: &self._view)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.offset)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.limit)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.viewID.isEmpty {
      try visitor.visitSingularStringField(value: self.viewID, fieldNumber: 2)
    }
    if let v = self._view {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.offset != 0 {
      try visitor.visitSingularUInt32Field(value: self.offset, fieldNumber: 4)
    }
    if self.limit != 0 {
      try visitor.visitSingularUInt32Field(value: self.limit, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Dataview.View, rhs: Anytype_Event.Block.Set.Dataview.View) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.viewID != rhs.viewID {return false}
    if lhs._view != rhs._view {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Fields"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._fields)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Fields, rhs: Anytype_Event.Block.Set.Fields) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.ChildrenIds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".ChildrenIds"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "childrenIds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeRepeatedStringField(value: &self.childrenIds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.childrenIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.childrenIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.ChildrenIds, rhs: Anytype_Event.Block.Set.ChildrenIds) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.childrenIds != rhs.childrenIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Restrictions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Restrictions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "restrictions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._restrictions)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._restrictions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Restrictions, rhs: Anytype_Event.Block.Set.Restrictions) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._restrictions != rhs._restrictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.BackgroundColor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".BackgroundColor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "backgroundColor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.backgroundColor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.backgroundColor.isEmpty {
      try visitor.visitSingularStringField(value: self.backgroundColor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.BackgroundColor, rhs: Anytype_Event.Block.Set.BackgroundColor) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.backgroundColor != rhs.backgroundColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Align: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Align"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "align"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.align)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.align != .left {
      try visitor.visitSingularEnumField(value: self.align, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Align, rhs: Anytype_Event.Block.Set.Align) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.align != rhs.align {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Text"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "text"),
    3: .same(proto: "style"),
    4: .same(proto: "marks"),
    5: .same(proto: "checked"),
    6: .same(proto: "color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._text)
      case 3: try decoder.decodeSingularMessageField(value: &self._style)
      case 4: try decoder.decodeSingularMessageField(value: &self._marks)
      case 5: try decoder.decodeSingularMessageField(value: &self._checked)
      case 6: try decoder.decodeSingularMessageField(value: &self._color)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._text {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._marks {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._checked {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text, rhs: Anytype_Event.Block.Set.Text) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._text != rhs._text {return false}
    if lhs._style != rhs._style {return false}
    if lhs._marks != rhs._marks {return false}
    if lhs._checked != rhs._checked {return false}
    if lhs._color != rhs._color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Text"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text.Text, rhs: Anytype_Event.Block.Set.Text.Text) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Style"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .paragraph {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text.Style, rhs: Anytype_Event.Block.Set.Text.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Marks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Marks"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text.Marks, rhs: Anytype_Event.Block.Set.Text.Marks) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Checked: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Checked"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text.Checked, rhs: Anytype_Event.Block.Set.Text.Checked) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Color"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text.Color, rhs: Anytype_Event.Block.Set.Text.Color) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Div: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Div"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "style"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._style)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Div, rhs: Anytype_Event.Block.Set.Div) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._style != rhs._style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Div.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Div.protoMessageName + ".Style"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .line {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Div.Style, rhs: Anytype_Event.Block.Set.Div.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".File"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "state"),
    4: .same(proto: "mime"),
    5: .same(proto: "hash"),
    6: .same(proto: "name"),
    7: .same(proto: "size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._type)
      case 3: try decoder.decodeSingularMessageField(value: &self._state)
      case 4: try decoder.decodeSingularMessageField(value: &self._mime)
      case 5: try decoder.decodeSingularMessageField(value: &self._hash)
      case 6: try decoder.decodeSingularMessageField(value: &self._name)
      case 7: try decoder.decodeSingularMessageField(value: &self._size)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._state {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._mime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._hash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._name {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File, rhs: Anytype_Event.Block.Set.File) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._type != rhs._type {return false}
    if lhs._state != rhs._state {return false}
    if lhs._mime != rhs._mime {return false}
    if lhs._hash != rhs._hash {return false}
    if lhs._name != rhs._name {return false}
    if lhs._size != rhs._size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Name: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Name"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.Name, rhs: Anytype_Event.Block.Set.File.Name) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Width: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Width"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.Width, rhs: Anytype_Event.Block.Set.File.Width) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".State"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .empty {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.State, rhs: Anytype_Event.Block.Set.File.State) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.TypeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Type"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .none {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.TypeMessage, rhs: Anytype_Event.Block.Set.File.TypeMessage) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Hash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Hash"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.Hash, rhs: Anytype_Event.Block.Set.File.Hash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Mime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Mime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.Mime, rhs: Anytype_Event.Block.Set.File.Mime) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Size: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Size"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.Size, rhs: Anytype_Event.Block.Set.File.Size) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Link"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "targetBlockId"),
    3: .same(proto: "style"),
    4: .same(proto: "fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._targetBlockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._style)
      case 4: try decoder.decodeSingularMessageField(value: &self._fields)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._targetBlockID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Link, rhs: Anytype_Event.Block.Set.Link) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._targetBlockID != rhs._targetBlockID {return false}
    if lhs._style != rhs._style {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.TargetBlockId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".TargetBlockId"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Link.TargetBlockId, rhs: Anytype_Event.Block.Set.Link.TargetBlockId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".Style"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .page {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Link.Style, rhs: Anytype_Event.Block.Set.Link.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".Fields"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Link.Fields, rhs: Anytype_Event.Block.Set.Link.Fields) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Bookmark"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "url"),
    3: .same(proto: "title"),
    4: .same(proto: "description"),
    5: .same(proto: "imageHash"),
    6: .same(proto: "faviconHash"),
    7: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._url)
      case 3: try decoder.decodeSingularMessageField(value: &self._title)
      case 4: try decoder.decodeSingularMessageField(value: &self._description_p)
      case 5: try decoder.decodeSingularMessageField(value: &self._imageHash)
      case 6: try decoder.decodeSingularMessageField(value: &self._faviconHash)
      case 7: try decoder.decodeSingularMessageField(value: &self._type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._url {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._title {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._imageHash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._faviconHash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Bookmark, rhs: Anytype_Event.Block.Set.Bookmark) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._url != rhs._url {return false}
    if lhs._title != rhs._title {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._imageHash != rhs._imageHash {return false}
    if lhs._faviconHash != rhs._faviconHash {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.Url: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".Url"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Bookmark.Url, rhs: Anytype_Event.Block.Set.Bookmark.Url) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.Title: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".Title"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Bookmark.Title, rhs: Anytype_Event.Block.Set.Bookmark.Title) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.Description: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".Description"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Bookmark.Description, rhs: Anytype_Event.Block.Set.Bookmark.Description) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.ImageHash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".ImageHash"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Bookmark.ImageHash, rhs: Anytype_Event.Block.Set.Bookmark.ImageHash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.FaviconHash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".FaviconHash"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Bookmark.FaviconHash, rhs: Anytype_Event.Block.Set.Bookmark.FaviconHash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.TypeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".Type"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .unknown {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Bookmark.TypeMessage, rhs: Anytype_Event.Block.Set.Bookmark.TypeMessage) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Fill"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill, rhs: Anytype_Event.Block.Fill) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Details: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Details"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._details)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Details, rhs: Anytype_Event.Block.Fill.Details) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._details != rhs._details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.DatabaseRecords: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".DatabaseRecords"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "records"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.records)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.records.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.records, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.DatabaseRecords, rhs: Anytype_Event.Block.Fill.DatabaseRecords) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.records != rhs.records {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Fields"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._fields)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Fields, rhs: Anytype_Event.Block.Fill.Fields) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.ChildrenIds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".ChildrenIds"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "childrenIds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeRepeatedStringField(value: &self.childrenIds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.childrenIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.childrenIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.ChildrenIds, rhs: Anytype_Event.Block.Fill.ChildrenIds) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.childrenIds != rhs.childrenIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Restrictions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Restrictions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "restrictions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._restrictions)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._restrictions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Restrictions, rhs: Anytype_Event.Block.Fill.Restrictions) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._restrictions != rhs._restrictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.BackgroundColor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".BackgroundColor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "backgroundColor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.backgroundColor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.backgroundColor.isEmpty {
      try visitor.visitSingularStringField(value: self.backgroundColor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.BackgroundColor, rhs: Anytype_Event.Block.Fill.BackgroundColor) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.backgroundColor != rhs.backgroundColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Align: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Align"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "align"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.align)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.align != .left {
      try visitor.visitSingularEnumField(value: self.align, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Align, rhs: Anytype_Event.Block.Fill.Align) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.align != rhs.align {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Text"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "text"),
    3: .same(proto: "style"),
    4: .same(proto: "marks"),
    5: .same(proto: "checked"),
    6: .same(proto: "color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._text)
      case 3: try decoder.decodeSingularMessageField(value: &self._style)
      case 4: try decoder.decodeSingularMessageField(value: &self._marks)
      case 5: try decoder.decodeSingularMessageField(value: &self._checked)
      case 6: try decoder.decodeSingularMessageField(value: &self._color)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._text {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._marks {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._checked {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Text, rhs: Anytype_Event.Block.Fill.Text) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._text != rhs._text {return false}
    if lhs._style != rhs._style {return false}
    if lhs._marks != rhs._marks {return false}
    if lhs._checked != rhs._checked {return false}
    if lhs._color != rhs._color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Text.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Text.protoMessageName + ".Text"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Text.Text, rhs: Anytype_Event.Block.Fill.Text.Text) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Text.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Text.protoMessageName + ".Style"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .paragraph {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Text.Style, rhs: Anytype_Event.Block.Fill.Text.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Text.Marks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Text.protoMessageName + ".Marks"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Text.Marks, rhs: Anytype_Event.Block.Fill.Text.Marks) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Text.Checked: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Text.protoMessageName + ".Checked"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Text.Checked, rhs: Anytype_Event.Block.Fill.Text.Checked) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Text.Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Text.protoMessageName + ".Color"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Text.Color, rhs: Anytype_Event.Block.Fill.Text.Color) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Div: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Div"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "style"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._style)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Div, rhs: Anytype_Event.Block.Fill.Div) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._style != rhs._style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Div.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Div.protoMessageName + ".Style"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .line {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Div.Style, rhs: Anytype_Event.Block.Fill.Div.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".File"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "state"),
    4: .same(proto: "mime"),
    5: .same(proto: "hash"),
    6: .same(proto: "name"),
    7: .same(proto: "size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._type)
      case 3: try decoder.decodeSingularMessageField(value: &self._state)
      case 4: try decoder.decodeSingularMessageField(value: &self._mime)
      case 5: try decoder.decodeSingularMessageField(value: &self._hash)
      case 6: try decoder.decodeSingularMessageField(value: &self._name)
      case 7: try decoder.decodeSingularMessageField(value: &self._size)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._state {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._mime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._hash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._name {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.File, rhs: Anytype_Event.Block.Fill.File) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._type != rhs._type {return false}
    if lhs._state != rhs._state {return false}
    if lhs._mime != rhs._mime {return false}
    if lhs._hash != rhs._hash {return false}
    if lhs._name != rhs._name {return false}
    if lhs._size != rhs._size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.Name: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Name"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.File.Name, rhs: Anytype_Event.Block.Fill.File.Name) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.Width: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Width"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.File.Width, rhs: Anytype_Event.Block.Fill.File.Width) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".State"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .empty {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.File.State, rhs: Anytype_Event.Block.Fill.File.State) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.TypeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Type"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .none {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.File.TypeMessage, rhs: Anytype_Event.Block.Fill.File.TypeMessage) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.Hash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Hash"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.File.Hash, rhs: Anytype_Event.Block.Fill.File.Hash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.Mime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Mime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.File.Mime, rhs: Anytype_Event.Block.Fill.File.Mime) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.Size: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Size"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.File.Size, rhs: Anytype_Event.Block.Fill.File.Size) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Link"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "targetBlockId"),
    3: .same(proto: "style"),
    4: .same(proto: "fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._targetBlockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._style)
      case 4: try decoder.decodeSingularMessageField(value: &self._fields)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._targetBlockID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Link, rhs: Anytype_Event.Block.Fill.Link) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._targetBlockID != rhs._targetBlockID {return false}
    if lhs._style != rhs._style {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Link.TargetBlockId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Link.protoMessageName + ".TargetBlockId"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Link.TargetBlockId, rhs: Anytype_Event.Block.Fill.Link.TargetBlockId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Link.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Link.protoMessageName + ".Style"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .page {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Link.Style, rhs: Anytype_Event.Block.Fill.Link.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Link.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Link.protoMessageName + ".Fields"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Link.Fields, rhs: Anytype_Event.Block.Fill.Link.Fields) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Bookmark"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "url"),
    3: .same(proto: "title"),
    4: .same(proto: "description"),
    5: .same(proto: "imageHash"),
    6: .same(proto: "faviconHash"),
    7: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._url)
      case 3: try decoder.decodeSingularMessageField(value: &self._title)
      case 4: try decoder.decodeSingularMessageField(value: &self._description_p)
      case 5: try decoder.decodeSingularMessageField(value: &self._imageHash)
      case 6: try decoder.decodeSingularMessageField(value: &self._faviconHash)
      case 7: try decoder.decodeSingularMessageField(value: &self._type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._url {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._title {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._imageHash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._faviconHash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Bookmark, rhs: Anytype_Event.Block.Fill.Bookmark) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._url != rhs._url {return false}
    if lhs._title != rhs._title {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._imageHash != rhs._imageHash {return false}
    if lhs._faviconHash != rhs._faviconHash {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.Url: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".Url"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.Url, rhs: Anytype_Event.Block.Fill.Bookmark.Url) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.Title: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".Title"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.Title, rhs: Anytype_Event.Block.Fill.Bookmark.Title) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.Description: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".Description"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.Description, rhs: Anytype_Event.Block.Fill.Bookmark.Description) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.ImageHash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".ImageHash"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.ImageHash, rhs: Anytype_Event.Block.Fill.Bookmark.ImageHash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.FaviconHash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".FaviconHash"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.FaviconHash, rhs: Anytype_Event.Block.Fill.Bookmark.FaviconHash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.TypeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".Type"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .unknown {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.TypeMessage, rhs: Anytype_Event.Block.Fill.Bookmark.TypeMessage) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.protoMessageName + ".User"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.User, rhs: Anytype_Event.User) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.User.protoMessageName + ".Block"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.User.Block, rhs: Anytype_Event.User.Block) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block.Join: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.User.Block.protoMessageName + ".Join"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._account)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.User.Block.Join, rhs: Anytype_Event.User.Block.Join) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block.Left: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.User.Block.protoMessageName + ".Left"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._account)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.User.Block.Left, rhs: Anytype_Event.User.Block.Left) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block.TextRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.User.Block.protoMessageName + ".TextRange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "blockId"),
    3: .same(proto: "range"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._account)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._range)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if let v = self._range {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.User.Block.TextRange, rhs: Anytype_Event.User.Block.TextRange) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._range != rhs._range {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block.SelectRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.User.Block.protoMessageName + ".SelectRange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "blockIdsArray"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._account)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIdsArray)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blockIdsArray.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIdsArray, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.User.Block.SelectRange, rhs: Anytype_Event.User.Block.SelectRange) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs.blockIdsArray != rhs.blockIdsArray {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Ping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.protoMessageName + ".Ping"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.index)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Ping, rhs: Anytype_Event.Ping) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Process: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.protoMessageName + ".Process"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Process, rhs: Anytype_Event.Process) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Process.New: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Process.protoMessageName + ".New"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "process"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._process)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._process {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Process.New, rhs: Anytype_Event.Process.New) -> Bool {
    if lhs._process != rhs._process {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Process.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Process.protoMessageName + ".Update"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "process"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._process)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._process {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Process.Update, rhs: Anytype_Event.Process.Update) -> Bool {
    if lhs._process != rhs._process {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Process.Done: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Process.protoMessageName + ".Done"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "process"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._process)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._process {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Process.Done, rhs: Anytype_Event.Process.Done) -> Bool {
    if lhs._process != rhs._process {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_ResponseEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
    2: .same(proto: "contextId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.messages)
      case 2: try decoder.decodeSingularStringField(value: &self.contextID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 1)
    }
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_ResponseEvent, rhs: Anytype_ResponseEvent) -> Bool {
    if lhs.messages != rhs.messages {return false}
    if lhs.contextID != rhs.contextID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Model"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model, rhs: Anytype_Model) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model.Process: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model.protoMessageName + ".Process"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "state"),
    4: .same(proto: "progress"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      case 3: try decoder.decodeSingularEnumField(value: &self.state)
      case 4: try decoder.decodeSingularMessageField(value: &self._progress)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.type != .dropFiles {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.state != .none {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    if let v = self._progress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model.Process, rhs: Anytype_Model.Process) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.state != rhs.state {return false}
    if lhs._progress != rhs._progress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model.Process.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DropFiles"),
  ]
}

extension Anytype_Model.Process.State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "Running"),
    2: .same(proto: "Done"),
    3: .same(proto: "Canceled"),
    4: .same(proto: "Error"),
  ]
}

extension Anytype_Model.Process.Progress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model.Process.protoMessageName + ".Progress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "done"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.total)
      case 2: try decoder.decodeSingularInt64Field(value: &self.done)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 1)
    }
    if self.done != 0 {
      try visitor.visitSingularInt64Field(value: self.done, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model.Process.Progress, rhs: Anytype_Model.Process.Progress) -> Bool {
    if lhs.total != rhs.total {return false}
    if lhs.done != rhs.done {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
