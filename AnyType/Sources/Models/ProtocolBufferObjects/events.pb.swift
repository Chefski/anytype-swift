// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/events.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///
/// Event â€“ type of message, that could be sent from a middleware to the corresponding front-end.
struct Anytype_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var messages: [Anytype_Event.Message] {
    get {return _storage._messages}
    set {_uniqueStorage()._messages = newValue}
  }

  var contextID: String {
    get {return _storage._contextID}
    set {_uniqueStorage()._contextID = newValue}
  }

  var initiator: Anytype_Model_Account {
    get {return _storage._initiator ?? Anytype_Model_Account()}
    set {_uniqueStorage()._initiator = newValue}
  }
  /// Returns true if `initiator` has been explicitly set.
  var hasInitiator: Bool {return _storage._initiator != nil}
  /// Clears the value of `initiator`. Subsequent reads from it will return its default value.
  mutating func clearInitiator() {_uniqueStorage()._initiator = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Message {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var value: OneOf_Value? {
      get {return _storage._value}
      set {_uniqueStorage()._value = newValue}
    }

    var accountShow: Anytype_Event.Account.Show {
      get {
        if case .accountShow(let v)? = _storage._value {return v}
        return Anytype_Event.Account.Show()
      }
      set {_uniqueStorage()._value = .accountShow(newValue)}
    }

    var blockAdd: Anytype_Event.Block.Add {
      get {
        if case .blockAdd(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Add()
      }
      set {_uniqueStorage()._value = .blockAdd(newValue)}
    }

    var blockDelete: Anytype_Event.Block.Delete {
      get {
        if case .blockDelete(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Delete()
      }
      set {_uniqueStorage()._value = .blockDelete(newValue)}
    }

    var filesUpload: Anytype_Event.Block.FilesUpload {
      get {
        if case .filesUpload(let v)? = _storage._value {return v}
        return Anytype_Event.Block.FilesUpload()
      }
      set {_uniqueStorage()._value = .filesUpload(newValue)}
    }

    var marksInfo: Anytype_Event.Block.MarksInfo {
      get {
        if case .marksInfo(let v)? = _storage._value {return v}
        return Anytype_Event.Block.MarksInfo()
      }
      set {_uniqueStorage()._value = .marksInfo(newValue)}
    }

    var blockSetFields: Anytype_Event.Block.Set.Fields {
      get {
        if case .blockSetFields(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Fields()
      }
      set {_uniqueStorage()._value = .blockSetFields(newValue)}
    }

    var blockSetChildrenIds: Anytype_Event.Block.Set.ChildrenIds {
      get {
        if case .blockSetChildrenIds(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.ChildrenIds()
      }
      set {_uniqueStorage()._value = .blockSetChildrenIds(newValue)}
    }

    var blockSetRestrictions: Anytype_Event.Block.Set.Restrictions {
      get {
        if case .blockSetRestrictions(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Restrictions()
      }
      set {_uniqueStorage()._value = .blockSetRestrictions(newValue)}
    }

    var blockSetIsArchived: Anytype_Event.Block.Set.IsArchived {
      get {
        if case .blockSetIsArchived(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.IsArchived()
      }
      set {_uniqueStorage()._value = .blockSetIsArchived(newValue)}
    }

    var blockSetText: Anytype_Event.Block.Set.Text {
      get {
        if case .blockSetText(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Text()
      }
      set {_uniqueStorage()._value = .blockSetText(newValue)}
    }

    var blockSetFile: Anytype_Event.Block.Set.File {
      get {
        if case .blockSetFile(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.File()
      }
      set {_uniqueStorage()._value = .blockSetFile(newValue)}
    }

    var blockSetIcon: Anytype_Event.Block.Set.Icon {
      get {
        if case .blockSetIcon(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Icon()
      }
      set {_uniqueStorage()._value = .blockSetIcon(newValue)}
    }

    var blockSetLink: Anytype_Event.Block.Set.Link {
      get {
        if case .blockSetLink(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Set.Link()
      }
      set {_uniqueStorage()._value = .blockSetLink(newValue)}
    }

    var blockShow: Anytype_Event.Block.Show {
      get {
        if case .blockShow(let v)? = _storage._value {return v}
        return Anytype_Event.Block.Show()
      }
      set {_uniqueStorage()._value = .blockShow(newValue)}
    }

    var userBlockJoin: Anytype_Event.User.Block.Join {
      get {
        if case .userBlockJoin(let v)? = _storage._value {return v}
        return Anytype_Event.User.Block.Join()
      }
      set {_uniqueStorage()._value = .userBlockJoin(newValue)}
    }

    var userBlockLeft: Anytype_Event.User.Block.Left {
      get {
        if case .userBlockLeft(let v)? = _storage._value {return v}
        return Anytype_Event.User.Block.Left()
      }
      set {_uniqueStorage()._value = .userBlockLeft(newValue)}
    }

    var userBlockSelectRange: Anytype_Event.User.Block.SelectRange {
      get {
        if case .userBlockSelectRange(let v)? = _storage._value {return v}
        return Anytype_Event.User.Block.SelectRange()
      }
      set {_uniqueStorage()._value = .userBlockSelectRange(newValue)}
    }

    var userBlockTextRange: Anytype_Event.User.Block.TextRange {
      get {
        if case .userBlockTextRange(let v)? = _storage._value {return v}
        return Anytype_Event.User.Block.TextRange()
      }
      set {_uniqueStorage()._value = .userBlockTextRange(newValue)}
    }

    var ping: Anytype_Event.Ping {
      get {
        if case .ping(let v)? = _storage._value {return v}
        return Anytype_Event.Ping()
      }
      set {_uniqueStorage()._value = .ping(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Value: Equatable {
      case accountShow(Anytype_Event.Account.Show)
      case blockAdd(Anytype_Event.Block.Add)
      case blockDelete(Anytype_Event.Block.Delete)
      case filesUpload(Anytype_Event.Block.FilesUpload)
      case marksInfo(Anytype_Event.Block.MarksInfo)
      case blockSetFields(Anytype_Event.Block.Set.Fields)
      case blockSetChildrenIds(Anytype_Event.Block.Set.ChildrenIds)
      case blockSetRestrictions(Anytype_Event.Block.Set.Restrictions)
      case blockSetIsArchived(Anytype_Event.Block.Set.IsArchived)
      case blockSetText(Anytype_Event.Block.Set.Text)
      case blockSetFile(Anytype_Event.Block.Set.File)
      case blockSetIcon(Anytype_Event.Block.Set.Icon)
      case blockSetLink(Anytype_Event.Block.Set.Link)
      case blockShow(Anytype_Event.Block.Show)
      case userBlockJoin(Anytype_Event.User.Block.Join)
      case userBlockLeft(Anytype_Event.User.Block.Left)
      case userBlockSelectRange(Anytype_Event.User.Block.SelectRange)
      case userBlockTextRange(Anytype_Event.User.Block.TextRange)
      case ping(Anytype_Event.Ping)

    #if !swift(>=4.1)
      static func ==(lhs: Anytype_Event.Message.OneOf_Value, rhs: Anytype_Event.Message.OneOf_Value) -> Bool {
        switch (lhs, rhs) {
        case (.accountShow(let l), .accountShow(let r)): return l == r
        case (.blockAdd(let l), .blockAdd(let r)): return l == r
        case (.blockDelete(let l), .blockDelete(let r)): return l == r
        case (.filesUpload(let l), .filesUpload(let r)): return l == r
        case (.marksInfo(let l), .marksInfo(let r)): return l == r
        case (.blockSetFields(let l), .blockSetFields(let r)): return l == r
        case (.blockSetChildrenIds(let l), .blockSetChildrenIds(let r)): return l == r
        case (.blockSetRestrictions(let l), .blockSetRestrictions(let r)): return l == r
        case (.blockSetIsArchived(let l), .blockSetIsArchived(let r)): return l == r
        case (.blockSetText(let l), .blockSetText(let r)): return l == r
        case (.blockSetFile(let l), .blockSetFile(let r)): return l == r
        case (.blockSetIcon(let l), .blockSetIcon(let r)): return l == r
        case (.blockSetLink(let l), .blockSetLink(let r)): return l == r
        case (.blockShow(let l), .blockShow(let r)): return l == r
        case (.userBlockJoin(let l), .userBlockJoin(let r)): return l == r
        case (.userBlockLeft(let l), .userBlockLeft(let r)): return l == r
        case (.userBlockSelectRange(let l), .userBlockSelectRange(let r)): return l == r
        case (.userBlockTextRange(let l), .userBlockTextRange(let r)): return l == r
        case (.ping(let l), .ping(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Account {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    ///*
    /// Message, that will be sent to the front on each account found after an AccountRecoverRequest
    struct Show {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Number of an account in an all found accounts list
      var index: Int32 {
        get {return _storage._index}
        set {_uniqueStorage()._index = newValue}
      }

      /// An Account, that has been found for the mnemonic
      var account: Anytype_Model_Account {
        get {return _storage._account ?? Anytype_Model_Account()}
        set {_uniqueStorage()._account = newValue}
      }
      /// Returns true if `account` has been explicitly set.
      var hasAccount: Bool {return _storage._account != nil}
      /// Clears the value of `account`. Subsequent reads from it will return its default value.
      mutating func clearAccount() {_uniqueStorage()._account = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    init() {}
  }

  struct Block {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    ///
    /// Event to show internal blocks on a client.
    /// Example Scenarios
    /// A. Block Creation
    /// 1. Block A have been created on a client C1
    /// 2. Client C2 receives Event.Block.Add(Block A), Event.Block.Update(Page.children)
    /// B. Partial block load
    /// 1. Client C1 opens Page1, that contains, for example, 133 blocks.
    /// 2. M -> F: ShowFullScreen(Root, blocks1-50)
    /// 3. M -> F: Block.Add(blocks51-100)
    /// 3. M -> F: Block.Add(blocks101-133)
    struct Add {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// id -> block
      var blocks: [Anytype_Model_Block] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    ///
    /// Works with a smart blocks: Page, Dashboard
    /// Dashboard opened, click on a page, Rpc.Block.open, Block.ShowFullscreen(PageBlock)
    struct Show {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Root block id
      var rootID: String = String()

      /// dependent blocks (descendants)
      var blocks: [Anytype_Model_Block] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    ///*
    /// Middleware to front end event message, that will be sent on one of this scenarios:
    /// Precondition: user A opened a block
    /// 1. User A drops a set of files/pictures/videos
    /// 2. User A creates a MediaBlock and drops a single media, that corresponds to its type.
    struct FilesUpload {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// if empty => create new blocks
      var blockID: String = String()

      /// filepaths to the files
      var filePath: [String] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Delete {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// TODO: repeated string blockIds?
      var blockID: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct MarksInfo {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var marksInRange: [Anytype_Model_Block.Content.Text.Mark.TypeEnum] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Set {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Fields {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String {
          get {return _storage._id}
          set {_uniqueStorage()._id = newValue}
        }

        var fields: SwiftProtobuf.Google_Protobuf_Struct {
          get {return _storage._fields ?? SwiftProtobuf.Google_Protobuf_Struct()}
          set {_uniqueStorage()._fields = newValue}
        }
        /// Returns true if `fields` has been explicitly set.
        var hasFields: Bool {return _storage._fields != nil}
        /// Clears the value of `fields`. Subsequent reads from it will return its default value.
        mutating func clearFields() {_uniqueStorage()._fields = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      struct ChildrenIds {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var childrenIds: [String] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Restrictions {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String {
          get {return _storage._id}
          set {_uniqueStorage()._id = newValue}
        }

        var restrictions: Anytype_Model_Block.Restrictions {
          get {return _storage._restrictions ?? Anytype_Model_Block.Restrictions()}
          set {_uniqueStorage()._restrictions = newValue}
        }
        /// Returns true if `restrictions` has been explicitly set.
        var hasRestrictions: Bool {return _storage._restrictions != nil}
        /// Clears the value of `restrictions`. Subsequent reads from it will return its default value.
        mutating func clearRestrictions() {_uniqueStorage()._restrictions = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      struct IsArchived {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var isArchived: Bool = false

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Text {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String {
          get {return _storage._id}
          set {_uniqueStorage()._id = newValue}
        }

        var text: Anytype_Event.Block.Set.Text.Text {
          get {return _storage._text ?? Anytype_Event.Block.Set.Text.Text()}
          set {_uniqueStorage()._text = newValue}
        }
        /// Returns true if `text` has been explicitly set.
        var hasText: Bool {return _storage._text != nil}
        /// Clears the value of `text`. Subsequent reads from it will return its default value.
        mutating func clearText() {_uniqueStorage()._text = nil}

        var style: Anytype_Event.Block.Set.Text.Style {
          get {return _storage._style ?? Anytype_Event.Block.Set.Text.Style()}
          set {_uniqueStorage()._style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        var hasStyle: Bool {return _storage._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        mutating func clearStyle() {_uniqueStorage()._style = nil}

        var marks: Anytype_Event.Block.Set.Text.Marks {
          get {return _storage._marks ?? Anytype_Event.Block.Set.Text.Marks()}
          set {_uniqueStorage()._marks = newValue}
        }
        /// Returns true if `marks` has been explicitly set.
        var hasMarks: Bool {return _storage._marks != nil}
        /// Clears the value of `marks`. Subsequent reads from it will return its default value.
        mutating func clearMarks() {_uniqueStorage()._marks = nil}

        var checked: Anytype_Event.Block.Set.Text.Checked {
          get {return _storage._checked ?? Anytype_Event.Block.Set.Text.Checked()}
          set {_uniqueStorage()._checked = newValue}
        }
        /// Returns true if `checked` has been explicitly set.
        var hasChecked: Bool {return _storage._checked != nil}
        /// Clears the value of `checked`. Subsequent reads from it will return its default value.
        mutating func clearChecked() {_uniqueStorage()._checked = nil}

        var color: Anytype_Event.Block.Set.Text.Color {
          get {return _storage._color ?? Anytype_Event.Block.Set.Text.Color()}
          set {_uniqueStorage()._color = newValue}
        }
        /// Returns true if `color` has been explicitly set.
        var hasColor: Bool {return _storage._color != nil}
        /// Clears the value of `color`. Subsequent reads from it will return its default value.
        mutating func clearColor() {_uniqueStorage()._color = nil}

        var backgroundColor: Anytype_Event.Block.Set.Text.BackgroundColor {
          get {return _storage._backgroundColor ?? Anytype_Event.Block.Set.Text.BackgroundColor()}
          set {_uniqueStorage()._backgroundColor = newValue}
        }
        /// Returns true if `backgroundColor` has been explicitly set.
        var hasBackgroundColor: Bool {return _storage._backgroundColor != nil}
        /// Clears the value of `backgroundColor`. Subsequent reads from it will return its default value.
        mutating func clearBackgroundColor() {_uniqueStorage()._backgroundColor = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Text {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.Text.Style = .paragraph

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Marks {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.Text.Marks {
            get {return _storage._value ?? Anytype_Model_Block.Content.Text.Marks()}
            set {_uniqueStorage()._value = newValue}
          }
          /// Returns true if `value` has been explicitly set.
          var hasValue: Bool {return _storage._value != nil}
          /// Clears the value of `value`. Subsequent reads from it will return its default value.
          mutating func clearValue() {_uniqueStorage()._value = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _storage = _StorageClass.defaultInstance
        }

        struct Checked {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Bool = false

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Color {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct BackgroundColor {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      struct File {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String {
          get {return _storage._id}
          set {_uniqueStorage()._id = newValue}
        }

        var type: Anytype_Event.Block.Set.File.TypeMessage {
          get {return _storage._type ?? Anytype_Event.Block.Set.File.TypeMessage()}
          set {_uniqueStorage()._type = newValue}
        }
        /// Returns true if `type` has been explicitly set.
        var hasType: Bool {return _storage._type != nil}
        /// Clears the value of `type`. Subsequent reads from it will return its default value.
        mutating func clearType() {_uniqueStorage()._type = nil}

        var state: Anytype_Event.Block.Set.File.State {
          get {return _storage._state ?? Anytype_Event.Block.Set.File.State()}
          set {_uniqueStorage()._state = newValue}
        }
        /// Returns true if `state` has been explicitly set.
        var hasState: Bool {return _storage._state != nil}
        /// Clears the value of `state`. Subsequent reads from it will return its default value.
        mutating func clearState() {_uniqueStorage()._state = nil}

        var mime: Anytype_Event.Block.Set.File.Mime {
          get {return _storage._mime ?? Anytype_Event.Block.Set.File.Mime()}
          set {_uniqueStorage()._mime = newValue}
        }
        /// Returns true if `mime` has been explicitly set.
        var hasMime: Bool {return _storage._mime != nil}
        /// Clears the value of `mime`. Subsequent reads from it will return its default value.
        mutating func clearMime() {_uniqueStorage()._mime = nil}

        var hash: Anytype_Event.Block.Set.File.Hash {
          get {return _storage._hash ?? Anytype_Event.Block.Set.File.Hash()}
          set {_uniqueStorage()._hash = newValue}
        }
        /// Returns true if `hash` has been explicitly set.
        var hasHash: Bool {return _storage._hash != nil}
        /// Clears the value of `hash`. Subsequent reads from it will return its default value.
        mutating func clearHash() {_uniqueStorage()._hash = nil}

        var name: Anytype_Event.Block.Set.File.Name {
          get {return _storage._name ?? Anytype_Event.Block.Set.File.Name()}
          set {_uniqueStorage()._name = newValue}
        }
        /// Returns true if `name` has been explicitly set.
        var hasName: Bool {return _storage._name != nil}
        /// Clears the value of `name`. Subsequent reads from it will return its default value.
        mutating func clearName() {_uniqueStorage()._name = nil}

        var size: Anytype_Event.Block.Set.File.Size {
          get {return _storage._size ?? Anytype_Event.Block.Set.File.Size()}
          set {_uniqueStorage()._size = newValue}
        }
        /// Returns true if `size` has been explicitly set.
        var hasSize: Bool {return _storage._size != nil}
        /// Clears the value of `size`. Subsequent reads from it will return its default value.
        mutating func clearSize() {_uniqueStorage()._size = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Name {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Width {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Int32 = 0

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct State {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.File.State = .empty

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct TypeMessage {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.File.TypeEnum = .none

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Hash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Mime {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Size {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Int64 = 0

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      struct Icon {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String {
          get {return _storage._id}
          set {_uniqueStorage()._id = newValue}
        }

        var name: Anytype_Event.Block.Set.Icon.Name {
          get {return _storage._name ?? Anytype_Event.Block.Set.Icon.Name()}
          set {_uniqueStorage()._name = newValue}
        }
        /// Returns true if `name` has been explicitly set.
        var hasName: Bool {return _storage._name != nil}
        /// Clears the value of `name`. Subsequent reads from it will return its default value.
        mutating func clearName() {_uniqueStorage()._name = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Name {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      struct Link {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String {
          get {return _storage._id}
          set {_uniqueStorage()._id = newValue}
        }

        var targetBlockID: Anytype_Event.Block.Set.Link.TargetBlockId {
          get {return _storage._targetBlockID ?? Anytype_Event.Block.Set.Link.TargetBlockId()}
          set {_uniqueStorage()._targetBlockID = newValue}
        }
        /// Returns true if `targetBlockID` has been explicitly set.
        var hasTargetBlockID: Bool {return _storage._targetBlockID != nil}
        /// Clears the value of `targetBlockID`. Subsequent reads from it will return its default value.
        mutating func clearTargetBlockID() {_uniqueStorage()._targetBlockID = nil}

        var style: Anytype_Event.Block.Set.Link.Style {
          get {return _storage._style ?? Anytype_Event.Block.Set.Link.Style()}
          set {_uniqueStorage()._style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        var hasStyle: Bool {return _storage._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        mutating func clearStyle() {_uniqueStorage()._style = nil}

        var fields: Anytype_Event.Block.Set.Link.Fields {
          get {return _storage._fields ?? Anytype_Event.Block.Set.Link.Fields()}
          set {_uniqueStorage()._fields = newValue}
        }
        /// Returns true if `fields` has been explicitly set.
        var hasFields: Bool {return _storage._fields != nil}
        /// Clears the value of `fields`. Subsequent reads from it will return its default value.
        mutating func clearFields() {_uniqueStorage()._fields = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct TargetBlockId {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: Anytype_Model_Block.Content.Link.Style = .page

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Fields {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var value: SwiftProtobuf.Google_Protobuf_Struct {
            get {return _storage._value ?? SwiftProtobuf.Google_Protobuf_Struct()}
            set {_uniqueStorage()._value = newValue}
          }
          /// Returns true if `value` has been explicitly set.
          var hasValue: Bool {return _storage._value != nil}
          /// Clears the value of `value`. Subsequent reads from it will return its default value.
          mutating func clearValue() {_uniqueStorage()._value = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _storage = _StorageClass.defaultInstance
        }

        init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      init() {}
    }

    init() {}
  }

  struct User {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Block {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      ///*
      ///  Middleware to front end event message, that will be sent in this scenario:
      /// Precondition: user A opened a block
      /// 1. User B opens the same block
      /// 2. User A receives a message about p.1
      struct Join {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account of the user, that opened a block
        var account: Anytype_Event.Account {
          get {return _storage._account ?? Anytype_Event.Account()}
          set {_uniqueStorage()._account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        var hasAccount: Bool {return _storage._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        mutating func clearAccount() {_uniqueStorage()._account = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      ///*
      ///  Middleware to front end event message, that will be sent in this scenario:
      /// Precondition: user A and user B opened the same block
      /// 1. User B closes the block
      /// 2. User A receives a message about p.1
      struct Left {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account of the user, that left the block
        var account: Anytype_Event.Account {
          get {return _storage._account ?? Anytype_Event.Account()}
          set {_uniqueStorage()._account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        var hasAccount: Bool {return _storage._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        mutating func clearAccount() {_uniqueStorage()._account = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      ///*
      /// Middleware to front end event message, that will be sent in this scenario:
      /// Precondition: user A and user B opened the same block
      /// 1. User B sets cursor or selects a text region into a text block
      /// 2. User A receives a message about p.1
      struct TextRange {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account of the user, that selected a text
        var account: Anytype_Event.Account {
          get {return _storage._account ?? Anytype_Event.Account()}
          set {_uniqueStorage()._account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        var hasAccount: Bool {return _storage._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        mutating func clearAccount() {_uniqueStorage()._account = nil}

        /// Id of the text block, that have a selection
        var blockID: String {
          get {return _storage._blockID}
          set {_uniqueStorage()._blockID = newValue}
        }

        /// Range of the selection
        var range: Anytype_Model_Range {
          get {return _storage._range ?? Anytype_Model_Range()}
          set {_uniqueStorage()._range = newValue}
        }
        /// Returns true if `range` has been explicitly set.
        var hasRange: Bool {return _storage._range != nil}
        /// Clears the value of `range`. Subsequent reads from it will return its default value.
        mutating func clearRange() {_uniqueStorage()._range = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      ///*
      /// Middleware to front end event message, that will be sent in this scenario:
      /// Precondition: user A and user B opened the same block
      /// 1. User B selects some inner blocks
      /// 2. User A receives a message about p.1
      struct SelectRange {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account of the user, that selected blocks
        var account: Anytype_Event.Account {
          get {return _storage._account ?? Anytype_Event.Account()}
          set {_uniqueStorage()._account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        var hasAccount: Bool {return _storage._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        mutating func clearAccount() {_uniqueStorage()._account = nil}

        /// Ids of selected blocks.
        var blockIdsArray: [String] {
          get {return _storage._blockIdsArray}
          set {_uniqueStorage()._blockIdsArray = newValue}
        }

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      init() {}
    }

    init() {}
  }

  struct Ping {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var index: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"

extension Anytype_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
    2: .same(proto: "contextId"),
    3: .same(proto: "initiator"),
  ]

  fileprivate class _StorageClass {
    var _messages: [Anytype_Event.Message] = []
    var _contextID: String = String()
    var _initiator: Anytype_Model_Account? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _messages = source._messages
      _contextID = source._contextID
      _initiator = source._initiator
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._messages)
        case 2: try decoder.decodeSingularStringField(value: &_storage._contextID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._initiator)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._messages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._messages, fieldNumber: 1)
      }
      if !_storage._contextID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._contextID, fieldNumber: 2)
      }
      if let v = _storage._initiator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event, rhs: Anytype_Event) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._messages != rhs_storage._messages {return false}
        if _storage._contextID != rhs_storage._contextID {return false}
        if _storage._initiator != rhs_storage._initiator {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.protoMessageName + ".Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accountShow"),
    2: .same(proto: "blockAdd"),
    3: .same(proto: "blockDelete"),
    4: .same(proto: "filesUpload"),
    5: .same(proto: "marksInfo"),
    6: .same(proto: "blockSetFields"),
    7: .same(proto: "blockSetChildrenIds"),
    8: .same(proto: "blockSetRestrictions"),
    9: .same(proto: "blockSetIsArchived"),
    10: .same(proto: "blockSetText"),
    11: .same(proto: "blockSetFile"),
    12: .same(proto: "blockSetIcon"),
    13: .same(proto: "blockSetLink"),
    20: .same(proto: "blockShow"),
    21: .same(proto: "userBlockJoin"),
    22: .same(proto: "userBlockLeft"),
    23: .same(proto: "userBlockSelectRange"),
    24: .same(proto: "userBlockTextRange"),
    100: .same(proto: "ping"),
  ]

  fileprivate class _StorageClass {
    var _value: Anytype_Event.Message.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Anytype_Event.Account.Show?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .accountShow(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .accountShow(v)}
        case 2:
          var v: Anytype_Event.Block.Add?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockAdd(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockAdd(v)}
        case 3:
          var v: Anytype_Event.Block.Delete?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockDelete(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockDelete(v)}
        case 4:
          var v: Anytype_Event.Block.FilesUpload?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .filesUpload(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .filesUpload(v)}
        case 5:
          var v: Anytype_Event.Block.MarksInfo?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .marksInfo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .marksInfo(v)}
        case 6:
          var v: Anytype_Event.Block.Set.Fields?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetFields(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetFields(v)}
        case 7:
          var v: Anytype_Event.Block.Set.ChildrenIds?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetChildrenIds(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetChildrenIds(v)}
        case 8:
          var v: Anytype_Event.Block.Set.Restrictions?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetRestrictions(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetRestrictions(v)}
        case 9:
          var v: Anytype_Event.Block.Set.IsArchived?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetIsArchived(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetIsArchived(v)}
        case 10:
          var v: Anytype_Event.Block.Set.Text?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetText(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetText(v)}
        case 11:
          var v: Anytype_Event.Block.Set.File?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetFile(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetFile(v)}
        case 12:
          var v: Anytype_Event.Block.Set.Icon?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetIcon(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetIcon(v)}
        case 13:
          var v: Anytype_Event.Block.Set.Link?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockSetLink(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockSetLink(v)}
        case 20:
          var v: Anytype_Event.Block.Show?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .blockShow(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .blockShow(v)}
        case 21:
          var v: Anytype_Event.User.Block.Join?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .userBlockJoin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .userBlockJoin(v)}
        case 22:
          var v: Anytype_Event.User.Block.Left?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .userBlockLeft(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .userBlockLeft(v)}
        case 23:
          var v: Anytype_Event.User.Block.SelectRange?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .userBlockSelectRange(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .userBlockSelectRange(v)}
        case 24:
          var v: Anytype_Event.User.Block.TextRange?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .userBlockTextRange(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .userBlockTextRange(v)}
        case 100:
          var v: Anytype_Event.Ping?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .ping(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .ping(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .accountShow(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .blockAdd(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .blockDelete(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .filesUpload(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .marksInfo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .blockSetFields(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .blockSetChildrenIds(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .blockSetRestrictions(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .blockSetIsArchived(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .blockSetText(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .blockSetFile(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .blockSetIcon(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .blockSetLink(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .blockShow(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      case .userBlockJoin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      case .userBlockLeft(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      case .userBlockSelectRange(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      case .userBlockTextRange(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      case .ping(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Message, rhs: Anytype_Event.Message) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.protoMessageName + ".Account"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Account, rhs: Anytype_Event.Account) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account.Show: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Account.protoMessageName + ".Show"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "account"),
  ]

  fileprivate class _StorageClass {
    var _index: Int32 = 0
    var _account: Anytype_Model_Account? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _index = source._index
      _account = source._account
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._index)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._account)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._index != 0 {
        try visitor.visitSingularInt32Field(value: _storage._index, fieldNumber: 1)
      }
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Account.Show, rhs: Anytype_Event.Account.Show) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._index != rhs_storage._index {return false}
        if _storage._account != rhs_storage._account {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.protoMessageName + ".Block"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block, rhs: Anytype_Event.Block) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Add: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Add"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blocks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.blocks)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Add, rhs: Anytype_Event.Block.Add) -> Bool {
    if lhs.blocks != rhs.blocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Show: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Show"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rootId"),
    2: .same(proto: "blocks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.rootID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.blocks)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rootID.isEmpty {
      try visitor.visitSingularStringField(value: self.rootID, fieldNumber: 1)
    }
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Show, rhs: Anytype_Event.Block.Show) -> Bool {
    if lhs.rootID != rhs.rootID {return false}
    if lhs.blocks != rhs.blocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.FilesUpload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".FilesUpload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blockId"),
    2: .same(proto: "filePath"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.blockID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.filePath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 1)
    }
    if !self.filePath.isEmpty {
      try visitor.visitRepeatedStringField(value: self.filePath, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.FilesUpload, rhs: Anytype_Event.Block.FilesUpload) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.filePath != rhs.filePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Delete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Delete"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blockId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.blockID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Delete, rhs: Anytype_Event.Block.Delete) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.MarksInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".MarksInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "marksInRange"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.marksInRange)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.marksInRange.isEmpty {
      try visitor.visitPackedEnumField(value: self.marksInRange, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.MarksInfo, rhs: Anytype_Event.Block.MarksInfo) -> Bool {
    if lhs.marksInRange != rhs.marksInRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Set"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set, rhs: Anytype_Event.Block.Set) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Fields"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "fields"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _fields: SwiftProtobuf.Google_Protobuf_Struct? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _fields = source._fields
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._fields)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._fields {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Fields, rhs: Anytype_Event.Block.Set.Fields) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._fields != rhs_storage._fields {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.ChildrenIds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".ChildrenIds"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "childrenIds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeRepeatedStringField(value: &self.childrenIds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.childrenIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.childrenIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.ChildrenIds, rhs: Anytype_Event.Block.Set.ChildrenIds) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.childrenIds != rhs.childrenIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Restrictions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Restrictions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "restrictions"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _restrictions: Anytype_Model_Block.Restrictions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _restrictions = source._restrictions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._restrictions)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._restrictions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Restrictions, rhs: Anytype_Event.Block.Set.Restrictions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._restrictions != rhs_storage._restrictions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.IsArchived: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".IsArchived"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "IsArchived"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.isArchived)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.isArchived != false {
      try visitor.visitSingularBoolField(value: self.isArchived, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.IsArchived, rhs: Anytype_Event.Block.Set.IsArchived) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.isArchived != rhs.isArchived {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Text"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "text"),
    3: .same(proto: "style"),
    4: .same(proto: "marks"),
    5: .same(proto: "checked"),
    6: .same(proto: "color"),
    7: .same(proto: "backgroundColor"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _text: Anytype_Event.Block.Set.Text.Text? = nil
    var _style: Anytype_Event.Block.Set.Text.Style? = nil
    var _marks: Anytype_Event.Block.Set.Text.Marks? = nil
    var _checked: Anytype_Event.Block.Set.Text.Checked? = nil
    var _color: Anytype_Event.Block.Set.Text.Color? = nil
    var _backgroundColor: Anytype_Event.Block.Set.Text.BackgroundColor? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _text = source._text
      _style = source._style
      _marks = source._marks
      _checked = source._checked
      _color = source._color
      _backgroundColor = source._backgroundColor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._text)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._style)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._marks)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._checked)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._backgroundColor)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._text {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._style {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._marks {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._checked {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._backgroundColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text, rhs: Anytype_Event.Block.Set.Text) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._text != rhs_storage._text {return false}
        if _storage._style != rhs_storage._style {return false}
        if _storage._marks != rhs_storage._marks {return false}
        if _storage._checked != rhs_storage._checked {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._backgroundColor != rhs_storage._backgroundColor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Text"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text.Text, rhs: Anytype_Event.Block.Set.Text.Text) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Style"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .paragraph {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text.Style, rhs: Anytype_Event.Block.Set.Text.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Marks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Marks"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _value: Anytype_Model_Block.Content.Text.Marks? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text.Marks, rhs: Anytype_Event.Block.Set.Text.Marks) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Checked: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Checked"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text.Checked, rhs: Anytype_Event.Block.Set.Text.Checked) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Color"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text.Color, rhs: Anytype_Event.Block.Set.Text.Color) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.BackgroundColor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".BackgroundColor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Text.BackgroundColor, rhs: Anytype_Event.Block.Set.Text.BackgroundColor) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".File"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "state"),
    4: .same(proto: "mime"),
    5: .same(proto: "hash"),
    6: .same(proto: "name"),
    7: .same(proto: "size"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _type: Anytype_Event.Block.Set.File.TypeMessage? = nil
    var _state: Anytype_Event.Block.Set.File.State? = nil
    var _mime: Anytype_Event.Block.Set.File.Mime? = nil
    var _hash: Anytype_Event.Block.Set.File.Hash? = nil
    var _name: Anytype_Event.Block.Set.File.Name? = nil
    var _size: Anytype_Event.Block.Set.File.Size? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _type = source._type
      _state = source._state
      _mime = source._mime
      _hash = source._hash
      _name = source._name
      _size = source._size
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._state)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._mime)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._hash)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._name)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._size)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._state {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._mime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._hash {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._name {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._size {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File, rhs: Anytype_Event.Block.Set.File) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._mime != rhs_storage._mime {return false}
        if _storage._hash != rhs_storage._hash {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._size != rhs_storage._size {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Name: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Name"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.Name, rhs: Anytype_Event.Block.Set.File.Name) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Width: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Width"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.Width, rhs: Anytype_Event.Block.Set.File.Width) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".State"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .empty {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.State, rhs: Anytype_Event.Block.Set.File.State) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.TypeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Type"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .none {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.TypeMessage, rhs: Anytype_Event.Block.Set.File.TypeMessage) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Hash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Hash"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.Hash, rhs: Anytype_Event.Block.Set.File.Hash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Mime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Mime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.Mime, rhs: Anytype_Event.Block.Set.File.Mime) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Size: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Size"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.File.Size, rhs: Anytype_Event.Block.Set.File.Size) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Icon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Icon"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _name: Anytype_Event.Block.Set.Icon.Name? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._name)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._name {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Icon, rhs: Anytype_Event.Block.Set.Icon) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Icon.Name: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Icon.protoMessageName + ".Name"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Icon.Name, rhs: Anytype_Event.Block.Set.Icon.Name) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Link"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "targetBlockId"),
    3: .same(proto: "style"),
    4: .same(proto: "fields"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _targetBlockID: Anytype_Event.Block.Set.Link.TargetBlockId? = nil
    var _style: Anytype_Event.Block.Set.Link.Style? = nil
    var _fields: Anytype_Event.Block.Set.Link.Fields? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _targetBlockID = source._targetBlockID
      _style = source._style
      _fields = source._fields
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._targetBlockID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._style)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._fields)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._targetBlockID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._style {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._fields {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Link, rhs: Anytype_Event.Block.Set.Link) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._targetBlockID != rhs_storage._targetBlockID {return false}
        if _storage._style != rhs_storage._style {return false}
        if _storage._fields != rhs_storage._fields {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.TargetBlockId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".TargetBlockId"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Link.TargetBlockId, rhs: Anytype_Event.Block.Set.Link.TargetBlockId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".Style"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .page {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Link.Style, rhs: Anytype_Event.Block.Set.Link.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".Fields"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _value: SwiftProtobuf.Google_Protobuf_Struct? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Block.Set.Link.Fields, rhs: Anytype_Event.Block.Set.Link.Fields) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.protoMessageName + ".User"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.User, rhs: Anytype_Event.User) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.User.protoMessageName + ".Block"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.User.Block, rhs: Anytype_Event.User.Block) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block.Join: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.User.Block.protoMessageName + ".Join"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  fileprivate class _StorageClass {
    var _account: Anytype_Event.Account? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.User.Block.Join, rhs: Anytype_Event.User.Block.Join) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block.Left: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.User.Block.protoMessageName + ".Left"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  fileprivate class _StorageClass {
    var _account: Anytype_Event.Account? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.User.Block.Left, rhs: Anytype_Event.User.Block.Left) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block.TextRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.User.Block.protoMessageName + ".TextRange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "blockId"),
    3: .same(proto: "range"),
  ]

  fileprivate class _StorageClass {
    var _account: Anytype_Event.Account? = nil
    var _blockID: String = String()
    var _range: Anytype_Model_Range? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
      _blockID = source._blockID
      _range = source._range
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
        case 2: try decoder.decodeSingularStringField(value: &_storage._blockID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._range)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._blockID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._blockID, fieldNumber: 2)
      }
      if let v = _storage._range {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.User.Block.TextRange, rhs: Anytype_Event.User.Block.TextRange) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        if _storage._blockID != rhs_storage._blockID {return false}
        if _storage._range != rhs_storage._range {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block.SelectRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.User.Block.protoMessageName + ".SelectRange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "blockIdsArray"),
  ]

  fileprivate class _StorageClass {
    var _account: Anytype_Event.Account? = nil
    var _blockIdsArray: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
      _blockIdsArray = source._blockIdsArray
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._blockIdsArray)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._blockIdsArray.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._blockIdsArray, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.User.Block.SelectRange, rhs: Anytype_Event.User.Block.SelectRange) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        if _storage._blockIdsArray != rhs_storage._blockIdsArray {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Ping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Event.protoMessageName + ".Ping"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.index)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Event.Ping, rhs: Anytype_Event.Ping) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
