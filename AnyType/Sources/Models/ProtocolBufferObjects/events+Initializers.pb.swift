// DO NOT EDIT.
//
// Generated by the AnytypeSwiftCodegen.
//
// For information on using the generated types, please see the documentation:
//   https://github.com/anytypeio/anytype-swift-codegen

import Foundation
import SwiftProtobuf

extension Anytype_Event {
  init(messages: [Anytype_Event.Message], contextID: String, initiator: Anytype_Model_Account) {
    self.messages = messages
    self.contextID = contextID
    self.initiator = initiator
  }
}

extension Anytype_Event.Account.Show {
  init(index: Int64, account: Anytype_Model_Account) {
    self.index = index
    self.account = account
  }
}

extension Anytype_Event.Block.Add {
  init(blocks: [Anytype_Model_Block]) {
    self.blocks = blocks
  }
}

extension Anytype_Event.Block.Delete {
  init(blockID: String) {
    self.blockID = blockID
  }
}

extension Anytype_Event.Block.FilesUpload {
  init(blockID: String, filePath: [String]) {
    self.blockID = blockID
    self.filePath = filePath
  }
}

extension Anytype_Event.Block.MarksInfo {
  init(marksInRange: [Anytype_Model_Block.Content.Text.Mark.TypeEnum]) {
    self.marksInRange = marksInRange
  }
}

extension Anytype_Event.Block.Set.ChildrenIds {
  init(id: String, childrenIds: [String]) {
    self.id = id
    self.childrenIds = childrenIds
  }
}

extension Anytype_Event.Block.Set.Fields {
  init(id: String, fields: SwiftProtobuf.Google_Protobuf_Struct) {
    self.id = id
    self.fields = fields
  }
}

extension Anytype_Event.Block.Set.File {
  init(
    id: String,
    name: Anytype_Event.Block.Set.File.Name,
    state: Anytype_Event.Block.Set.File.State,
    localFilePath: Anytype_Event.Block.Set.File.LocalFilePath,
    icon: Anytype_Event.Block.Set.File.Icon
  ) {
    self.id = id
    self.name = name
    self.state = state
    self.localFilePath = localFilePath
    self.icon = icon
  }
}

extension Anytype_Event.Block.Set.File.Icon {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.File.LocalFilePath {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.File.Name {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.File.State {
  init(value: Anytype_Model_Block.Content.File.State) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Icon {
  init(id: String, name: Anytype_Event.Block.Set.Icon.Name) {
    self.id = id
    self.name = name
  }
}

extension Anytype_Event.Block.Set.Icon.Name {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Image {
  init(
    id: String,
    name: Anytype_Event.Block.Set.Image.Name,
    width: Anytype_Event.Block.Set.Image.Width,
    state: Anytype_Event.Block.Set.Image.State,
    localFilePath: Anytype_Event.Block.Set.Image.LocalFilePath,
    previewLocalFilePath: Anytype_Event.Block.Set.Image.PreviewLocalFilePath
  ) {
    self.id = id
    self.name = name
    self.width = width
    self.state = state
    self.localFilePath = localFilePath
    self.previewLocalFilePath = previewLocalFilePath
  }
}

extension Anytype_Event.Block.Set.Image.LocalFilePath {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Image.Name {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Image.PreviewLocalFilePath {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Image.State {
  init(value: Anytype_Model_Block.Content.Image.State) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Image.Width {
  init(value: Int32) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.IsArchived {
  init(id: String, isArchived: Bool) {
    self.id = id
    self.isArchived = isArchived
  }
}

extension Anytype_Event.Block.Set.Restrictions {
  init(id: String, restrictions: Anytype_Model_Block.Restrictions) {
    self.id = id
    self.restrictions = restrictions
  }
}

extension Anytype_Event.Block.Set.Text {
  init(id: String, text: Anytype_Event.Block.Set.Text.Text, style: Anytype_Event.Block.Set.Text.Style, marks: Anytype_Event.Block.Set.Text.Marks, checked: Anytype_Event.Block.Set.Text.Checked) {
    self.id = id
    self.text = text
    self.style = style
    self.marks = marks
    self.checked = checked
  }
}

extension Anytype_Event.Block.Set.Text.Checked {
  init(value: Bool) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Text.Marks {
  init(value: Anytype_Model_Block.Content.Text.Marks) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Text.Style {
  init(value: Anytype_Model_Block.Content.Text.Style) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Text.Text {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Video {
  init(
    id: String,
    name: Anytype_Event.Block.Set.Video.Name,
    width: Anytype_Event.Block.Set.Video.Width,
    state: Anytype_Event.Block.Set.Video.State,
    localFilePath: Anytype_Event.Block.Set.Video.LocalFilePath,
    previewLocalFilePath: Anytype_Event.Block.Set.Video.PreviewLocalFilePath
  ) {
    self.id = id
    self.name = name
    self.width = width
    self.state = state
    self.localFilePath = localFilePath
    self.previewLocalFilePath = previewLocalFilePath
  }
}

extension Anytype_Event.Block.Set.Video.LocalFilePath {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Video.Name {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Video.PreviewLocalFilePath {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Video.State {
  init(value: Anytype_Model_Block.Content.Video.State) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Video.Width {
  init(value: Int32) {
    self.value = value
  }
}

extension Anytype_Event.Block.Show {
  init(rootID: String, blocks: [Anytype_Model_Block]) {
    self.rootID = rootID
    self.blocks = blocks
  }
}

extension Anytype_Event.Message {
  init(value: OneOf_Value?) {
    self.value = value
  }
}

extension Anytype_Event.Ping {
  init(index: Int32) {
    self.index = index
  }
}

extension Anytype_Event.User.Block.Join {
  init(account: Anytype_Event.Account) {
    self.account = account
  }
}

extension Anytype_Event.User.Block.Left {
  init(account: Anytype_Event.Account) {
    self.account = account
  }
}

extension Anytype_Event.User.Block.SelectRange {
  init(account: Anytype_Event.Account, blockIdsArray: [String]) {
    self.account = account
    self.blockIdsArray = blockIdsArray
  }
}

extension Anytype_Event.User.Block.TextRange {
  init(account: Anytype_Event.Account, blockID: String, range: Anytype_Model_Range) {
    self.account = account
    self.blockID = blockID
    self.range = range
  }
}
