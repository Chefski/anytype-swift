// DO NOT EDIT.
//
// Generated by the AnytypeSwiftCodegen.
//
// For information on using the generated types, please see the documentation:
//   https://github.com/anytypeio/anytype-swift-codegen

import Foundation
import SwiftProtobuf

extension Anytype_Event {
  init(messages: [Anytype_Event.Message], contextID: String, initiator: Anytype_Model_Account) {
    self.messages = messages
    self.contextID = contextID
    self.initiator = initiator
  }
}

extension Anytype_Event.Account.Show {
  init(index: Int32, account: Anytype_Model_Account) {
    self.index = index
    self.account = account
  }
}

extension Anytype_Event.Block.Add {
  init(blocks: [Anytype_Model_Block]) {
    self.blocks = blocks
  }
}

extension Anytype_Event.Block.Delete {
  init(blockIds: [String]) {
    self.blockIds = blockIds
  }
}

extension Anytype_Event.Block.FilesUpload {
  init(blockID: String, filePath: [String]) {
    self.blockID = blockID
    self.filePath = filePath
  }
}

extension Anytype_Event.Block.MarksInfo {
  init(marksInRange: [Anytype_Model_Block.Content.Text.Mark.TypeEnum]) {
    self.marksInRange = marksInRange
  }
}

extension Anytype_Event.Block.Set.Align {
  init(id: String, align: Anytype_Model_Block.Align) {
    self.id = id
    self.align = align
  }
}

extension Anytype_Event.Block.Set.BackgroundColor {
  init(id: String, backgroundColor: String) {
    self.id = id
    self.backgroundColor = backgroundColor
  }
}

extension Anytype_Event.Block.Set.Bookmark {
  init(
    id: String, url: Anytype_Event.Block.Set.Bookmark.Url, title: Anytype_Event.Block.Set.Bookmark.Title, description_p: Anytype_Event.Block.Set.Bookmark.Description,
    imageHash: Anytype_Event.Block.Set.Bookmark.ImageHash, faviconHash: Anytype_Event.Block.Set.Bookmark.FaviconHash, type: Anytype_Event.Block.Set.Bookmark.TypeMessage
  ) {
    self.id = id
    self.url = url
    self.title = title
    self.description_p = description_p
    self.imageHash = imageHash
    self.faviconHash = faviconHash
    self.type = type
  }
}

extension Anytype_Event.Block.Set.Bookmark.Description {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Bookmark.FaviconHash {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Bookmark.ImageHash {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Bookmark.Title {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Bookmark.TypeMessage {
  init(value: Anytype_Model_LinkPreview.TypeEnum) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Bookmark.Url {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.ChildrenIds {
  init(id: String, childrenIds: [String]) {
    self.id = id
    self.childrenIds = childrenIds
  }
}

extension Anytype_Event.Block.Set.Details {
  init(id: String, details: SwiftProtobuf.Google_Protobuf_Struct) {
    self.id = id
    self.details = details
  }
}

extension Anytype_Event.Block.Set.Fields {
  init(id: String, fields: SwiftProtobuf.Google_Protobuf_Struct) {
    self.id = id
    self.fields = fields
  }
}

extension Anytype_Event.Block.Set.File {
  init(
    id: String, type: Anytype_Event.Block.Set.File.TypeMessage, state: Anytype_Event.Block.Set.File.State, mime: Anytype_Event.Block.Set.File.Mime, hash: Anytype_Event.Block.Set.File.Hash,
    name: Anytype_Event.Block.Set.File.Name, size: Anytype_Event.Block.Set.File.Size
  ) {
    self.id = id
    self.type = type
    self.state = state
    self.mime = mime
    self.hash = hash
    self.name = name
    self.size = size
  }
}

extension Anytype_Event.Block.Set.File.Hash {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.File.Mime {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.File.Name {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.File.Size {
  init(value: Int64) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.File.State {
  init(value: Anytype_Model_Block.Content.File.State) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.File.TypeMessage {
  init(value: Anytype_Model_Block.Content.File.TypeEnum) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.File.Width {
  init(value: Int32) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Link {
  init(id: String, targetBlockID: Anytype_Event.Block.Set.Link.TargetBlockId, style: Anytype_Event.Block.Set.Link.Style, fields: Anytype_Event.Block.Set.Link.Fields) {
    self.id = id
    self.targetBlockID = targetBlockID
    self.style = style
    self.fields = fields
  }
}

extension Anytype_Event.Block.Set.Link.Fields {
  init(value: SwiftProtobuf.Google_Protobuf_Struct) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Link.Style {
  init(value: Anytype_Model_Block.Content.Link.Style) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Link.TargetBlockId {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Restrictions {
  init(id: String, restrictions: Anytype_Model_Block.Restrictions) {
    self.id = id
    self.restrictions = restrictions
  }
}

extension Anytype_Event.Block.Set.Text {
  init(
    id: String, text: Anytype_Event.Block.Set.Text.Text, style: Anytype_Event.Block.Set.Text.Style, marks: Anytype_Event.Block.Set.Text.Marks, checked: Anytype_Event.Block.Set.Text.Checked,
    color: Anytype_Event.Block.Set.Text.Color
  ) {
    self.id = id
    self.text = text
    self.style = style
    self.marks = marks
    self.checked = checked
    self.color = color
  }
}

extension Anytype_Event.Block.Set.Text.Checked {
  init(value: Bool) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Text.Color {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Text.Marks {
  init(value: Anytype_Model_Block.Content.Text.Marks) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Text.Style {
  init(value: Anytype_Model_Block.Content.Text.Style) {
    self.value = value
  }
}

extension Anytype_Event.Block.Set.Text.Text {
  init(value: String) {
    self.value = value
  }
}

extension Anytype_Event.Block.Show {
  init(rootID: String, blocks: [Anytype_Model_Block], details: [Anytype_Event.Block.Set.Details]) {
    self.rootID = rootID
    self.blocks = blocks
    self.details = details
  }
}

extension Anytype_Event.Message {
  init(value: OneOf_Value?) {
    self.value = value
  }
}

extension Anytype_Event.Ping {
  init(index: Int32) {
    self.index = index
  }
}

extension Anytype_Event.Process.Done {
  init(process: Anytype_Model.Process) {
    self.process = process
  }
}

extension Anytype_Event.Process.New {
  init(process: Anytype_Model.Process) {
    self.process = process
  }
}

extension Anytype_Event.Process.Update {
  init(process: Anytype_Model.Process) {
    self.process = process
  }
}

extension Anytype_Event.User.Block.Join {
  init(account: Anytype_Event.Account) {
    self.account = account
  }
}

extension Anytype_Event.User.Block.Left {
  init(account: Anytype_Event.Account) {
    self.account = account
  }
}

extension Anytype_Event.User.Block.SelectRange {
  init(account: Anytype_Event.Account, blockIdsArray: [String]) {
    self.account = account
    self.blockIdsArray = blockIdsArray
  }
}

extension Anytype_Event.User.Block.TextRange {
  init(account: Anytype_Event.Account, blockID: String, range: Anytype_Model_Range) {
    self.account = account
    self.blockID = blockID
    self.range = range
  }
}

extension Anytype_Model.Process {
  init(id: String, type: Anytype_Model.Process.TypeEnum, state: Anytype_Model.Process.State, progress: Anytype_Model.Process.Progress) {
    self.id = id
    self.type = type
    self.state = state
    self.progress = progress
  }
}

extension Anytype_Model.Process.Progress {
  init(total: Int64, done: Int64) {
    self.total = total
    self.done = done
  }
}
