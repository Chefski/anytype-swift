// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vendor/github.com/anytypeio/go-anytype-library/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Anytype_Model_SmartBlockSnapshotBase {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blocks: [Anytype_Model_Block] = []

  var details: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _details ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_details = newValue}
  }
  /// Returns true if `details` has been explicitly set.
  var hasDetails: Bool {return self._details != nil}
  /// Clears the value of `details`. Subsequent reads from it will return its default value.
  mutating func clearDetails() {self._details = nil}

  var fileKeys: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _fileKeys ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_fileKeys = newValue}
  }
  /// Returns true if `fileKeys` has been explicitly set.
  var hasFileKeys: Bool {return self._fileKeys != nil}
  /// Clears the value of `fileKeys`. Subsequent reads from it will return its default value.
  mutating func clearFileKeys() {self._fileKeys = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _details: SwiftProtobuf.Google_Protobuf_Struct? = nil
  fileprivate var _fileKeys: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

struct Anytype_Model_Block {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var fields: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _fields ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_fields = newValue}
  }
  /// Returns true if `fields` has been explicitly set.
  var hasFields: Bool {return self._fields != nil}
  /// Clears the value of `fields`. Subsequent reads from it will return its default value.
  mutating func clearFields() {self._fields = nil}

  var restrictions: Anytype_Model_Block.Restrictions {
    get {return _restrictions ?? Anytype_Model_Block.Restrictions()}
    set {_restrictions = newValue}
  }
  /// Returns true if `restrictions` has been explicitly set.
  var hasRestrictions: Bool {return self._restrictions != nil}
  /// Clears the value of `restrictions`. Subsequent reads from it will return its default value.
  mutating func clearRestrictions() {self._restrictions = nil}

  var childrenIds: [String] = []

  var backgroundColor: String = String()

  var align: Anytype_Model_Block.Align = .left

  var content: Anytype_Model_Block.OneOf_Content? = nil

  var smartblock: Anytype_Model_Block.Content.Smartblock {
    get {
      if case .smartblock(let v)? = content {return v}
      return Anytype_Model_Block.Content.Smartblock()
    }
    set {content = .smartblock(newValue)}
  }

  var text: Anytype_Model_Block.Content.Text {
    get {
      if case .text(let v)? = content {return v}
      return Anytype_Model_Block.Content.Text()
    }
    set {content = .text(newValue)}
  }

  var file: Anytype_Model_Block.Content.File {
    get {
      if case .file(let v)? = content {return v}
      return Anytype_Model_Block.Content.File()
    }
    set {content = .file(newValue)}
  }

  var layout: Anytype_Model_Block.Content.Layout {
    get {
      if case .layout(let v)? = content {return v}
      return Anytype_Model_Block.Content.Layout()
    }
    set {content = .layout(newValue)}
  }

  var div: Anytype_Model_Block.Content.Div {
    get {
      if case .div(let v)? = content {return v}
      return Anytype_Model_Block.Content.Div()
    }
    set {content = .div(newValue)}
  }

  var bookmark: Anytype_Model_Block.Content.Bookmark {
    get {
      if case .bookmark(let v)? = content {return v}
      return Anytype_Model_Block.Content.Bookmark()
    }
    set {content = .bookmark(newValue)}
  }

  var icon: Anytype_Model_Block.Content.Icon {
    get {
      if case .icon(let v)? = content {return v}
      return Anytype_Model_Block.Content.Icon()
    }
    set {content = .icon(newValue)}
  }

  var link: Anytype_Model_Block.Content.Link {
    get {
      if case .link(let v)? = content {return v}
      return Anytype_Model_Block.Content.Link()
    }
    set {content = .link(newValue)}
  }

  var dataview: Anytype_Model_Block.Content.Dataview {
    get {
      if case .dataview(let v)? = content {return v}
      return Anytype_Model_Block.Content.Dataview()
    }
    set {content = .dataview(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Content: Equatable {
    case smartblock(Anytype_Model_Block.Content.Smartblock)
    case text(Anytype_Model_Block.Content.Text)
    case file(Anytype_Model_Block.Content.File)
    case layout(Anytype_Model_Block.Content.Layout)
    case div(Anytype_Model_Block.Content.Div)
    case bookmark(Anytype_Model_Block.Content.Bookmark)
    case icon(Anytype_Model_Block.Content.Icon)
    case link(Anytype_Model_Block.Content.Link)
    case dataview(Anytype_Model_Block.Content.Dataview)

  #if !swift(>=4.1)
    static func ==(lhs: Anytype_Model_Block.OneOf_Content, rhs: Anytype_Model_Block.OneOf_Content) -> Bool {
      switch (lhs, rhs) {
      case (.smartblock(let l), .smartblock(let r)): return l == r
      case (.text(let l), .text(let r)): return l == r
      case (.file(let l), .file(let r)): return l == r
      case (.layout(let l), .layout(let r)): return l == r
      case (.div(let l), .div(let r)): return l == r
      case (.bookmark(let l), .bookmark(let r)): return l == r
      case (.icon(let l), .icon(let r)): return l == r
      case (.link(let l), .link(let r)): return l == r
      case (.dataview(let l), .dataview(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  enum Position: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case none // = 0
    case top // = 1
    case bottom // = 2
    case left // = 3
    case right // = 4
    case inner // = 5
    case replace // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .top
      case 2: self = .bottom
      case 3: self = .left
      case 4: self = .right
      case 5: self = .inner
      case 6: self = .replace
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .top: return 1
      case .bottom: return 2
      case .left: return 3
      case .right: return 4
      case .inner: return 5
      case .replace: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Align: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case left // = 0
    case center // = 1
    case right // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .left
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .left
      case 1: self = .center
      case 2: self = .right
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .left: return 0
      case .center: return 1
      case .right: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct Restrictions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var read: Bool = false

    var edit: Bool = false

    var remove: Bool = false

    var drag: Bool = false

    var dropOn: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Content {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    ///
    /// Layout have no visual representation, but affects on blocks, that it contains.
    /// Row/Column layout blocks creates only automatically, after some of a D&D operations, for example
    struct Layout {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var style: Anytype_Model_Block.Content.Layout.Style = .row

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum Style: SwiftProtobuf.Enum {
        typealias RawValue = Int
        case row // = 0
        case column // = 1
        case div // = 2
        case UNRECOGNIZED(Int)

        init() {
          self = .row
        }

        init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .row
          case 1: self = .column
          case 2: self = .div
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        var rawValue: Int {
          switch self {
          case .row: return 0
          case .column: return 1
          case .div: return 2
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      init() {}
    }

    ///
    /// Link: block to link some content from an external sources.
    struct Link {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// id of the target block
      var targetBlockID: String = String()

      var style: Anytype_Model_Block.Content.Link.Style = .page

      var fields: SwiftProtobuf.Google_Protobuf_Struct {
        get {return _fields ?? SwiftProtobuf.Google_Protobuf_Struct()}
        set {_fields = newValue}
      }
      /// Returns true if `fields` has been explicitly set.
      var hasFields: Bool {return self._fields != nil}
      /// Clears the value of `fields`. Subsequent reads from it will return its default value.
      mutating func clearFields() {self._fields = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum Style: SwiftProtobuf.Enum {
        typealias RawValue = Int
        case page // = 0
        case dataview // = 1
        case dashboard // = 2

        /// ...
        case archive // = 3
        case UNRECOGNIZED(Int)

        init() {
          self = .page
        }

        init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .page
          case 1: self = .dataview
          case 2: self = .dashboard
          case 3: self = .archive
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        var rawValue: Int {
          switch self {
          case .page: return 0
          case .dataview: return 1
          case .dashboard: return 2
          case .archive: return 3
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      init() {}

      fileprivate var _fields: SwiftProtobuf.Google_Protobuf_Struct? = nil
    }

    ///
    /// Divider: block, that contains only one horizontal thin line
    struct Div {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var style: Anytype_Model_Block.Content.Div.Style = .line

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum Style: SwiftProtobuf.Enum {
        typealias RawValue = Int
        case line // = 0
        case dots // = 1
        case UNRECOGNIZED(Int)

        init() {
          self = .line
        }

        init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .line
          case 1: self = .dots
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        var rawValue: Int {
          switch self {
          case .line: return 0
          case .dots: return 1
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      init() {}
    }

    ///
    /// Bookmark is to keep a web-link and to preview a content.
    struct Bookmark {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var url: String = String()

      var title: String = String()

      var description_p: String = String()

      var imageHash: String = String()

      var faviconHash: String = String()

      var type: Anytype_Model_LinkPreview.TypeEnum = .unknown

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Icon {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var name: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Text {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var text: String = String()

      var style: Anytype_Model_Block.Content.Text.Style = .paragraph

      /// list of marks to apply to the text
      var marks: Anytype_Model_Block.Content.Text.Marks {
        get {return _marks ?? Anytype_Model_Block.Content.Text.Marks()}
        set {_marks = newValue}
      }
      /// Returns true if `marks` has been explicitly set.
      var hasMarks: Bool {return self._marks != nil}
      /// Clears the value of `marks`. Subsequent reads from it will return its default value.
      mutating func clearMarks() {self._marks = nil}

      var checked: Bool = false

      var color: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum Style: SwiftProtobuf.Enum {
        typealias RawValue = Int
        case paragraph // = 0
        case header1 // = 1
        case header2 // = 2
        case header3 // = 3
        case header4 // = 4
        case quote // = 5
        case code // = 6
        case title // = 7
        case checkbox // = 8
        case marked // = 9
        case numbered // = 10
        case toggle // = 11
        case UNRECOGNIZED(Int)

        init() {
          self = .paragraph
        }

        init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .paragraph
          case 1: self = .header1
          case 2: self = .header2
          case 3: self = .header3
          case 4: self = .header4
          case 5: self = .quote
          case 6: self = .code
          case 7: self = .title
          case 8: self = .checkbox
          case 9: self = .marked
          case 10: self = .numbered
          case 11: self = .toggle
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        var rawValue: Int {
          switch self {
          case .paragraph: return 0
          case .header1: return 1
          case .header2: return 2
          case .header3: return 3
          case .header4: return 4
          case .quote: return 5
          case .code: return 6
          case .title: return 7
          case .checkbox: return 8
          case .marked: return 9
          case .numbered: return 10
          case .toggle: return 11
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      struct Marks {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var marks: [Anytype_Model_Block.Content.Text.Mark] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Mark {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// range of symbols to apply this mark. From(symbol) To(symbol)
        var range: Anytype_Model_Range {
          get {return _range ?? Anytype_Model_Range()}
          set {_range = newValue}
        }
        /// Returns true if `range` has been explicitly set.
        var hasRange: Bool {return self._range != nil}
        /// Clears the value of `range`. Subsequent reads from it will return its default value.
        mutating func clearRange() {self._range = nil}

        var type: Anytype_Model_Block.Content.Text.Mark.TypeEnum = .strikethrough

        /// link, color, etc
        var param: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        enum TypeEnum: SwiftProtobuf.Enum {
          typealias RawValue = Int
          case strikethrough // = 0
          case keyboard // = 1
          case italic // = 2
          case bold // = 3
          case underscored // = 4
          case link // = 5
          case textColor // = 6
          case backgroundColor // = 7
          case mention // = 8
          case UNRECOGNIZED(Int)

          init() {
            self = .strikethrough
          }

          init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .strikethrough
            case 1: self = .keyboard
            case 2: self = .italic
            case 3: self = .bold
            case 4: self = .underscored
            case 5: self = .link
            case 6: self = .textColor
            case 7: self = .backgroundColor
            case 8: self = .mention
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          var rawValue: Int {
            switch self {
            case .strikethrough: return 0
            case .keyboard: return 1
            case .italic: return 2
            case .bold: return 3
            case .underscored: return 4
            case .link: return 5
            case .textColor: return 6
            case .backgroundColor: return 7
            case .mention: return 8
            case .UNRECOGNIZED(let i): return i
            }
          }

        }

        init() {}

        fileprivate var _range: Anytype_Model_Range? = nil
      }

      init() {}

      fileprivate var _marks: Anytype_Model_Block.Content.Text.Marks? = nil
    }

    struct File {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var hash: String = String()

      var name: String = String()

      var type: Anytype_Model_Block.Content.File.TypeEnum = .none

      var mime: String = String()

      var size: Int64 = 0

      var addedAt: Int64 = 0

      var state: Anytype_Model_Block.Content.File.State = .empty

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum TypeEnum: SwiftProtobuf.Enum {
        typealias RawValue = Int
        case none // = 0
        case file // = 1
        case image // = 2
        case video // = 3
        case UNRECOGNIZED(Int)

        init() {
          self = .none
        }

        init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .none
          case 1: self = .file
          case 2: self = .image
          case 3: self = .video
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        var rawValue: Int {
          switch self {
          case .none: return 0
          case .file: return 1
          case .image: return 2
          case .video: return 3
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      enum State: SwiftProtobuf.Enum {
        typealias RawValue = Int

        /// There is no file and preview, it's an empty block, that waits files.
        case empty // = 0

        /// There is still no file/preview, but file already uploading
        case uploading // = 1

        /// File and preview downloaded
        case done // = 2

        /// Error while uploading
        case error // = 3
        case UNRECOGNIZED(Int)

        init() {
          self = .empty
        }

        init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .empty
          case 1: self = .uploading
          case 2: self = .done
          case 3: self = .error
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        var rawValue: Int {
          switch self {
          case .empty: return 0
          case .uploading: return 1
          case .done: return 2
          case .error: return 3
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      init() {}
    }

    struct Smartblock {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Dataview {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var databaseID: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    init() {}
  }

  init() {}

  fileprivate var _fields: SwiftProtobuf.Google_Protobuf_Struct? = nil
  fileprivate var _restrictions: Anytype_Model_Block.Restrictions? = nil
}

#if swift(>=4.2)

extension Anytype_Model_Block.Position: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Model_Block.Position] = [
    .none,
    .top,
    .bottom,
    .left,
    .right,
    .inner,
    .replace,
  ]
}

extension Anytype_Model_Block.Align: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Model_Block.Align] = [
    .left,
    .center,
    .right,
  ]
}

extension Anytype_Model_Block.Content.Layout.Style: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Model_Block.Content.Layout.Style] = [
    .row,
    .column,
    .div,
  ]
}

extension Anytype_Model_Block.Content.Link.Style: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Model_Block.Content.Link.Style] = [
    .page,
    .dataview,
    .dashboard,
    .archive,
  ]
}

extension Anytype_Model_Block.Content.Div.Style: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Model_Block.Content.Div.Style] = [
    .line,
    .dots,
  ]
}

extension Anytype_Model_Block.Content.Text.Style: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Model_Block.Content.Text.Style] = [
    .paragraph,
    .header1,
    .header2,
    .header3,
    .header4,
    .quote,
    .code,
    .title,
    .checkbox,
    .marked,
    .numbered,
    .toggle,
  ]
}

extension Anytype_Model_Block.Content.Text.Mark.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Model_Block.Content.Text.Mark.TypeEnum] = [
    .strikethrough,
    .keyboard,
    .italic,
    .bold,
    .underscored,
    .link,
    .textColor,
    .backgroundColor,
    .mention,
  ]
}

extension Anytype_Model_Block.Content.File.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Model_Block.Content.File.TypeEnum] = [
    .none,
    .file,
    .image,
    .video,
  ]
}

extension Anytype_Model_Block.Content.File.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Model_Block.Content.File.State] = [
    .empty,
    .uploading,
    .done,
    .error,
  ]
}

#endif  // swift(>=4.2)

///
/// Used to decode block meta only, without the content itself
struct Anytype_Model_BlockMetaOnly {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var fields: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _fields ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_fields = newValue}
  }
  /// Returns true if `fields` has been explicitly set.
  var hasFields: Bool {return self._fields != nil}
  /// Clears the value of `fields`. Subsequent reads from it will return its default value.
  mutating func clearFields() {self._fields = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fields: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

///
/// General purpose structure, uses in Mark.
struct Anytype_Model_Range {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: Int32 = 0

  var to: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// Contains basic information about a user account
struct Anytype_Model_Account {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// User's thread id
  var id: String = String()

  /// User name, that associated with this account
  var name: String = String()

  /// Avatar of a user's account
  var avatar: Anytype_Model_Account.Avatar {
    get {return _avatar ?? Anytype_Model_Account.Avatar()}
    set {_avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  var hasAvatar: Bool {return self._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  mutating func clearAvatar() {self._avatar = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  ///*
  /// Avatar of a user's account. It could be an image or color
  struct Avatar {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var avatar: Anytype_Model_Account.Avatar.OneOf_Avatar? = nil

    /// Image of the avatar. Contains the hash to retrieve the image.
    var image: Anytype_Model_Block.Content.File {
      get {
        if case .image(let v)? = avatar {return v}
        return Anytype_Model_Block.Content.File()
      }
      set {avatar = .image(newValue)}
    }

    /// Color of the avatar, used if image not set.
    var color: String {
      get {
        if case .color(let v)? = avatar {return v}
        return String()
      }
      set {avatar = .color(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Avatar: Equatable {
      /// Image of the avatar. Contains the hash to retrieve the image.
      case image(Anytype_Model_Block.Content.File)
      /// Color of the avatar, used if image not set.
      case color(String)

    #if !swift(>=4.1)
      static func ==(lhs: Anytype_Model_Account.Avatar.OneOf_Avatar, rhs: Anytype_Model_Account.Avatar.OneOf_Avatar) -> Bool {
        switch (lhs, rhs) {
        case (.image(let l), .image(let r)): return l == r
        case (.color(let l), .color(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}
  }

  init() {}

  fileprivate var _avatar: Anytype_Model_Account.Avatar? = nil
}

struct Anytype_Model_LinkPreview {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var url: String = String()

  var title: String = String()

  var description_p: String = String()

  var imageURL: String = String()

  var faviconURL: String = String()

  var type: Anytype_Model_LinkPreview.TypeEnum = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case page // = 1
    case image // = 2
    case text // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .page
      case 2: self = .image
      case 3: self = .text
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .page: return 1
      case .image: return 2
      case .text: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Anytype_Model_LinkPreview.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Model_LinkPreview.TypeEnum] = [
    .unknown,
    .page,
    .image,
    .text,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"

extension Anytype_Model_SmartBlockSnapshotBase: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SmartBlockSnapshotBase"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blocks"),
    2: .same(proto: "details"),
    3: .same(proto: "fileKeys"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.blocks)
      case 2: try decoder.decodeSingularMessageField(value: &self._details)
      case 3: try decoder.decodeSingularMessageField(value: &self._fileKeys)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 1)
    }
    if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._fileKeys {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_SmartBlockSnapshotBase, rhs: Anytype_Model_SmartBlockSnapshotBase) -> Bool {
    if lhs.blocks != rhs.blocks {return false}
    if lhs._details != rhs._details {return false}
    if lhs._fileKeys != rhs._fileKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Block"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "fields"),
    3: .same(proto: "restrictions"),
    4: .same(proto: "childrenIds"),
    5: .same(proto: "backgroundColor"),
    6: .same(proto: "align"),
    11: .same(proto: "smartblock"),
    14: .same(proto: "text"),
    15: .same(proto: "file"),
    16: .same(proto: "layout"),
    17: .same(proto: "div"),
    18: .same(proto: "bookmark"),
    19: .same(proto: "icon"),
    20: .same(proto: "link"),
    21: .same(proto: "dataview"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._fields)
      case 3: try decoder.decodeSingularMessageField(value: &self._restrictions)
      case 4: try decoder.decodeRepeatedStringField(value: &self.childrenIds)
      case 5: try decoder.decodeSingularStringField(value: &self.backgroundColor)
      case 6: try decoder.decodeSingularEnumField(value: &self.align)
      case 11:
        var v: Anytype_Model_Block.Content.Smartblock?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .smartblock(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .smartblock(v)}
      case 14:
        var v: Anytype_Model_Block.Content.Text?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .text(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .text(v)}
      case 15:
        var v: Anytype_Model_Block.Content.File?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .file(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .file(v)}
      case 16:
        var v: Anytype_Model_Block.Content.Layout?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .layout(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .layout(v)}
      case 17:
        var v: Anytype_Model_Block.Content.Div?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .div(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .div(v)}
      case 18:
        var v: Anytype_Model_Block.Content.Bookmark?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .bookmark(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .bookmark(v)}
      case 19:
        var v: Anytype_Model_Block.Content.Icon?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .icon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .icon(v)}
      case 20:
        var v: Anytype_Model_Block.Content.Link?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .link(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .link(v)}
      case 21:
        var v: Anytype_Model_Block.Content.Dataview?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .dataview(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .dataview(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._restrictions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.childrenIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.childrenIds, fieldNumber: 4)
    }
    if !self.backgroundColor.isEmpty {
      try visitor.visitSingularStringField(value: self.backgroundColor, fieldNumber: 5)
    }
    if self.align != .left {
      try visitor.visitSingularEnumField(value: self.align, fieldNumber: 6)
    }
    switch self.content {
    case .smartblock(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    case .text(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    case .file(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    case .layout(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    case .div(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    case .bookmark(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    case .icon(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    case .link(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    case .dataview(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block, rhs: Anytype_Model_Block) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs._restrictions != rhs._restrictions {return false}
    if lhs.childrenIds != rhs.childrenIds {return false}
    if lhs.backgroundColor != rhs.backgroundColor {return false}
    if lhs.align != rhs.align {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Position: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "Top"),
    2: .same(proto: "Bottom"),
    3: .same(proto: "Left"),
    4: .same(proto: "Right"),
    5: .same(proto: "Inner"),
    6: .same(proto: "Replace"),
  ]
}

extension Anytype_Model_Block.Align: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AlignLeft"),
    1: .same(proto: "AlignCenter"),
    2: .same(proto: "AlignRight"),
  ]
}

extension Anytype_Model_Block.Restrictions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.protoMessageName + ".Restrictions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "read"),
    2: .same(proto: "edit"),
    3: .same(proto: "remove"),
    4: .same(proto: "drag"),
    5: .same(proto: "dropOn"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.read)
      case 2: try decoder.decodeSingularBoolField(value: &self.edit)
      case 3: try decoder.decodeSingularBoolField(value: &self.remove)
      case 4: try decoder.decodeSingularBoolField(value: &self.drag)
      case 5: try decoder.decodeSingularBoolField(value: &self.dropOn)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.read != false {
      try visitor.visitSingularBoolField(value: self.read, fieldNumber: 1)
    }
    if self.edit != false {
      try visitor.visitSingularBoolField(value: self.edit, fieldNumber: 2)
    }
    if self.remove != false {
      try visitor.visitSingularBoolField(value: self.remove, fieldNumber: 3)
    }
    if self.drag != false {
      try visitor.visitSingularBoolField(value: self.drag, fieldNumber: 4)
    }
    if self.dropOn != false {
      try visitor.visitSingularBoolField(value: self.dropOn, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Restrictions, rhs: Anytype_Model_Block.Restrictions) -> Bool {
    if lhs.read != rhs.read {return false}
    if lhs.edit != rhs.edit {return false}
    if lhs.remove != rhs.remove {return false}
    if lhs.drag != rhs.drag {return false}
    if lhs.dropOn != rhs.dropOn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.protoMessageName + ".Content"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Content, rhs: Anytype_Model_Block.Content) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Layout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Layout"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "style"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.style)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.style != .row {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Content.Layout, rhs: Anytype_Model_Block.Content.Layout) -> Bool {
    if lhs.style != rhs.style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Layout.Style: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Row"),
    1: .same(proto: "Column"),
    2: .same(proto: "Div"),
  ]
}

extension Anytype_Model_Block.Content.Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Link"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targetBlockId"),
    2: .same(proto: "style"),
    3: .same(proto: "fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.targetBlockID)
      case 2: try decoder.decodeSingularEnumField(value: &self.style)
      case 3: try decoder.decodeSingularMessageField(value: &self._fields)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetBlockID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetBlockID, fieldNumber: 1)
    }
    if self.style != .page {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 2)
    }
    if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Content.Link, rhs: Anytype_Model_Block.Content.Link) -> Bool {
    if lhs.targetBlockID != rhs.targetBlockID {return false}
    if lhs.style != rhs.style {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Link.Style: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Page"),
    1: .same(proto: "Dataview"),
    2: .same(proto: "Dashboard"),
    3: .same(proto: "Archive"),
  ]
}

extension Anytype_Model_Block.Content.Div: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Div"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "style"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.style)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.style != .line {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Content.Div, rhs: Anytype_Model_Block.Content.Div) -> Bool {
    if lhs.style != rhs.style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Div.Style: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Line"),
    1: .same(proto: "Dots"),
  ]
}

extension Anytype_Model_Block.Content.Bookmark: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Bookmark"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "imageHash"),
    5: .same(proto: "faviconHash"),
    6: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeSingularStringField(value: &self.imageHash)
      case 5: try decoder.decodeSingularStringField(value: &self.faviconHash)
      case 6: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.imageHash.isEmpty {
      try visitor.visitSingularStringField(value: self.imageHash, fieldNumber: 4)
    }
    if !self.faviconHash.isEmpty {
      try visitor.visitSingularStringField(value: self.faviconHash, fieldNumber: 5)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Content.Bookmark, rhs: Anytype_Model_Block.Content.Bookmark) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.imageHash != rhs.imageHash {return false}
    if lhs.faviconHash != rhs.faviconHash {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Icon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Icon"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Content.Icon, rhs: Anytype_Model_Block.Content.Icon) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Text"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "style"),
    3: .same(proto: "marks"),
    4: .same(proto: "checked"),
    5: .same(proto: "color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.text)
      case 2: try decoder.decodeSingularEnumField(value: &self.style)
      case 3: try decoder.decodeSingularMessageField(value: &self._marks)
      case 4: try decoder.decodeSingularBoolField(value: &self.checked)
      case 5: try decoder.decodeSingularStringField(value: &self.color)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.style != .paragraph {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 2)
    }
    if let v = self._marks {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.checked != false {
      try visitor.visitSingularBoolField(value: self.checked, fieldNumber: 4)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Content.Text, rhs: Anytype_Model_Block.Content.Text) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.style != rhs.style {return false}
    if lhs._marks != rhs._marks {return false}
    if lhs.checked != rhs.checked {return false}
    if lhs.color != rhs.color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Text.Style: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Paragraph"),
    1: .same(proto: "Header1"),
    2: .same(proto: "Header2"),
    3: .same(proto: "Header3"),
    4: .same(proto: "Header4"),
    5: .same(proto: "Quote"),
    6: .same(proto: "Code"),
    7: .same(proto: "Title"),
    8: .same(proto: "Checkbox"),
    9: .same(proto: "Marked"),
    10: .same(proto: "Numbered"),
    11: .same(proto: "Toggle"),
  ]
}

extension Anytype_Model_Block.Content.Text.Marks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.Content.Text.protoMessageName + ".Marks"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "marks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.marks)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.marks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.marks, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Content.Text.Marks, rhs: Anytype_Model_Block.Content.Text.Marks) -> Bool {
    if lhs.marks != rhs.marks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Text.Mark: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.Content.Text.protoMessageName + ".Mark"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "range"),
    2: .same(proto: "type"),
    3: .same(proto: "param"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._range)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      case 3: try decoder.decodeSingularStringField(value: &self.param)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._range {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.type != .strikethrough {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.param.isEmpty {
      try visitor.visitSingularStringField(value: self.param, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Content.Text.Mark, rhs: Anytype_Model_Block.Content.Text.Mark) -> Bool {
    if lhs._range != rhs._range {return false}
    if lhs.type != rhs.type {return false}
    if lhs.param != rhs.param {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Text.Mark.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Strikethrough"),
    1: .same(proto: "Keyboard"),
    2: .same(proto: "Italic"),
    3: .same(proto: "Bold"),
    4: .same(proto: "Underscored"),
    5: .same(proto: "Link"),
    6: .same(proto: "TextColor"),
    7: .same(proto: "BackgroundColor"),
    8: .same(proto: "Mention"),
  ]
}

extension Anytype_Model_Block.Content.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".File"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "name"),
    3: .same(proto: "type"),
    4: .same(proto: "mime"),
    5: .same(proto: "size"),
    6: .same(proto: "addedAt"),
    7: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.hash)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularEnumField(value: &self.type)
      case 4: try decoder.decodeSingularStringField(value: &self.mime)
      case 5: try decoder.decodeSingularInt64Field(value: &self.size)
      case 6: try decoder.decodeSingularInt64Field(value: &self.addedAt)
      case 7: try decoder.decodeSingularEnumField(value: &self.state)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.type != .none {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if !self.mime.isEmpty {
      try visitor.visitSingularStringField(value: self.mime, fieldNumber: 4)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 5)
    }
    if self.addedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.addedAt, fieldNumber: 6)
    }
    if self.state != .empty {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Content.File, rhs: Anytype_Model_Block.Content.File) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.mime != rhs.mime {return false}
    if lhs.size != rhs.size {return false}
    if lhs.addedAt != rhs.addedAt {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.File.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "File"),
    2: .same(proto: "Image"),
    3: .same(proto: "Video"),
  ]
}

extension Anytype_Model_Block.Content.File.State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Empty"),
    1: .same(proto: "Uploading"),
    2: .same(proto: "Done"),
    3: .same(proto: "Error"),
  ]
}

extension Anytype_Model_Block.Content.Smartblock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Smartblock"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Content.Smartblock, rhs: Anytype_Model_Block.Content.Smartblock) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Dataview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Dataview"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "databaseId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.databaseID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.databaseID.isEmpty {
      try visitor.visitSingularStringField(value: self.databaseID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Block.Content.Dataview, rhs: Anytype_Model_Block.Content.Dataview) -> Bool {
    if lhs.databaseID != rhs.databaseID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_BlockMetaOnly: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BlockMetaOnly"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._fields)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_BlockMetaOnly, rhs: Anytype_Model_BlockMetaOnly) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Range: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Range"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.from)
      case 2: try decoder.decodeSingularInt32Field(value: &self.to)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.from != 0 {
      try visitor.visitSingularInt32Field(value: self.from, fieldNumber: 1)
    }
    if self.to != 0 {
      try visitor.visitSingularInt32Field(value: self.to, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Range, rhs: Anytype_Model_Range) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Account"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "avatar"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularMessageField(value: &self._avatar)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if let v = self._avatar {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Account, rhs: Anytype_Model_Account) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._avatar != rhs._avatar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Account.Avatar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Model_Account.protoMessageName + ".Avatar"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "image"),
    2: .same(proto: "color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Anytype_Model_Block.Content.File?
        if let current = self.avatar {
          try decoder.handleConflictingOneOf()
          if case .image(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.avatar = .image(v)}
      case 2:
        if self.avatar != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.avatar = .color(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.avatar {
    case .image(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .color(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_Account.Avatar, rhs: Anytype_Model_Account.Avatar) -> Bool {
    if lhs.avatar != rhs.avatar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_LinkPreview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LinkPreview"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "imageUrl"),
    5: .same(proto: "faviconUrl"),
    6: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeSingularStringField(value: &self.imageURL)
      case 5: try decoder.decodeSingularStringField(value: &self.faviconURL)
      case 6: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 4)
    }
    if !self.faviconURL.isEmpty {
      try visitor.visitSingularStringField(value: self.faviconURL, fieldNumber: 5)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Model_LinkPreview, rhs: Anytype_Model_LinkPreview) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.faviconURL != rhs.faviconURL {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_LinkPreview.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unknown"),
    1: .same(proto: "Page"),
    2: .same(proto: "Image"),
    3: .same(proto: "Text"),
  ]
}
