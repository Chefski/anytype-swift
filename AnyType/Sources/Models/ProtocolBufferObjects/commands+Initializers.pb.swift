// DO NOT EDIT.
//
// Generated by the AnytypeSwiftCodegen.
//
// For information on using the generated types, please see the documentation:
//   https://github.com/anytypeio/anytype-swift-codegen

import Foundation
import SwiftProtobuf
import Combine
import Lib

extension Anytype_Rpc.Account.Create.Request {
  init(name: String, avatar: Anytype_Rpc.Account.Create.Request.OneOf_Avatar?, avatarLocalPath: String, avatarColor: String) {
    self.name = name
    self.avatar = avatar
    self.avatarLocalPath = avatarLocalPath
    self.avatarColor = avatarColor
  }
}

extension Anytype_Rpc.Account.Create.Response {
  init(error: Anytype_Rpc.Account.Create.Response.Error, account: Anytype_Model_Account) {
    self.error = error
    self.account = account
  }
}

extension Anytype_Rpc.Account.Create.Response.Error {
  init(code: Anytype_Rpc.Account.Create.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Account.Recover.Response {
  init(error: Anytype_Rpc.Account.Recover.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Account.Recover.Response.Error {
  init(code: Anytype_Rpc.Account.Recover.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Account.Select.Request {
  init(id: String, rootPath: String) {
    self.id = id
    self.rootPath = rootPath
  }
}

extension Anytype_Rpc.Account.Select.Response {
  init(error: Anytype_Rpc.Account.Select.Response.Error, account: Anytype_Model_Account) {
    self.error = error
    self.account = account
  }
}

extension Anytype_Rpc.Account.Select.Response.Error {
  init(code: Anytype_Rpc.Account.Select.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Close.Request {
  init(contextID: String, blockID: String) {
    self.contextID = contextID
    self.blockID = blockID
  }
}

extension Anytype_Rpc.Block.Close.Response {
  init(error: Anytype_Rpc.Block.Close.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Close.Response.Error {
  init(code: Anytype_Rpc.Block.Close.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Copy.Request {
  init(contextID: String, focusedBlockID: String, selectedTextRange: Anytype_Model_Range, selectedBlocks: [String]) {
    self.contextID = contextID
    self.focusedBlockID = focusedBlockID
    self.selectedTextRange = selectedTextRange
    self.selectedBlocks = selectedBlocks
  }
}

extension Anytype_Rpc.Block.Copy.Response {
  init(error: Anytype_Rpc.Block.Copy.Response.Error, clipboardText: String, clipboardHtml: String, clipboardAny: String) {
    self.error = error
    self.clipboardText = clipboardText
    self.clipboardHtml = clipboardHtml
    self.clipboardAny = clipboardAny
  }
}

extension Anytype_Rpc.Block.Copy.Response.Error {
  init(code: Anytype_Rpc.Block.Copy.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Create.Request {
  init(contextID: String, targetID: String, block: Anytype_Model_Block, position: Anytype_Model_Block.Position) {
    self.contextID = contextID
    self.targetID = targetID
    self.block = block
    self.position = position
  }
}

extension Anytype_Rpc.Block.Create.Response {
  init(error: Anytype_Rpc.Block.Create.Response.Error, blockID: String) {
    self.error = error
    self.blockID = blockID
  }
}

extension Anytype_Rpc.Block.Create.Response.Error {
  init(code: Anytype_Rpc.Block.Create.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Download.Request {
  init(contextID: String, blockID: String) {
    self.contextID = contextID
    self.blockID = blockID
  }
}

extension Anytype_Rpc.Block.Download.Response {
  init(error: Anytype_Rpc.Block.Download.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Download.Response.Error {
  init(code: Anytype_Rpc.Block.Download.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Duplicate.Request {
  init(contextID: String, targetID: String, blockID: String, position: Anytype_Model_Block.Position) {
    self.contextID = contextID
    self.targetID = targetID
    self.blockID = blockID
    self.position = position
  }
}

extension Anytype_Rpc.Block.Duplicate.Response {
  init(error: Anytype_Rpc.Block.Duplicate.Response.Error, blockID: String) {
    self.error = error
    self.blockID = blockID
  }
}

extension Anytype_Rpc.Block.Duplicate.Response.Error {
  init(code: Anytype_Rpc.Block.Duplicate.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Get.Marks.Request {
  init(contextID: String, blockID: String, range: Anytype_Model_Range) {
    self.contextID = contextID
    self.blockID = blockID
    self.range = range
  }
}

extension Anytype_Rpc.Block.Get.Marks.Response {
  init(error: Anytype_Rpc.Block.Get.Marks.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Get.Marks.Response.Error {
  init(code: Anytype_Rpc.Block.Get.Marks.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.History.Move.Request {
  init(contextID: String, blockID: String, moveForward: Bool) {
    self.contextID = contextID
    self.blockID = blockID
    self.moveForward = moveForward
  }
}

extension Anytype_Rpc.Block.History.Move.Response {
  init(error: Anytype_Rpc.Block.History.Move.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.History.Move.Response.Error {
  init(code: Anytype_Rpc.Block.History.Move.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Merge.Request {
  init(contextID: String, firstBlockID: String, secondBlockID: String) {
    self.contextID = contextID
    self.firstBlockID = firstBlockID
    self.secondBlockID = secondBlockID
  }
}

extension Anytype_Rpc.Block.Merge.Response {
  init(error: Anytype_Rpc.Block.Merge.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Merge.Response.Error {
  init(code: Anytype_Rpc.Block.Merge.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Open.Request {
  init(contextID: String, blockID: String) {
    self.contextID = contextID
    self.blockID = blockID
  }
}

extension Anytype_Rpc.Block.Open.Response {
  init(error: Anytype_Rpc.Block.Open.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Open.Response.Error {
  init(code: Anytype_Rpc.Block.Open.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Paste.Request {
  init(contextID: String, focusedBlockID: String, selectedTextRange: Anytype_Model_Range, selectedBlocks: [String], clipboardText: String, clipboardHtml: String, clipboardAny: String) {
    self.contextID = contextID
    self.focusedBlockID = focusedBlockID
    self.selectedTextRange = selectedTextRange
    self.selectedBlocks = selectedBlocks
    self.clipboardText = clipboardText
    self.clipboardHtml = clipboardHtml
    self.clipboardAny = clipboardAny
  }
}

extension Anytype_Rpc.Block.Paste.Response {
  init(error: Anytype_Rpc.Block.Paste.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Paste.Response.Error {
  init(code: Anytype_Rpc.Block.Paste.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Set.Fields.Request {
  init(contextID: String, blockID: String, fields: SwiftProtobuf.Google_Protobuf_Struct) {
    self.contextID = contextID
    self.blockID = blockID
    self.fields = fields
  }
}

extension Anytype_Rpc.Block.Set.Fields.Response {
  init(error: Anytype_Rpc.Block.Set.Fields.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Set.Fields.Response.Error {
  init(code: Anytype_Rpc.Block.Set.Fields.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Set.File.Name.Request {
  init(contextID: String, blockID: String, name: String) {
    self.contextID = contextID
    self.blockID = blockID
    self.name = name
  }
}

extension Anytype_Rpc.Block.Set.File.Name.Response {
  init(error: Anytype_Rpc.Block.Set.File.Name.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Set.File.Name.Response.Error {
  init(code: Anytype_Rpc.Block.Set.File.Name.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Set.Icon.Name.Request {
  init(contextID: String, blockID: String, name: String) {
    self.contextID = contextID
    self.blockID = blockID
    self.name = name
  }
}

extension Anytype_Rpc.Block.Set.Icon.Name.Response {
  init(error: Anytype_Rpc.Block.Set.Icon.Name.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Set.Icon.Name.Response.Error {
  init(code: Anytype_Rpc.Block.Set.Icon.Name.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Set.Image.Name.Request {
  init(contextID: String, blockID: String, name: String) {
    self.contextID = contextID
    self.blockID = blockID
    self.name = name
  }
}

extension Anytype_Rpc.Block.Set.Image.Name.Response {
  init(error: Anytype_Rpc.Block.Set.Image.Name.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Set.Image.Name.Response.Error {
  init(code: Anytype_Rpc.Block.Set.Image.Name.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Set.Image.Width.Request {
  init(contextID: String, blockID: String, width: Int32) {
    self.contextID = contextID
    self.blockID = blockID
    self.width = width
  }
}

extension Anytype_Rpc.Block.Set.Image.Width.Response {
  init(error: Anytype_Rpc.Block.Set.Image.Width.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Set.Image.Width.Response.Error {
  init(code: Anytype_Rpc.Block.Set.Image.Width.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Set.IsArchived.Request {
  init(contextID: String, blockID: String, isArchived: Bool) {
    self.contextID = contextID
    self.blockID = blockID
    self.isArchived = isArchived
  }
}

extension Anytype_Rpc.Block.Set.IsArchived.Response {
  init(error: Anytype_Rpc.Block.Set.IsArchived.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Set.IsArchived.Response.Error {
  init(code: Anytype_Rpc.Block.Set.IsArchived.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Set.Restrictions.Request {
  init(contextID: String, blockID: String, restrictions: Anytype_Model_Block.Restrictions) {
    self.contextID = contextID
    self.blockID = blockID
    self.restrictions = restrictions
  }
}

extension Anytype_Rpc.Block.Set.Restrictions.Response {
  init(error: Anytype_Rpc.Block.Set.Restrictions.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Set.Restrictions.Response.Error {
  init(code: Anytype_Rpc.Block.Set.Restrictions.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Set.Text.Checked.Request {
  init(contextID: String, blockID: String, checked: Bool) {
    self.contextID = contextID
    self.blockID = blockID
    self.checked = checked
  }
}

extension Anytype_Rpc.Block.Set.Text.Checked.Response {
  init(error: Anytype_Rpc.Block.Set.Text.Checked.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Set.Text.Checked.Response.Error {
  init(code: Anytype_Rpc.Block.Set.Text.Checked.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Set.Text.Style.Request {
  init(contextID: String, blockID: String, style: Anytype_Model_Block.Content.Text.Style) {
    self.contextID = contextID
    self.blockID = blockID
    self.style = style
  }
}

extension Anytype_Rpc.Block.Set.Text.Style.Response {
  init(error: Anytype_Rpc.Block.Set.Text.Style.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Set.Text.Style.Response.Error {
  init(code: Anytype_Rpc.Block.Set.Text.Style.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Set.Text.Text.Request {
  init(contextID: String, blockID: String, text: String, marks: Anytype_Model_Block.Content.Text.Marks) {
    self.contextID = contextID
    self.blockID = blockID
    self.text = text
    self.marks = marks
  }
}

extension Anytype_Rpc.Block.Set.Text.Text.Response {
  init(error: Anytype_Rpc.Block.Set.Text.Text.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Set.Text.Text.Response.Error {
  init(code: Anytype_Rpc.Block.Set.Text.Text.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Set.Video.Name.Request {
  init(contextID: String, blockID: String, name: String) {
    self.contextID = contextID
    self.blockID = blockID
    self.name = name
  }
}

extension Anytype_Rpc.Block.Set.Video.Name.Response {
  init(error: Anytype_Rpc.Block.Set.Video.Name.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Set.Video.Name.Response.Error {
  init(code: Anytype_Rpc.Block.Set.Video.Name.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Set.Video.Width.Request {
  init(contextID: String, blockID: String, width: Int32) {
    self.contextID = contextID
    self.blockID = blockID
    self.width = width
  }
}

extension Anytype_Rpc.Block.Set.Video.Width.Response {
  init(error: Anytype_Rpc.Block.Set.Video.Width.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Set.Video.Width.Response.Error {
  init(code: Anytype_Rpc.Block.Set.Video.Width.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Split.Request {
  init(contextID: String, blockID: String, cursorPosition: Int32) {
    self.contextID = contextID
    self.blockID = blockID
    self.cursorPosition = cursorPosition
  }
}

extension Anytype_Rpc.Block.Split.Response {
  init(error: Anytype_Rpc.Block.Split.Response.Error, blockID: String) {
    self.error = error
    self.blockID = blockID
  }
}

extension Anytype_Rpc.Block.Split.Response.Error {
  init(code: Anytype_Rpc.Block.Split.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Unlink.Request {
  init(contextID: String, targets: [Anytype_Rpc.Block.Unlink.Request.Target]) {
    self.contextID = contextID
    self.targets = targets
  }
}

extension Anytype_Rpc.Block.Unlink.Request.Target {
  init(blockID: String) {
    self.blockID = blockID
  }
}

extension Anytype_Rpc.Block.Unlink.Response {
  init(error: Anytype_Rpc.Block.Unlink.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Unlink.Response.Error {
  init(code: Anytype_Rpc.Block.Unlink.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Block.Upload.Request {
  init(contextID: String, blockID: String, localPath: String, url: String) {
    self.contextID = contextID
    self.blockID = blockID
    self.localPath = localPath
    self.url = url
  }
}

extension Anytype_Rpc.Block.Upload.Response {
  init(error: Anytype_Rpc.Block.Upload.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Block.Upload.Response.Error {
  init(code: Anytype_Rpc.Block.Upload.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.BlockList.Move.Request {
  init(contextID: String, blockIds: [String], dropTargetID: String, position: Anytype_Model_Block.Position) {
    self.contextID = contextID
    self.blockIds = blockIds
    self.dropTargetID = dropTargetID
    self.position = position
  }
}

extension Anytype_Rpc.BlockList.Move.Response {
  init(error: Anytype_Rpc.BlockList.Move.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.BlockList.Move.Response.Error {
  init(code: Anytype_Rpc.BlockList.Move.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.BlockList.Set.Text.Style.Request {
  init(contextID: String, blockIds: [String], style: Anytype_Model_Block.Content.Text.Style) {
    self.contextID = contextID
    self.blockIds = blockIds
    self.style = style
  }
}

extension Anytype_Rpc.BlockList.Set.Text.Style.Response {
  init(error: Anytype_Rpc.BlockList.Set.Text.Style.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.BlockList.Set.Text.Style.Response.Error {
  init(code: Anytype_Rpc.BlockList.Set.Text.Style.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Config.Get.Response {
  init(error: Anytype_Rpc.Config.Get.Response.Error, homeBlockID: String) {
    self.error = error
    self.homeBlockID = homeBlockID
  }
}

extension Anytype_Rpc.Config.Get.Response.Error {
  init(code: Anytype_Rpc.Config.Get.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Ipfs.File.Get.Request {
  init(id: String) {
    self.id = id
  }
}

extension Anytype_Rpc.Ipfs.File.Get.Response {
  init(error: Anytype_Rpc.Ipfs.File.Get.Response.Error, data: Data, media: String, name: String) {
    self.error = error
    self.data = data
    self.media = media
    self.name = name
  }
}

extension Anytype_Rpc.Ipfs.File.Get.Response.Error {
  init(code: Anytype_Rpc.Ipfs.File.Get.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.Blob.Request {
  init(id: String, size: Anytype_Model_Image.Size) {
    self.id = id
    self.size = size
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.Blob.Response {
  init(error: Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error, blob: Data) {
    self.error = error
    self.blob = blob
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error {
  init(code: Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.File.Request {
  init(id: String, size: Anytype_Model_Image.Size) {
    self.id = id
    self.size = size
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.File.Response {
  init(error: Anytype_Rpc.Ipfs.Image.Get.File.Response.Error, localPath: String) {
    self.error = error
    self.localPath = localPath
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.File.Response.Error {
  init(code: Anytype_Rpc.Ipfs.Image.Get.File.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Log.Send.Request {
  init(message: String, level: Anytype_Rpc.Log.Send.Request.Level) {
    self.message = message
    self.level = level
  }
}

extension Anytype_Rpc.Log.Send.Response {
  init(error: Anytype_Rpc.Log.Send.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Log.Send.Response.Error {
  init(code: Anytype_Rpc.Log.Send.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Ping.Request {
  init(index: Int32, numberOfEventsToSend: Int32) {
    self.index = index
    self.numberOfEventsToSend = numberOfEventsToSend
  }
}

extension Anytype_Rpc.Ping.Response {
  init(error: Anytype_Rpc.Ping.Response.Error, index: Int32) {
    self.error = error
    self.index = index
  }
}

extension Anytype_Rpc.Ping.Response.Error {
  init(code: Anytype_Rpc.Ping.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Version.Get.Response {
  init(error: Anytype_Rpc.Version.Get.Response.Error, version: String) {
    self.error = error
    self.version = version
  }
}

extension Anytype_Rpc.Version.Get.Response.Error {
  init(code: Anytype_Rpc.Version.Get.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Wallet.Create.Request {
  init(rootPath: String) {
    self.rootPath = rootPath
  }
}

extension Anytype_Rpc.Wallet.Create.Response {
  init(error: Anytype_Rpc.Wallet.Create.Response.Error, mnemonic: String) {
    self.error = error
    self.mnemonic = mnemonic
  }
}

extension Anytype_Rpc.Wallet.Create.Response.Error {
  init(code: Anytype_Rpc.Wallet.Create.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}

extension Anytype_Rpc.Wallet.Recover.Request {
  init(rootPath: String, mnemonic: String) {
    self.rootPath = rootPath
    self.mnemonic = mnemonic
  }
}

extension Anytype_Rpc.Wallet.Recover.Response {
  init(error: Anytype_Rpc.Wallet.Recover.Response.Error) {
    self.error = error
  }
}

extension Anytype_Rpc.Wallet.Recover.Response.Error {
  init(code: Anytype_Rpc.Wallet.Recover.Response.Error.Code, description_p: String) {
    self.code = code
    self.description_p = description_p
  }
}
