// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///
/// Rpc is a namespace, that agregates all of the service commands between client and middleware.
/// Structure: Topic > Subtopic > Subsub... > Action > (Request, Response).
/// Request – message from a client.
/// Response – message from a middleware.
struct Anytype_Rpc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ExternalDrop {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Files {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var dropTargetID: String = String()

        var position: Anytype_Model_Block.Position = .none

        var localFilePaths: [String] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.ExternalDrop.Files.Response.Error {
          get {return _error ?? Anytype_Rpc.ExternalDrop.Files.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.ExternalDrop.Files.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.ExternalDrop.Files.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct Content {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        /// can be null
        var focusedBlockID: String = String()

        /// TODO
        var content: Data = SwiftProtobuf.Internal.emptyData

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.ExternalDrop.Content.Response.Error {
          get {return _error ?? Anytype_Rpc.ExternalDrop.Content.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.ExternalDrop.Content.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.ExternalDrop.Content.Response.Error? = nil
      }

      init() {}
    }

    init() {}
  }

  struct BlockList {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct ConvertChildrenToPages {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var blockIds: [String] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.BlockList.ConvertChildrenToPages.Response.Error {
          get {return _error ?? Anytype_Rpc.BlockList.ConvertChildrenToPages.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var linkIds: [String] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.BlockList.ConvertChildrenToPages.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.BlockList.ConvertChildrenToPages.Response.Error? = nil
      }

      init() {}
    }

    struct Move {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var blockIds: [String] = []

        var targetContextID: String = String()

        var dropTargetID: String = String()

        var position: Anytype_Model_Block.Position = .none

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.BlockList.Move.Response.Error {
          get {return _error ?? Anytype_Rpc.BlockList.Move.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.BlockList.Move.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.BlockList.Move.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct MoveToNewPage {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var blockIds: [String] = []

        /// page details
        var details: SwiftProtobuf.Google_Protobuf_Struct {
          get {return _details ?? SwiftProtobuf.Google_Protobuf_Struct()}
          set {_details = newValue}
        }
        /// Returns true if `details` has been explicitly set.
        var hasDetails: Bool {return self._details != nil}
        /// Clears the value of `details`. Subsequent reads from it will return its default value.
        mutating func clearDetails() {self._details = nil}

        var dropTargetID: String = String()

        var position: Anytype_Model_Block.Position = .none

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _details: SwiftProtobuf.Google_Protobuf_Struct? = nil
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.BlockList.MoveToNewPage.Response.Error {
          get {return _error ?? Anytype_Rpc.BlockList.MoveToNewPage.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var linkID: String = String()

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.BlockList.MoveToNewPage.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.BlockList.MoveToNewPage.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    ///
    /// Makes blocks copy by given ids and paste it to shown place
    struct Duplicate {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// id of the context block
        var contextID: String = String()

        /// id of the closest block
        var targetID: String = String()

        /// id of block for duplicate
        var blockIds: [String] = []

        var position: Anytype_Model_Block.Position = .none

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.BlockList.Duplicate.Response.Error {
          get {return _error ?? Anytype_Rpc.BlockList.Duplicate.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var blockIds: [String] = []

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.BlockList.Duplicate.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.BlockList.Duplicate.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct Set {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Page {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct IsArchived {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockIds: [String] = []

            var isArchived: Bool = false

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.BlockList.Set.Page.IsArchived.Response.Error {
              get {return _error ?? Anytype_Rpc.BlockList.Set.Page.IsArchived.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.BlockList.Set.Page.IsArchived.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.BlockList.Set.Page.IsArchived.Response.Error? = nil
          }

          init() {}
        }

        init() {}
      }

      struct Text {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockIds: [String] = []

            var style: Anytype_Model_Block.Content.Text.Style = .paragraph

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.BlockList.Set.Text.Style.Response.Error {
              get {return _error ?? Anytype_Rpc.BlockList.Set.Text.Style.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var event: Anytype_ResponseEvent {
              get {return _event ?? Anytype_ResponseEvent()}
              set {_event = newValue}
            }
            /// Returns true if `event` has been explicitly set.
            var hasEvent: Bool {return self._event != nil}
            /// Clears the value of `event`. Subsequent reads from it will return its default value.
            mutating func clearEvent() {self._event = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.BlockList.Set.Text.Style.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.BlockList.Set.Text.Style.Response.Error? = nil
            fileprivate var _event: Anytype_ResponseEvent? = nil
          }

          init() {}
        }

        struct Color {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockIds: [String] = []

            var color: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.BlockList.Set.Text.Color.Response.Error {
              get {return _error ?? Anytype_Rpc.BlockList.Set.Text.Color.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var event: Anytype_ResponseEvent {
              get {return _event ?? Anytype_ResponseEvent()}
              set {_event = newValue}
            }
            /// Returns true if `event` has been explicitly set.
            var hasEvent: Bool {return self._event != nil}
            /// Clears the value of `event`. Subsequent reads from it will return its default value.
            mutating func clearEvent() {self._event = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.BlockList.Set.Text.Color.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.BlockList.Set.Text.Color.Response.Error? = nil
            fileprivate var _event: Anytype_ResponseEvent? = nil
          }

          init() {}
        }

        init() {}
      }

      struct BackgroundColor {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Request {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var contextID: String = String()

          var blockIds: [String] = []

          var color: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Response {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var error: Anytype_Rpc.BlockList.Set.BackgroundColor.Response.Error {
            get {return _error ?? Anytype_Rpc.BlockList.Set.BackgroundColor.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          mutating func clearError() {self._error = nil}

          var event: Anytype_ResponseEvent {
            get {return _event ?? Anytype_ResponseEvent()}
            set {_event = newValue}
          }
          /// Returns true if `event` has been explicitly set.
          var hasEvent: Bool {return self._event != nil}
          /// Clears the value of `event`. Subsequent reads from it will return its default value.
          mutating func clearEvent() {self._event = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Error {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var code: Anytype_Rpc.BlockList.Set.BackgroundColor.Response.Error.Code = .null

            var description_p: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum Code: SwiftProtobuf.Enum {
              typealias RawValue = Int
              case null // = 0
              case unknownError // = 1

              /// ...
              case badInput // = 2
              case UNRECOGNIZED(Int)

              init() {
                self = .null
              }

              init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .UNRECOGNIZED(let i): return i
                }
              }

            }

            init() {}
          }

          init() {}

          fileprivate var _error: Anytype_Rpc.BlockList.Set.BackgroundColor.Response.Error? = nil
          fileprivate var _event: Anytype_ResponseEvent? = nil
        }

        init() {}
      }

      struct Align {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Request {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var contextID: String = String()

          var blockIds: [String] = []

          var align: Anytype_Model_Block.Align = .left

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Response {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var error: Anytype_Rpc.BlockList.Set.Align.Response.Error {
            get {return _error ?? Anytype_Rpc.BlockList.Set.Align.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          mutating func clearError() {self._error = nil}

          var event: Anytype_ResponseEvent {
            get {return _event ?? Anytype_ResponseEvent()}
            set {_event = newValue}
          }
          /// Returns true if `event` has been explicitly set.
          var hasEvent: Bool {return self._event != nil}
          /// Clears the value of `event`. Subsequent reads from it will return its default value.
          mutating func clearEvent() {self._event = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Error {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var code: Anytype_Rpc.BlockList.Set.Align.Response.Error.Code = .null

            var description_p: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum Code: SwiftProtobuf.Enum {
              typealias RawValue = Int
              case null // = 0
              case unknownError // = 1

              /// ...
              case badInput // = 2
              case UNRECOGNIZED(Int)

              init() {
                self = .null
              }

              init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .UNRECOGNIZED(let i): return i
                }
              }

            }

            init() {}
          }

          init() {}

          fileprivate var _error: Anytype_Rpc.BlockList.Set.Align.Response.Error? = nil
          fileprivate var _event: Anytype_ResponseEvent? = nil
        }

        init() {}
      }

      struct Fields {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Request {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var contextID: String = String()

          var blockFields: [Anytype_Rpc.BlockList.Set.Fields.Request.BlockField] = []

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct BlockField {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var blockID: String = String()

            var fields: SwiftProtobuf.Google_Protobuf_Struct {
              get {return _fields ?? SwiftProtobuf.Google_Protobuf_Struct()}
              set {_fields = newValue}
            }
            /// Returns true if `fields` has been explicitly set.
            var hasFields: Bool {return self._fields != nil}
            /// Clears the value of `fields`. Subsequent reads from it will return its default value.
            mutating func clearFields() {self._fields = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}

            fileprivate var _fields: SwiftProtobuf.Google_Protobuf_Struct? = nil
          }

          init() {}
        }

        struct Response {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var error: Anytype_Rpc.BlockList.Set.Fields.Response.Error {
            get {return _error ?? Anytype_Rpc.BlockList.Set.Fields.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          mutating func clearError() {self._error = nil}

          var event: Anytype_ResponseEvent {
            get {return _event ?? Anytype_ResponseEvent()}
            set {_event = newValue}
          }
          /// Returns true if `event` has been explicitly set.
          var hasEvent: Bool {return self._event != nil}
          /// Clears the value of `event`. Subsequent reads from it will return its default value.
          mutating func clearEvent() {self._event = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Error {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var code: Anytype_Rpc.BlockList.Set.Fields.Response.Error.Code = .null

            var description_p: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum Code: SwiftProtobuf.Enum {
              typealias RawValue = Int
              case null // = 0
              case unknownError // = 1

              /// ...
              case badInput // = 2
              case UNRECOGNIZED(Int)

              init() {
                self = .null
              }

              init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .UNRECOGNIZED(let i): return i
                }
              }

            }

            init() {}
          }

          init() {}

          fileprivate var _error: Anytype_Rpc.BlockList.Set.Fields.Response.Error? = nil
          fileprivate var _event: Anytype_ResponseEvent? = nil
        }

        init() {}
      }

      struct Div {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockIds: [String] = []

            var style: Anytype_Model_Block.Content.Div.Style = .line

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.BlockList.Set.Div.Style.Response.Error {
              get {return _error ?? Anytype_Rpc.BlockList.Set.Div.Style.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var event: Anytype_ResponseEvent {
              get {return _event ?? Anytype_ResponseEvent()}
              set {_event = newValue}
            }
            /// Returns true if `event` has been explicitly set.
            var hasEvent: Bool {return self._event != nil}
            /// Clears the value of `event`. Subsequent reads from it will return its default value.
            mutating func clearEvent() {self._event = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.BlockList.Set.Div.Style.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.BlockList.Set.Div.Style.Response.Error? = nil
            fileprivate var _event: Anytype_ResponseEvent? = nil
          }

          init() {}
        }

        init() {}
      }

      init() {}
    }

    struct Delete {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Deletes the page, keys and all records from the local store and unsubscribe from remote changes
      struct Page {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Request {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// pages to remove
          var blockIds: [String] = []

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Response {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var error: Anytype_Rpc.BlockList.Delete.Page.Response.Error {
            get {return _error ?? Anytype_Rpc.BlockList.Delete.Page.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          mutating func clearError() {self._error = nil}

          var event: Anytype_ResponseEvent {
            get {return _event ?? Anytype_ResponseEvent()}
            set {_event = newValue}
          }
          /// Returns true if `event` has been explicitly set.
          var hasEvent: Bool {return self._event != nil}
          /// Clears the value of `event`. Subsequent reads from it will return its default value.
          mutating func clearEvent() {self._event = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Error {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var code: Anytype_Rpc.BlockList.Delete.Page.Response.Error.Code = .null

            var description_p: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum Code: SwiftProtobuf.Enum {
              typealias RawValue = Int
              case null // = 0
              case unknownError // = 1

              /// ...
              case badInput // = 2
              case UNRECOGNIZED(Int)

              init() {
                self = .null
              }

              init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .UNRECOGNIZED(let i): return i
                }
              }

            }

            init() {}
          }

          init() {}

          fileprivate var _error: Anytype_Rpc.BlockList.Delete.Page.Response.Error? = nil
          fileprivate var _event: Anytype_ResponseEvent? = nil
        }

        init() {}
      }

      init() {}
    }

    init() {}
  }

  ///
  /// Namespace, that agregates subtopics and actions, that relates to blocks.
  struct Block {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Replace {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var blockID: String = String()

        var block: Anytype_Model_Block {
          get {return _block ?? Anytype_Model_Block()}
          set {_block = newValue}
        }
        /// Returns true if `block` has been explicitly set.
        var hasBlock: Bool {return self._block != nil}
        /// Clears the value of `block`. Subsequent reads from it will return its default value.
        mutating func clearBlock() {self._block = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _block: Anytype_Model_Block? = nil
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Replace.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Replace.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var blockID: String = String()

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Replace.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Replace.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct Split {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var blockID: String = String()

        var range: Anytype_Model_Range {
          get {return _range ?? Anytype_Model_Range()}
          set {_range = newValue}
        }
        /// Returns true if `range` has been explicitly set.
        var hasRange: Bool {return self._range != nil}
        /// Clears the value of `range`. Subsequent reads from it will return its default value.
        mutating func clearRange() {self._range = nil}

        var style: Anytype_Model_Block.Content.Text.Style = .paragraph

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _range: Anytype_Model_Range? = nil
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Split.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Split.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var blockID: String = String()

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Split.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Split.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct Merge {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var firstBlockID: String = String()

        var secondBlockID: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Merge.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Merge.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Merge.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Merge.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct Copy {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var blocks: [Anytype_Model_Block] = []

        var selectedTextRange: Anytype_Model_Range {
          get {return _selectedTextRange ?? Anytype_Model_Range()}
          set {_selectedTextRange = newValue}
        }
        /// Returns true if `selectedTextRange` has been explicitly set.
        var hasSelectedTextRange: Bool {return self._selectedTextRange != nil}
        /// Clears the value of `selectedTextRange`. Subsequent reads from it will return its default value.
        mutating func clearSelectedTextRange() {self._selectedTextRange = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _selectedTextRange: Anytype_Model_Range? = nil
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Copy.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Copy.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var html: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Copy.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Copy.Response.Error? = nil
      }

      init() {}
    }

    struct Paste {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var focusedBlockID: String = String()

        var selectedTextRange: Anytype_Model_Range {
          get {return _selectedTextRange ?? Anytype_Model_Range()}
          set {_selectedTextRange = newValue}
        }
        /// Returns true if `selectedTextRange` has been explicitly set.
        var hasSelectedTextRange: Bool {return self._selectedTextRange != nil}
        /// Clears the value of `selectedTextRange`. Subsequent reads from it will return its default value.
        mutating func clearSelectedTextRange() {self._selectedTextRange = nil}

        var selectedBlockIds: [String] = []

        var copyTextRange: Anytype_Model_Range {
          get {return _copyTextRange ?? Anytype_Model_Range()}
          set {_copyTextRange = newValue}
        }
        /// Returns true if `copyTextRange` has been explicitly set.
        var hasCopyTextRange: Bool {return self._copyTextRange != nil}
        /// Clears the value of `copyTextRange`. Subsequent reads from it will return its default value.
        mutating func clearCopyTextRange() {self._copyTextRange = nil}

        var textSlot: String = String()

        var htmlSlot: String = String()

        var anySlot: [Anytype_Model_Block] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _selectedTextRange: Anytype_Model_Range? = nil
        fileprivate var _copyTextRange: Anytype_Model_Range? = nil
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Paste.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Paste.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var blockIds: [String] = []

        var caretPosition: Int32 = 0

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Paste.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Paste.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct Cut {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var blocks: [Anytype_Model_Block] = []

        var selectedTextRange: Anytype_Model_Range {
          get {return _selectedTextRange ?? Anytype_Model_Range()}
          set {_selectedTextRange = newValue}
        }
        /// Returns true if `selectedTextRange` has been explicitly set.
        var hasSelectedTextRange: Bool {return self._selectedTextRange != nil}
        /// Clears the value of `selectedTextRange`. Subsequent reads from it will return its default value.
        mutating func clearSelectedTextRange() {self._selectedTextRange = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _selectedTextRange: Anytype_Model_Range? = nil
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Cut.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Cut.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var textSlot: String = String()

        var htmlSlot: String = String()

        var anySlot: [Anytype_Model_Block] = []

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Cut.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Cut.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct Export {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var blocks: [Anytype_Model_Block] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Export.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Export.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var path: String = String()

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Export.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Export.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct Upload {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var blockID: String = String()

        var filePath: String = String()

        var url: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Upload.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Upload.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Upload.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Upload.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct Download {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var contextID: String = String()

        var blockID: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Download.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Download.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Download.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Download.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct Set {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Fields {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Request {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var contextID: String = String()

          var blockID: String = String()

          var fields: SwiftProtobuf.Google_Protobuf_Struct {
            get {return _fields ?? SwiftProtobuf.Google_Protobuf_Struct()}
            set {_fields = newValue}
          }
          /// Returns true if `fields` has been explicitly set.
          var hasFields: Bool {return self._fields != nil}
          /// Clears the value of `fields`. Subsequent reads from it will return its default value.
          mutating func clearFields() {self._fields = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _fields: SwiftProtobuf.Google_Protobuf_Struct? = nil
        }

        struct Response {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var error: Anytype_Rpc.Block.Set.Fields.Response.Error {
            get {return _error ?? Anytype_Rpc.Block.Set.Fields.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          mutating func clearError() {self._error = nil}

          var event: Anytype_ResponseEvent {
            get {return _event ?? Anytype_ResponseEvent()}
            set {_event = newValue}
          }
          /// Returns true if `event` has been explicitly set.
          var hasEvent: Bool {return self._event != nil}
          /// Clears the value of `event`. Subsequent reads from it will return its default value.
          mutating func clearEvent() {self._event = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Error {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var code: Anytype_Rpc.Block.Set.Fields.Response.Error.Code = .null

            var description_p: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum Code: SwiftProtobuf.Enum {
              typealias RawValue = Int
              case null // = 0
              case unknownError // = 1

              /// ...
              case badInput // = 2
              case UNRECOGNIZED(Int)

              init() {
                self = .null
              }

              init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .UNRECOGNIZED(let i): return i
                }
              }

            }

            init() {}
          }

          init() {}

          fileprivate var _error: Anytype_Rpc.Block.Set.Fields.Response.Error? = nil
          fileprivate var _event: Anytype_ResponseEvent? = nil
        }

        init() {}
      }

      struct Details {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Detail {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var key: String = String()

          /// NUll - removes key
          var value: SwiftProtobuf.Google_Protobuf_Value {
            get {return _value ?? SwiftProtobuf.Google_Protobuf_Value()}
            set {_value = newValue}
          }
          /// Returns true if `value` has been explicitly set.
          var hasValue: Bool {return self._value != nil}
          /// Clears the value of `value`. Subsequent reads from it will return its default value.
          mutating func clearValue() {self._value = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _value: SwiftProtobuf.Google_Protobuf_Value? = nil
        }

        struct Request {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var contextID: String = String()

          var details: [Anytype_Rpc.Block.Set.Details.Detail] = []

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Response {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var error: Anytype_Rpc.Block.Set.Details.Response.Error {
            get {return _error ?? Anytype_Rpc.Block.Set.Details.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          mutating func clearError() {self._error = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Error {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var code: Anytype_Rpc.Block.Set.Details.Response.Error.Code = .null

            var description_p: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum Code: SwiftProtobuf.Enum {
              typealias RawValue = Int
              case null // = 0
              case unknownError // = 1

              /// ...
              case badInput // = 2
              case UNRECOGNIZED(Int)

              init() {
                self = .null
              }

              init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .UNRECOGNIZED(let i): return i
                }
              }

            }

            init() {}
          }

          init() {}

          fileprivate var _error: Anytype_Rpc.Block.Set.Details.Response.Error? = nil
        }

        init() {}
      }

      struct Restrictions {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Request {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var contextID: String = String()

          var blockID: String = String()

          var restrictions: Anytype_Model_Block.Restrictions {
            get {return _restrictions ?? Anytype_Model_Block.Restrictions()}
            set {_restrictions = newValue}
          }
          /// Returns true if `restrictions` has been explicitly set.
          var hasRestrictions: Bool {return self._restrictions != nil}
          /// Clears the value of `restrictions`. Subsequent reads from it will return its default value.
          mutating func clearRestrictions() {self._restrictions = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _restrictions: Anytype_Model_Block.Restrictions? = nil
        }

        struct Response {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var error: Anytype_Rpc.Block.Set.Restrictions.Response.Error {
            get {return _error ?? Anytype_Rpc.Block.Set.Restrictions.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          mutating func clearError() {self._error = nil}

          var event: Anytype_ResponseEvent {
            get {return _event ?? Anytype_ResponseEvent()}
            set {_event = newValue}
          }
          /// Returns true if `event` has been explicitly set.
          var hasEvent: Bool {return self._event != nil}
          /// Clears the value of `event`. Subsequent reads from it will return its default value.
          mutating func clearEvent() {self._event = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Error {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var code: Anytype_Rpc.Block.Set.Restrictions.Response.Error.Code = .null

            var description_p: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum Code: SwiftProtobuf.Enum {
              typealias RawValue = Int
              case null // = 0
              case unknownError // = 1

              /// ...
              case badInput // = 2
              case UNRECOGNIZED(Int)

              init() {
                self = .null
              }

              init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .UNRECOGNIZED(let i): return i
                }
              }

            }

            init() {}
          }

          init() {}

          fileprivate var _error: Anytype_Rpc.Block.Set.Restrictions.Response.Error? = nil
          fileprivate var _event: Anytype_ResponseEvent? = nil
        }

        init() {}
      }

      struct Page {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct IsArchived {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockID: String = String()

            var isArchived: Bool = false

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Block.Set.Page.IsArchived.Response.Error {
              get {return _error ?? Anytype_Rpc.Block.Set.Page.IsArchived.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Block.Set.Page.IsArchived.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Block.Set.Page.IsArchived.Response.Error? = nil
          }

          init() {}
        }

        init() {}
      }

      struct Text {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Text {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockID: String = String()

            var text: String = String()

            var marks: Anytype_Model_Block.Content.Text.Marks {
              get {return _marks ?? Anytype_Model_Block.Content.Text.Marks()}
              set {_marks = newValue}
            }
            /// Returns true if `marks` has been explicitly set.
            var hasMarks: Bool {return self._marks != nil}
            /// Clears the value of `marks`. Subsequent reads from it will return its default value.
            mutating func clearMarks() {self._marks = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}

            fileprivate var _marks: Anytype_Model_Block.Content.Text.Marks? = nil
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Block.Set.Text.Text.Response.Error {
              get {return _error ?? Anytype_Rpc.Block.Set.Text.Text.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Block.Set.Text.Text.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Block.Set.Text.Text.Response.Error? = nil
          }

          init() {}
        }

        struct Color {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockID: String = String()

            var color: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Block.Set.Text.Color.Response.Error {
              get {return _error ?? Anytype_Rpc.Block.Set.Text.Color.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var event: Anytype_ResponseEvent {
              get {return _event ?? Anytype_ResponseEvent()}
              set {_event = newValue}
            }
            /// Returns true if `event` has been explicitly set.
            var hasEvent: Bool {return self._event != nil}
            /// Clears the value of `event`. Subsequent reads from it will return its default value.
            mutating func clearEvent() {self._event = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Block.Set.Text.Color.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Block.Set.Text.Color.Response.Error? = nil
            fileprivate var _event: Anytype_ResponseEvent? = nil
          }

          init() {}
        }

        struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockID: String = String()

            var style: Anytype_Model_Block.Content.Text.Style = .paragraph

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Block.Set.Text.Style.Response.Error {
              get {return _error ?? Anytype_Rpc.Block.Set.Text.Style.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var event: Anytype_ResponseEvent {
              get {return _event ?? Anytype_ResponseEvent()}
              set {_event = newValue}
            }
            /// Returns true if `event` has been explicitly set.
            var hasEvent: Bool {return self._event != nil}
            /// Clears the value of `event`. Subsequent reads from it will return its default value.
            mutating func clearEvent() {self._event = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Block.Set.Text.Style.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Block.Set.Text.Style.Response.Error? = nil
            fileprivate var _event: Anytype_ResponseEvent? = nil
          }

          init() {}
        }

        struct Checked {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockID: String = String()

            var checked: Bool = false

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Block.Set.Text.Checked.Response.Error {
              get {return _error ?? Anytype_Rpc.Block.Set.Text.Checked.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var event: Anytype_ResponseEvent {
              get {return _event ?? Anytype_ResponseEvent()}
              set {_event = newValue}
            }
            /// Returns true if `event` has been explicitly set.
            var hasEvent: Bool {return self._event != nil}
            /// Clears the value of `event`. Subsequent reads from it will return its default value.
            mutating func clearEvent() {self._event = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Block.Set.Text.Checked.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Block.Set.Text.Checked.Response.Error? = nil
            fileprivate var _event: Anytype_ResponseEvent? = nil
          }

          init() {}
        }

        init() {}
      }

      struct File {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Name {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockID: String = String()

            var name: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Block.Set.File.Name.Response.Error {
              get {return _error ?? Anytype_Rpc.Block.Set.File.Name.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var event: Anytype_ResponseEvent {
              get {return _event ?? Anytype_ResponseEvent()}
              set {_event = newValue}
            }
            /// Returns true if `event` has been explicitly set.
            var hasEvent: Bool {return self._event != nil}
            /// Clears the value of `event`. Subsequent reads from it will return its default value.
            mutating func clearEvent() {self._event = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Block.Set.File.Name.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Block.Set.File.Name.Response.Error? = nil
            fileprivate var _event: Anytype_ResponseEvent? = nil
          }

          init() {}
        }

        init() {}
      }

      struct Image {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Name {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockID: String = String()

            var name: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Block.Set.Image.Name.Response.Error {
              get {return _error ?? Anytype_Rpc.Block.Set.Image.Name.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Block.Set.Image.Name.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Block.Set.Image.Name.Response.Error? = nil
          }

          init() {}
        }

        struct Width {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockID: String = String()

            var width: Int32 = 0

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Block.Set.Image.Width.Response.Error {
              get {return _error ?? Anytype_Rpc.Block.Set.Image.Width.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Block.Set.Image.Width.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Block.Set.Image.Width.Response.Error? = nil
          }

          init() {}
        }

        init() {}
      }

      struct Video {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Name {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockID: String = String()

            var name: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Block.Set.Video.Name.Response.Error {
              get {return _error ?? Anytype_Rpc.Block.Set.Video.Name.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Block.Set.Video.Name.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Block.Set.Video.Name.Response.Error? = nil
          }

          init() {}
        }

        struct Width {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockID: String = String()

            var width: Int32 = 0

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Block.Set.Video.Width.Response.Error {
              get {return _error ?? Anytype_Rpc.Block.Set.Video.Width.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Block.Set.Video.Width.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Block.Set.Video.Width.Response.Error? = nil
          }

          init() {}
        }

        init() {}
      }

      struct Link {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct TargetBlockId {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var contextID: String = String()

            var blockID: String = String()

            var targetBlockID: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Block.Set.Link.TargetBlockId.Response.Error {
              get {return _error ?? Anytype_Rpc.Block.Set.Link.TargetBlockId.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var event: Anytype_ResponseEvent {
              get {return _event ?? Anytype_ResponseEvent()}
              set {_event = newValue}
            }
            /// Returns true if `event` has been explicitly set.
            var hasEvent: Bool {return self._event != nil}
            /// Clears the value of `event`. Subsequent reads from it will return its default value.
            mutating func clearEvent() {self._event = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Block.Set.Link.TargetBlockId.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Block.Set.Link.TargetBlockId.Response.Error? = nil
            fileprivate var _event: Anytype_ResponseEvent? = nil
          }

          init() {}
        }

        init() {}
      }

      init() {}
    }

    struct Bookmark {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Fetch {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Request {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var contextID: String = String()

          var blockID: String = String()

          var url: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Response {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var error: Anytype_Rpc.Block.Bookmark.Fetch.Response.Error {
            get {return _error ?? Anytype_Rpc.Block.Bookmark.Fetch.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          mutating func clearError() {self._error = nil}

          var event: Anytype_ResponseEvent {
            get {return _event ?? Anytype_ResponseEvent()}
            set {_event = newValue}
          }
          /// Returns true if `event` has been explicitly set.
          var hasEvent: Bool {return self._event != nil}
          /// Clears the value of `event`. Subsequent reads from it will return its default value.
          mutating func clearEvent() {self._event = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Error {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var code: Anytype_Rpc.Block.Bookmark.Fetch.Response.Error.Code = .null

            var description_p: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum Code: SwiftProtobuf.Enum {
              typealias RawValue = Int
              case null // = 0
              case unknownError // = 1
              case badInput // = 2
              case UNRECOGNIZED(Int)

              init() {
                self = .null
              }

              init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .UNRECOGNIZED(let i): return i
                }
              }

            }

            init() {}
          }

          init() {}

          fileprivate var _error: Anytype_Rpc.Block.Bookmark.Fetch.Response.Error? = nil
          fileprivate var _event: Anytype_ResponseEvent? = nil
        }

        init() {}
      }

      struct CreateAndFetch {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Request {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var contextID: String = String()

          var targetID: String = String()

          var position: Anytype_Model_Block.Position = .none

          var url: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Response {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var error: Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response.Error {
            get {return _error ?? Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          mutating func clearError() {self._error = nil}

          var blockID: String = String()

          var event: Anytype_ResponseEvent {
            get {return _event ?? Anytype_ResponseEvent()}
            set {_event = newValue}
          }
          /// Returns true if `event` has been explicitly set.
          var hasEvent: Bool {return self._event != nil}
          /// Clears the value of `event`. Subsequent reads from it will return its default value.
          mutating func clearEvent() {self._event = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Error {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var code: Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response.Error.Code = .null

            var description_p: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum Code: SwiftProtobuf.Enum {
              typealias RawValue = Int
              case null // = 0
              case unknownError // = 1
              case badInput // = 2
              case UNRECOGNIZED(Int)

              init() {
                self = .null
              }

              init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .UNRECOGNIZED(let i): return i
                }
              }

            }

            init() {}
          }

          init() {}

          fileprivate var _error: Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response.Error? = nil
          fileprivate var _event: Anytype_ResponseEvent? = nil
        }

        init() {}
      }

      init() {}
    }

    struct File {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct CreateAndUpload {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Request {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var contextID: String = String()

          var targetID: String = String()

          var position: Anytype_Model_Block.Position = .none

          var url: String = String()

          var localPath: String = String()

          var fileType: Anytype_Model_Block.Content.File.TypeEnum = .none

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Response {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var error: Anytype_Rpc.Block.File.CreateAndUpload.Response.Error {
            get {return _error ?? Anytype_Rpc.Block.File.CreateAndUpload.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          mutating func clearError() {self._error = nil}

          var blockID: String = String()

          var event: Anytype_ResponseEvent {
            get {return _event ?? Anytype_ResponseEvent()}
            set {_event = newValue}
          }
          /// Returns true if `event` has been explicitly set.
          var hasEvent: Bool {return self._event != nil}
          /// Clears the value of `event`. Subsequent reads from it will return its default value.
          mutating func clearEvent() {self._event = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Error {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var code: Anytype_Rpc.Block.File.CreateAndUpload.Response.Error.Code = .null

            var description_p: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum Code: SwiftProtobuf.Enum {
              typealias RawValue = Int
              case null // = 0
              case unknownError // = 1
              case badInput // = 2
              case UNRECOGNIZED(Int)

              init() {
                self = .null
              }

              init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .UNRECOGNIZED(let i): return i
                }
              }

            }

            init() {}
          }

          init() {}

          fileprivate var _error: Anytype_Rpc.Block.File.CreateAndUpload.Response.Error? = nil
          fileprivate var _event: Anytype_ResponseEvent? = nil
        }

        init() {}
      }

      init() {}
    }

    struct Get {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      ///
      /// Get marks list in the selected range in text block.
      struct Marks {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Request {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var contextID: String = String()

          var blockID: String = String()

          var range: Anytype_Model_Range {
            get {return _range ?? Anytype_Model_Range()}
            set {_range = newValue}
          }
          /// Returns true if `range` has been explicitly set.
          var hasRange: Bool {return self._range != nil}
          /// Clears the value of `range`. Subsequent reads from it will return its default value.
          mutating func clearRange() {self._range = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _range: Anytype_Model_Range? = nil
        }

        struct Response {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var error: Anytype_Rpc.Block.Get.Marks.Response.Error {
            get {return _error ?? Anytype_Rpc.Block.Get.Marks.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          mutating func clearError() {self._error = nil}

          var event: Anytype_ResponseEvent {
            get {return _event ?? Anytype_ResponseEvent()}
            set {_event = newValue}
          }
          /// Returns true if `event` has been explicitly set.
          var hasEvent: Bool {return self._event != nil}
          /// Clears the value of `event`. Subsequent reads from it will return its default value.
          mutating func clearEvent() {self._event = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Error {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var code: Anytype_Rpc.Block.Get.Marks.Response.Error.Code = .null

            var description_p: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum Code: SwiftProtobuf.Enum {
              typealias RawValue = Int
              case null // = 0
              case unknownError // = 1

              /// ...
              case badInput // = 2
              case UNRECOGNIZED(Int)

              init() {
                self = .null
              }

              init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .UNRECOGNIZED(let i): return i
                }
              }

            }

            init() {}
          }

          init() {}

          fileprivate var _error: Anytype_Rpc.Block.Get.Marks.Response.Error? = nil
          fileprivate var _event: Anytype_ResponseEvent? = nil
        }

        init() {}
      }

      init() {}
    }

    struct Undo {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// id of the context block
        var contextID: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Undo.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Undo.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Undo.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1
            case badInput // = 2

            /// ...
            case canNotMove // = 3
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 3: self = .canNotMove
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .canNotMove: return 3
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Undo.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct Redo {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// id of the context block
        var contextID: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Redo.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Redo.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Redo.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1
            case badInput // = 2

            /// ...
            case canNotMove // = 3
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 3: self = .canNotMove
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .canNotMove: return 3
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Redo.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    ///
    /// Works with a smart blocks (block-organizers, like page, dashboard etc)
    /// **Example scenario**
    /// 1A. On front-end start.
    ///     1. Front -> MW: Rpc.Block.Open.Request(dashboard.id)
    ///     2. MW -> Front: BlockShow(dashboard)
    ///     3. MW -> Front: Rpc.Block.Open.Response(err)
    /// 1B. User clicks on a page icon on the dashboard.
    ///     1. Front -> MW: Rpc.Block.Close.Request(dashboard.id)
    /// Get close response first, then open request:
    ///     2. MW -> Front: Rpc.Block.Close.Response(err)
    ///     3. Front -> MW: Rpc.Block.Open.Request(page.id)
    ///     4. MW -> Front: BlockShow(<page, blocks>)
    ///     5. MW -> Front: Rpc.Block.Open.Response(err)
    /// Image/Video/File blocks then:
    ///     6. MW -> Front: BlockShow(<blocks>)
    struct Open {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// id of the context blo1k
        var contextID: String = String()

        var blockID: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Open.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Open.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Open.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Open.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct GetPublicWebURL {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var blockID: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.GetPublicWebURL.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.GetPublicWebURL.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var url: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.GetPublicWebURL.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.GetPublicWebURL.Response.Error? = nil
      }

      init() {}
    }

    struct OpenBreadcrumbs {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// id of the context blo1k
        var contextID: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.OpenBreadcrumbs.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.OpenBreadcrumbs.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var blockID: String = String()

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.OpenBreadcrumbs.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.OpenBreadcrumbs.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct SetBreadcrumbs {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var breadcrumbsID: String = String()

        /// page ids
        var ids: [String] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.SetBreadcrumbs.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.SetBreadcrumbs.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.SetBreadcrumbs.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.SetBreadcrumbs.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    ///
    /// Create a Smart/Internal block. Request can contain a block with a content, or it can be an empty block with a specific block.content.
    /// **Example scenario**
    /// 1A. Create Page on a dashboard
    ///     1. Front -> MW: Rpc.Block.Create.Request(blockId:dashboard.id, position:bottom, block: emtpy block with page content and id = "")
    ///     2. Front -> MW: Rpc.Block.Close.Request(block: dashboard.id)
    ///     3. Front <- MW: Rpc.Block.Close.Response(err)
    ///     4. Front <- MW: Rpc.Block.Create.Response(page.id)
    ///     5. Front <- MW: Rpc.Block.Open.Response(err)
    ///     6. Front <- MW: Event.Block.Show(page)
    /// 1B. Create Page on a Page
    ///     1. Front -> MW: Rpc.Block.Create.Request(blockId:dashboard.id, position:bottom, block: emtpy block with page content and id = "")
    ///     2. Front <- MW: Rpc.Block.Create.Response(newPage.id)
    ///     3. Front <- MW: Event.Block.Show(newPage)
    struct Create {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// id of the context block
        var contextID: String = String()

        /// id of the closest block
        var targetID: String = String()

        var block: Anytype_Model_Block {
          get {return _block ?? Anytype_Model_Block()}
          set {_block = newValue}
        }
        /// Returns true if `block` has been explicitly set.
        var hasBlock: Bool {return self._block != nil}
        /// Clears the value of `block`. Subsequent reads from it will return its default value.
        mutating func clearBlock() {self._block = nil}

        var position: Anytype_Model_Block.Position = .none

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _block: Anytype_Model_Block? = nil
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Create.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Create.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var blockID: String = String()

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Create.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Create.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    struct CreatePage {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// id of the context block
        var contextID: String = String()

        /// id of the closest block
        var targetID: String = String()

        /// page details
        var details: SwiftProtobuf.Google_Protobuf_Struct {
          get {return _details ?? SwiftProtobuf.Google_Protobuf_Struct()}
          set {_details = newValue}
        }
        /// Returns true if `details` has been explicitly set.
        var hasDetails: Bool {return self._details != nil}
        /// Clears the value of `details`. Subsequent reads from it will return its default value.
        mutating func clearDetails() {self._details = nil}

        var position: Anytype_Model_Block.Position = .none

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _details: SwiftProtobuf.Google_Protobuf_Struct? = nil
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.CreatePage.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.CreatePage.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var blockID: String = String()

        var targetID: String = String()

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.CreatePage.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.CreatePage.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    ///
    /// Remove blocks from the childrenIds of its parents
    struct Unlink {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// id of the context block
        var contextID: String = String()

        /// targets to remove
        var blockIds: [String] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Unlink.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Unlink.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        mutating func clearEvent() {self._event = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Unlink.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Unlink.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      init() {}
    }

    ///
    /// Block.Close – it means unsubscribe from a block.
    /// Precondition: block should be opened.
    struct Close {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// id of the context blo1k
        var contextID: String = String()

        var blockID: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Block.Close.Response.Error {
          get {return _error ?? Anytype_Rpc.Block.Close.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Block.Close.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Block.Close.Response.Error? = nil
      }

      init() {}
    }

    init() {}
  }

  ///
  /// Namespace, that agregates subtopics and actions, that relates to wallet.
  struct Wallet {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Create {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      ///*
      /// Front-end-to-middleware request to create a new wallet
      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Path to a wallet directory
        var rootPath: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      ///*
      /// Middleware-to-front-end response, that can contain mnemonic of a created account and a NULL error or an empty mnemonic and a non-NULL error
      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Wallet.Create.Response.Error {
          get {return _error ?? Anytype_Rpc.Wallet.Create.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        /// Mnemonic of a new account (sequence of words, divided by spaces)
        var mnemonic: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Wallet.Create.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int

            /// No error; mnemonic should be non-empty
            case null // = 0

            /// Any other errors
            case unknownError // = 1

            /// Root path is wrong
            case badInput // = 2

            /// ...
            case failedToCreateLocalRepo // = 101
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 101: self = .failedToCreateLocalRepo
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .failedToCreateLocalRepo: return 101
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Wallet.Create.Response.Error? = nil
      }

      init() {}
    }

    struct Recover {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      ///*
      /// Front end to middleware request-to-recover-a wallet with this mnemonic and a rootPath
      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Path to a wallet directory
        var rootPath: String = String()

        /// Mnemonic of a wallet to recover
        var mnemonic: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      ///*
      /// Middleware-to-front-end response, that can contain a NULL error or a non-NULL error
      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Error while trying to recover a wallet
        var error: Anytype_Rpc.Wallet.Recover.Response.Error {
          get {return _error ?? Anytype_Rpc.Wallet.Recover.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Wallet.Recover.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int

            /// No error; wallet successfully recovered
            case null // = 0

            /// Any other errors
            case unknownError // = 1

            /// Root path or mnemonic is wrong
            case badInput // = 2
            case failedToCreateLocalRepo // = 101
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 101: self = .failedToCreateLocalRepo
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .failedToCreateLocalRepo: return 101
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Wallet.Recover.Response.Error? = nil
      }

      init() {}
    }

    init() {}
  }

  ///
  /// Namespace, that agregates subtopics and actions, that relates to account.
  struct Account {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Create {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      ///*
      /// Front end to middleware request-to-create-an account
      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account name
        var name: String = String()

        var avatar: Anytype_Rpc.Account.Create.Request.OneOf_Avatar? = nil

        /// Path to an image, that will be used as an avatar of this account
        var avatarLocalPath: String {
          get {
            if case .avatarLocalPath(let v)? = avatar {return v}
            return String()
          }
          set {avatar = .avatarLocalPath(newValue)}
        }

        /// Avatar color as an alternative for avatar image
        var avatarColor: String {
          get {
            if case .avatarColor(let v)? = avatar {return v}
            return String()
          }
          set {avatar = .avatarColor(newValue)}
        }

        var alphaInviteCode: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        enum OneOf_Avatar: Equatable {
          /// Path to an image, that will be used as an avatar of this account
          case avatarLocalPath(String)
          /// Avatar color as an alternative for avatar image
          case avatarColor(String)

        #if !swift(>=4.1)
          static func ==(lhs: Anytype_Rpc.Account.Create.Request.OneOf_Avatar, rhs: Anytype_Rpc.Account.Create.Request.OneOf_Avatar) -> Bool {
            switch (lhs, rhs) {
            case (.avatarLocalPath(let l), .avatarLocalPath(let r)): return l == r
            case (.avatarColor(let l), .avatarColor(let r)): return l == r
            default: return false
            }
          }
        #endif
        }

        init() {}
      }

      ///*
      /// Middleware-to-front-end response for an account creation request, that can contain a NULL error and created account or a non-NULL error and an empty account
      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Error while trying to create an account
        var error: Anytype_Rpc.Account.Create.Response.Error {
          get {return _error ?? Anytype_Rpc.Account.Create.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        /// A newly created account; In case of a failure, i.e. error is non-NULL, the account model should contain empty/default-value fields
        var account: Anytype_Model_Account {
          get {return _account ?? Anytype_Model_Account()}
          set {_account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        var hasAccount: Bool {return self._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        mutating func clearAccount() {self._account = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Account.Create.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int

            /// No error; Account should be non-empty
            case null // = 0

            /// Any other errors
            case unknownError // = 1

            /// Avatar or name is not correct
            case badInput // = 2
            case accountCreatedButFailedToStartNode // = 101
            case accountCreatedButFailedToSetName // = 102
            case accountCreatedButFailedToSetAvatar // = 103
            case failedToStopRunningNode // = 104
            case badInviteCode // = 900
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 101: self = .accountCreatedButFailedToStartNode
              case 102: self = .accountCreatedButFailedToSetName
              case 103: self = .accountCreatedButFailedToSetAvatar
              case 104: self = .failedToStopRunningNode
              case 900: self = .badInviteCode
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .accountCreatedButFailedToStartNode: return 101
              case .accountCreatedButFailedToSetName: return 102
              case .accountCreatedButFailedToSetAvatar: return 103
              case .failedToStopRunningNode: return 104
              case .badInviteCode: return 900
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Account.Create.Response.Error? = nil
        fileprivate var _account: Anytype_Model_Account? = nil
      }

      init() {}
    }

    struct Recover {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      ///*
      /// Front end to middleware request-to-start-search of an accounts for a recovered mnemonic.
      /// Each of an account that would be found will come with an AccountAdd event
      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      ///*
      /// Middleware-to-front-end response to an account recover request, that can contain a NULL error and created account or a non-NULL error and an empty account
      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Error while trying to recover an account
        var error: Anytype_Rpc.Account.Recover.Response.Error {
          get {return _error ?? Anytype_Rpc.Account.Recover.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Account.Recover.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int

            /// No error;
            case null // = 0

            /// Any other errors
            case unknownError // = 1
            case badInput // = 2
            case noAccountsFound // = 101
            case needToRecoverWalletFirst // = 102
            case failedToCreateLocalRepo // = 103
            case localRepoExistsButCorrupted // = 104
            case failedToRunNode // = 105
            case walletRecoverNotPerformed // = 106
            case failedToStopRunningNode // = 107
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 101: self = .noAccountsFound
              case 102: self = .needToRecoverWalletFirst
              case 103: self = .failedToCreateLocalRepo
              case 104: self = .localRepoExistsButCorrupted
              case 105: self = .failedToRunNode
              case 106: self = .walletRecoverNotPerformed
              case 107: self = .failedToStopRunningNode
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .noAccountsFound: return 101
              case .needToRecoverWalletFirst: return 102
              case .failedToCreateLocalRepo: return 103
              case .localRepoExistsButCorrupted: return 104
              case .failedToRunNode: return 105
              case .walletRecoverNotPerformed: return 106
              case .failedToStopRunningNode: return 107
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Account.Recover.Response.Error? = nil
      }

      init() {}
    }

    struct Select {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      ///*
      /// Front end to middleware request-to-launch-a specific account using account id and a root path
      /// User can select an account from those, that came with an AccountAdd events
      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Id of a selected account
        var id: String = String()

        /// Root path is optional, set if this is a first request
        var rootPath: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      ///*
      /// Middleware-to-front-end response for an account select request, that can contain a NULL error and selected account or a non-NULL error and an empty account
      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Error while trying to launch/select an account
        var error: Anytype_Rpc.Account.Select.Response.Error {
          get {return _error ?? Anytype_Rpc.Account.Select.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        /// Selected account
        var account: Anytype_Model_Account {
          get {return _account ?? Anytype_Model_Account()}
          set {_account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        var hasAccount: Bool {return self._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        mutating func clearAccount() {self._account = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Account.Select.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int

            /// No error
            case null // = 0

            /// Any other errors
            case unknownError // = 1

            /// Id or root path is wrong
            case badInput // = 2
            case failedToCreateLocalRepo // = 101
            case localRepoExistsButCorrupted // = 102
            case failedToRunNode // = 103
            case failedToFindAccountInfo // = 104
            case localRepoNotExistsAndMnemonicNotSet // = 105
            case failedToStopSearcherNode // = 106
            case failedToRecoverPredefinedBlocks // = 107
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 101: self = .failedToCreateLocalRepo
              case 102: self = .localRepoExistsButCorrupted
              case 103: self = .failedToRunNode
              case 104: self = .failedToFindAccountInfo
              case 105: self = .localRepoNotExistsAndMnemonicNotSet
              case 106: self = .failedToStopSearcherNode
              case 107: self = .failedToRecoverPredefinedBlocks
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .failedToCreateLocalRepo: return 101
              case .localRepoExistsButCorrupted: return 102
              case .failedToRunNode: return 103
              case .failedToFindAccountInfo: return 104
              case .localRepoNotExistsAndMnemonicNotSet: return 105
              case .failedToStopSearcherNode: return 106
              case .failedToRecoverPredefinedBlocks: return 107
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Account.Select.Response.Error? = nil
        fileprivate var _account: Anytype_Model_Account? = nil
      }

      init() {}
    }

    struct Stop {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      ///*
      /// Front end to middleware request to stop currently running account node and optionally remove the locally stored data
      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var removeData: Bool = false

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      ///*
      /// Middleware-to-front-end response for an account stop request
      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Error while trying to launch/select an account
        var error: Anytype_Rpc.Account.Stop.Response.Error {
          get {return _error ?? Anytype_Rpc.Account.Stop.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Account.Stop.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int

            /// No error
            case null // = 0

            /// Any other errors
            case unknownError // = 1

            /// Id or root path is wrong
            case badInput // = 2
            case accountIsNotRunning // = 101
            case failedToStopNode // = 102
            case failedToRemoveAccountData // = 103
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 101: self = .accountIsNotRunning
              case 102: self = .failedToStopNode
              case 103: self = .failedToRemoveAccountData
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .accountIsNotRunning: return 101
              case .failedToStopNode: return 102
              case .failedToRemoveAccountData: return 103
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Account.Stop.Response.Error? = nil
      }

      init() {}
    }

    init() {}
  }

  ///
  /// Namespace, that agregates log subtopics and actions.
  /// Usage: send request with topic (Level) and description (message) from client to middleware to log.
  struct Log {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Send {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var message: String = String()

        var level: Anytype_Rpc.Log.Send.Request.Level = .debug

        var unknownFields = SwiftProtobuf.UnknownStorage()

        enum Level: SwiftProtobuf.Enum {
          typealias RawValue = Int
          case debug // = 0
          case error // = 1
          case fatal // = 2
          case info // = 3
          case panic // = 4
          case warning // = 5
          case UNRECOGNIZED(Int)

          init() {
            self = .debug
          }

          init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .debug
            case 1: self = .error
            case 2: self = .fatal
            case 3: self = .info
            case 4: self = .panic
            case 5: self = .warning
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          var rawValue: Int {
            switch self {
            case .debug: return 0
            case .error: return 1
            case .fatal: return 2
            case .info: return 3
            case .panic: return 4
            case .warning: return 5
            case .UNRECOGNIZED(let i): return i
            }
          }

        }

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Log.Send.Response.Error {
          get {return _error ?? Anytype_Rpc.Log.Send.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Log.Send.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1
            case badInput // = 2
            case notFound // = 101
            case timeout // = 102
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 101: self = .notFound
              case 102: self = .timeout
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .notFound: return 101
              case .timeout: return 102
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Log.Send.Response.Error? = nil
      }

      init() {}
    }

    init() {}
  }

  ///
  /// Get info about a version of a middleware.
  /// Info is a string, that contains: BuildDate, GitCommit, GitBranch, GitState
  struct Version {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Get {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Version.Get.Response.Error {
          get {return _error ?? Anytype_Rpc.Version.Get.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var version: String = String()

        /// build date, branch and commit
        var details: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Version.Get.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1
            case badInput // = 2
            case versionIsEmpty // = 3
            case notFound // = 101
            case timeout // = 102
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 3: self = .versionIsEmpty
              case 101: self = .notFound
              case 102: self = .timeout
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .versionIsEmpty: return 3
              case .notFound: return 101
              case .timeout: return 102
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Version.Get.Response.Error? = nil
      }

      init() {}
    }

    init() {}
  }

  ///
  /// Namespace, that agregates subtopics and actions to work with IPFS directly (get files, blobs, images, etc)
  struct Ipfs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct File {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Get {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Request {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var id: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}
        }

        struct Response {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var error: Anytype_Rpc.Ipfs.File.Get.Response.Error {
            get {return _error ?? Anytype_Rpc.Ipfs.File.Get.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          mutating func clearError() {self._error = nil}

          var data: Data = SwiftProtobuf.Internal.emptyData

          var media: String = String()

          var name: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Error {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var code: Anytype_Rpc.Ipfs.File.Get.Response.Error.Code = .null

            var description_p: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum Code: SwiftProtobuf.Enum {
              typealias RawValue = Int
              case null // = 0
              case unknownError // = 1

              /// ...
              case badInput // = 2
              case notFound // = 101
              case timeout // = 102
              case UNRECOGNIZED(Int)

              init() {
                self = .null
              }

              init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                case 101: self = .notFound
                case 102: self = .timeout
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .notFound: return 101
                case .timeout: return 102
                case .UNRECOGNIZED(let i): return i
                }
              }

            }

            init() {}
          }

          init() {}

          fileprivate var _error: Anytype_Rpc.Ipfs.File.Get.Response.Error? = nil
        }

        init() {}
      }

      init() {}
    }

    struct Image {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Get {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Blob {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var hash: String = String()

            var wantWidth: Int32 = 0

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error {
              get {return _error ?? Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var blob: Data = SwiftProtobuf.Internal.emptyData

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case notFound // = 101
                case timeout // = 102
                case nodeNotStarted // = 103
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  case 101: self = .notFound
                  case 102: self = .timeout
                  case 103: self = .nodeNotStarted
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .notFound: return 101
                  case .timeout: return 102
                  case .nodeNotStarted: return 103
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error? = nil
          }

          init() {}
        }

        struct File {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var unknownFields = SwiftProtobuf.UnknownStorage()

          struct Request {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var hash: String = String()

            var wantWidth: Int32 = 0

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          struct Response {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var error: Anytype_Rpc.Ipfs.Image.Get.File.Response.Error {
              get {return _error ?? Anytype_Rpc.Ipfs.Image.Get.File.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            mutating func clearError() {self._error = nil}

            var localPath: String = String()

            var unknownFields = SwiftProtobuf.UnknownStorage()

            struct Error {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              var code: Anytype_Rpc.Ipfs.Image.Get.File.Response.Error.Code = .null

              var description_p: String = String()

              var unknownFields = SwiftProtobuf.UnknownStorage()

              enum Code: SwiftProtobuf.Enum {
                typealias RawValue = Int
                case null // = 0
                case unknownError // = 1

                /// ...
                case badInput // = 2
                case notFound // = 101
                case timeout // = 102
                case nodeNotStarted // = 103
                case UNRECOGNIZED(Int)

                init() {
                  self = .null
                }

                init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  case 101: self = .notFound
                  case 102: self = .timeout
                  case 103: self = .nodeNotStarted
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .notFound: return 101
                  case .timeout: return 102
                  case .nodeNotStarted: return 103
                  case .UNRECOGNIZED(let i): return i
                  }
                }

              }

              init() {}
            }

            init() {}

            fileprivate var _error: Anytype_Rpc.Ipfs.Image.Get.File.Response.Error? = nil
          }

          init() {}
        }

        init() {}
      }

      init() {}
    }

    init() {}
  }

  struct Shutdown {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Request {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Response {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var error: Anytype_Rpc.Shutdown.Response.Error {
        get {return _error ?? Anytype_Rpc.Shutdown.Response.Error()}
        set {_error = newValue}
      }
      /// Returns true if `error` has been explicitly set.
      var hasError: Bool {return self._error != nil}
      /// Clears the value of `error`. Subsequent reads from it will return its default value.
      mutating func clearError() {self._error = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Error {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var code: Anytype_Rpc.Shutdown.Response.Error.Code = .null

        var description_p: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        enum Code: SwiftProtobuf.Enum {
          typealias RawValue = Int
          case null // = 0
          case unknownError // = 1
          case badInput // = 2
          case nodeNotStarted // = 101
          case UNRECOGNIZED(Int)

          init() {
            self = .null
          }

          init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .null
            case 1: self = .unknownError
            case 2: self = .badInput
            case 101: self = .nodeNotStarted
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          var rawValue: Int {
            switch self {
            case .null: return 0
            case .unknownError: return 1
            case .badInput: return 2
            case .nodeNotStarted: return 101
            case .UNRECOGNIZED(let i): return i
            }
          }

        }

        init() {}
      }

      init() {}

      fileprivate var _error: Anytype_Rpc.Shutdown.Response.Error? = nil
    }

    init() {}
  }

  struct Config {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Get {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Config.Get.Response.Error {
          get {return _error ?? Anytype_Rpc.Config.Get.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        /// home dashboard block id
        var homeBlockID: String = String()

        /// archive block id
        var archiveBlockID: String = String()

        /// profile block id
        var profileBlockID: String = String()

        /// gateway url for fetching static files
        var gatewayURL: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Config.Get.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1
            case badInput // = 2
            case nodeNotStarted // = 101
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 101: self = .nodeNotStarted
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .nodeNotStarted: return 101
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Config.Get.Response.Error? = nil
      }

      init() {}
    }

    init() {}
  }

  struct Ping {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Request {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var index: Int32 = 0

      var numberOfEventsToSend: Int32 = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Response {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var error: Anytype_Rpc.Ping.Response.Error {
        get {return _error ?? Anytype_Rpc.Ping.Response.Error()}
        set {_error = newValue}
      }
      /// Returns true if `error` has been explicitly set.
      var hasError: Bool {return self._error != nil}
      /// Clears the value of `error`. Subsequent reads from it will return its default value.
      mutating func clearError() {self._error = nil}

      var index: Int32 = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Error {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var code: Anytype_Rpc.Ping.Response.Error.Code = .null

        var description_p: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        enum Code: SwiftProtobuf.Enum {
          typealias RawValue = Int
          case null // = 0
          case unknownError // = 1
          case badInput // = 2
          case UNRECOGNIZED(Int)

          init() {
            self = .null
          }

          init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .null
            case 1: self = .unknownError
            case 2: self = .badInput
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          var rawValue: Int {
            switch self {
            case .null: return 0
            case .unknownError: return 1
            case .badInput: return 2
            case .UNRECOGNIZED(let i): return i
            }
          }

        }

        init() {}
      }

      init() {}

      fileprivate var _error: Anytype_Rpc.Ping.Response.Error? = nil
    }

    init() {}
  }

  struct Process {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Cancel {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var id: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Process.Cancel.Response.Error {
          get {return _error ?? Anytype_Rpc.Process.Cancel.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Process.Cancel.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Process.Cancel.Response.Error? = nil
      }

      init() {}
    }

    init() {}
  }

  struct LinkPreview {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Request {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var url: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Response {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var error: Anytype_Rpc.LinkPreview.Response.Error {
        get {return _error ?? Anytype_Rpc.LinkPreview.Response.Error()}
        set {_error = newValue}
      }
      /// Returns true if `error` has been explicitly set.
      var hasError: Bool {return self._error != nil}
      /// Clears the value of `error`. Subsequent reads from it will return its default value.
      mutating func clearError() {self._error = nil}

      var linkPreview: Anytype_Model_LinkPreview {
        get {return _linkPreview ?? Anytype_Model_LinkPreview()}
        set {_linkPreview = newValue}
      }
      /// Returns true if `linkPreview` has been explicitly set.
      var hasLinkPreview: Bool {return self._linkPreview != nil}
      /// Clears the value of `linkPreview`. Subsequent reads from it will return its default value.
      mutating func clearLinkPreview() {self._linkPreview = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Error {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var code: Anytype_Rpc.LinkPreview.Response.Error.Code = .null

        var description_p: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        enum Code: SwiftProtobuf.Enum {
          typealias RawValue = Int
          case null // = 0
          case unknownError // = 1
          case badInput // = 2
          case UNRECOGNIZED(Int)

          init() {
            self = .null
          }

          init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .null
            case 1: self = .unknownError
            case 2: self = .badInput
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          var rawValue: Int {
            switch self {
            case .null: return 0
            case .unknownError: return 1
            case .badInput: return 2
            case .UNRECOGNIZED(let i): return i
            }
          }

        }

        init() {}
      }

      init() {}

      fileprivate var _error: Anytype_Rpc.LinkPreview.Response.Error? = nil
      fileprivate var _linkPreview: Anytype_Model_LinkPreview? = nil
    }

    init() {}
  }

  struct UploadFile {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Request {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var url: String = String()

      var localPath: String = String()

      var type: Anytype_Model_Block.Content.File.TypeEnum = .none

      var disableEncryption: Bool = false

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Response {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var error: Anytype_Rpc.UploadFile.Response.Error {
        get {return _error ?? Anytype_Rpc.UploadFile.Response.Error()}
        set {_error = newValue}
      }
      /// Returns true if `error` has been explicitly set.
      var hasError: Bool {return self._error != nil}
      /// Clears the value of `error`. Subsequent reads from it will return its default value.
      mutating func clearError() {self._error = nil}

      var hash: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Error {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var code: Anytype_Rpc.UploadFile.Response.Error.Code = .null

        var description_p: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        enum Code: SwiftProtobuf.Enum {
          typealias RawValue = Int
          case null // = 0
          case unknownError // = 1
          case badInput // = 2
          case UNRECOGNIZED(Int)

          init() {
            self = .null
          }

          init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .null
            case 1: self = .unknownError
            case 2: self = .badInput
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          var rawValue: Int {
            switch self {
            case .null: return 0
            case .unknownError: return 1
            case .badInput: return 2
            case .UNRECOGNIZED(let i): return i
            }
          }

        }

        init() {}
      }

      init() {}

      fileprivate var _error: Anytype_Rpc.UploadFile.Response.Error? = nil
    }

    init() {}
  }

  struct Navigation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct ListPages {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Navigation.ListPages.Response.Error {
          get {return _error ?? Anytype_Rpc.Navigation.ListPages.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var pages: [Anytype_Model_PageInfo] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Navigation.ListPages.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Navigation.ListPages.Response.Error? = nil
      }

      init() {}
    }

    ///
    /// Get the info for page alongside with info for all inbound and outbound links from/to this page
    struct GetPageInfoWithLinks {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var pageID: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var error: Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response.Error {
          get {return _error ?? Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        mutating func clearError() {self._error = nil}

        var page: Anytype_Model_PageInfoWithLinks {
          get {return _page ?? Anytype_Model_PageInfoWithLinks()}
          set {_page = newValue}
        }
        /// Returns true if `page` has been explicitly set.
        var hasPage: Bool {return self._page != nil}
        /// Clears the value of `page`. Subsequent reads from it will return its default value.
        mutating func clearPage() {self._page = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var code: Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response.Error.Code = .null

          var description_p: String = String()

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum Code: SwiftProtobuf.Enum {
            typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            init() {
              self = .null
            }

            init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          init() {}
        }

        init() {}

        fileprivate var _error: Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response.Error? = nil
        fileprivate var _page: Anytype_Model_PageInfoWithLinks? = nil
      }

      init() {}
    }

    init() {}
  }

  init() {}
}

#if swift(>=4.2)

extension Anytype_Rpc.ExternalDrop.Files.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.ExternalDrop.Files.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.ExternalDrop.Content.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.ExternalDrop.Content.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.BlockList.ConvertChildrenToPages.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.BlockList.ConvertChildrenToPages.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.BlockList.Move.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.BlockList.Move.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.BlockList.MoveToNewPage.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.BlockList.MoveToNewPage.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.BlockList.Duplicate.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.BlockList.Duplicate.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.BlockList.Set.Page.IsArchived.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.BlockList.Set.Page.IsArchived.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.BlockList.Set.Text.Style.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.BlockList.Set.Text.Style.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.BlockList.Set.Text.Color.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.BlockList.Set.Text.Color.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.BlockList.Set.BackgroundColor.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.BlockList.Set.BackgroundColor.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.BlockList.Set.Align.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.BlockList.Set.Align.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.BlockList.Set.Fields.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.BlockList.Set.Fields.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.BlockList.Set.Div.Style.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.BlockList.Set.Div.Style.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.BlockList.Delete.Page.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.BlockList.Delete.Page.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Replace.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Replace.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Split.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Split.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Merge.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Merge.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Copy.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Copy.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Paste.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Paste.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Cut.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Cut.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Export.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Export.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Upload.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Upload.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Download.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Download.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Fields.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Fields.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Details.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Details.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Restrictions.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Restrictions.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Page.IsArchived.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Page.IsArchived.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Text.Text.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Text.Text.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Text.Color.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Text.Color.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Text.Style.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Text.Style.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Text.Checked.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Text.Checked.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.File.Name.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.File.Name.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Image.Name.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Image.Name.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Image.Width.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Image.Width.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Video.Name.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Video.Name.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Video.Width.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Video.Width.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Set.Link.TargetBlockId.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Set.Link.TargetBlockId.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Bookmark.Fetch.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Bookmark.Fetch.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.File.CreateAndUpload.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.File.CreateAndUpload.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Get.Marks.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Get.Marks.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Undo.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Undo.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .canNotMove,
  ]
}

extension Anytype_Rpc.Block.Redo.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Redo.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .canNotMove,
  ]
}

extension Anytype_Rpc.Block.Open.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Open.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.GetPublicWebURL.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.GetPublicWebURL.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.OpenBreadcrumbs.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.OpenBreadcrumbs.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.SetBreadcrumbs.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.SetBreadcrumbs.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Create.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Create.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.CreatePage.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.CreatePage.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Unlink.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Unlink.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Block.Close.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Block.Close.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Wallet.Create.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Wallet.Create.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .failedToCreateLocalRepo,
  ]
}

extension Anytype_Rpc.Wallet.Recover.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Wallet.Recover.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .failedToCreateLocalRepo,
  ]
}

extension Anytype_Rpc.Account.Create.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Account.Create.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .accountCreatedButFailedToStartNode,
    .accountCreatedButFailedToSetName,
    .accountCreatedButFailedToSetAvatar,
    .failedToStopRunningNode,
    .badInviteCode,
  ]
}

extension Anytype_Rpc.Account.Recover.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Account.Recover.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .noAccountsFound,
    .needToRecoverWalletFirst,
    .failedToCreateLocalRepo,
    .localRepoExistsButCorrupted,
    .failedToRunNode,
    .walletRecoverNotPerformed,
    .failedToStopRunningNode,
  ]
}

extension Anytype_Rpc.Account.Select.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Account.Select.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .failedToCreateLocalRepo,
    .localRepoExistsButCorrupted,
    .failedToRunNode,
    .failedToFindAccountInfo,
    .localRepoNotExistsAndMnemonicNotSet,
    .failedToStopSearcherNode,
    .failedToRecoverPredefinedBlocks,
  ]
}

extension Anytype_Rpc.Account.Stop.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Account.Stop.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .accountIsNotRunning,
    .failedToStopNode,
    .failedToRemoveAccountData,
  ]
}

extension Anytype_Rpc.Log.Send.Request.Level: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Log.Send.Request.Level] = [
    .debug,
    .error,
    .fatal,
    .info,
    .panic,
    .warning,
  ]
}

extension Anytype_Rpc.Log.Send.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Log.Send.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .notFound,
    .timeout,
  ]
}

extension Anytype_Rpc.Version.Get.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Version.Get.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .versionIsEmpty,
    .notFound,
    .timeout,
  ]
}

extension Anytype_Rpc.Ipfs.File.Get.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Ipfs.File.Get.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .notFound,
    .timeout,
  ]
}

extension Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .notFound,
    .timeout,
    .nodeNotStarted,
  ]
}

extension Anytype_Rpc.Ipfs.Image.Get.File.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Ipfs.Image.Get.File.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .notFound,
    .timeout,
    .nodeNotStarted,
  ]
}

extension Anytype_Rpc.Shutdown.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Shutdown.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .nodeNotStarted,
  ]
}

extension Anytype_Rpc.Config.Get.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Config.Get.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .nodeNotStarted,
  ]
}

extension Anytype_Rpc.Ping.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Ping.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Process.Cancel.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Process.Cancel.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.LinkPreview.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.LinkPreview.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.UploadFile.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.UploadFile.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Navigation.ListPages.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Navigation.ListPages.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

extension Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}

#endif  // swift(>=4.2)

struct Anytype_Empty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"

extension Anytype_Rpc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Rpc"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc, rhs: Anytype_Rpc) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.ExternalDrop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".ExternalDrop"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.ExternalDrop, rhs: Anytype_Rpc.ExternalDrop) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.ExternalDrop.Files: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.ExternalDrop.protoMessageName + ".Files"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.ExternalDrop.Files, rhs: Anytype_Rpc.ExternalDrop.Files) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.ExternalDrop.Files.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.ExternalDrop.Files.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "dropTargetId"),
    3: .same(proto: "position"),
    4: .same(proto: "localFilePaths"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.dropTargetID)
      case 3: try decoder.decodeSingularEnumField(value: &self.position)
      case 4: try decoder.decodeRepeatedStringField(value: &self.localFilePaths)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.dropTargetID.isEmpty {
      try visitor.visitSingularStringField(value: self.dropTargetID, fieldNumber: 2)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 3)
    }
    if !self.localFilePaths.isEmpty {
      try visitor.visitRepeatedStringField(value: self.localFilePaths, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.ExternalDrop.Files.Request, rhs: Anytype_Rpc.ExternalDrop.Files.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.dropTargetID != rhs.dropTargetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.localFilePaths != rhs.localFilePaths {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.ExternalDrop.Files.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.ExternalDrop.Files.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.ExternalDrop.Files.Response, rhs: Anytype_Rpc.ExternalDrop.Files.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.ExternalDrop.Files.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.ExternalDrop.Files.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.ExternalDrop.Files.Response.Error, rhs: Anytype_Rpc.ExternalDrop.Files.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.ExternalDrop.Files.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.ExternalDrop.Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.ExternalDrop.protoMessageName + ".Content"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.ExternalDrop.Content, rhs: Anytype_Rpc.ExternalDrop.Content) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.ExternalDrop.Content.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.ExternalDrop.Content.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "focusedBlockId"),
    3: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.focusedBlockID)
      case 3: try decoder.decodeSingularBytesField(value: &self.content)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.focusedBlockID.isEmpty {
      try visitor.visitSingularStringField(value: self.focusedBlockID, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.ExternalDrop.Content.Request, rhs: Anytype_Rpc.ExternalDrop.Content.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.focusedBlockID != rhs.focusedBlockID {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.ExternalDrop.Content.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.ExternalDrop.Content.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.ExternalDrop.Content.Response, rhs: Anytype_Rpc.ExternalDrop.Content.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.ExternalDrop.Content.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.ExternalDrop.Content.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.ExternalDrop.Content.Response.Error, rhs: Anytype_Rpc.ExternalDrop.Content.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.ExternalDrop.Content.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.BlockList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".BlockList"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList, rhs: Anytype_Rpc.BlockList) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.ConvertChildrenToPages: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.protoMessageName + ".ConvertChildrenToPages"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.ConvertChildrenToPages, rhs: Anytype_Rpc.BlockList.ConvertChildrenToPages) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.ConvertChildrenToPages.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.ConvertChildrenToPages.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockIds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.ConvertChildrenToPages.Request, rhs: Anytype_Rpc.BlockList.ConvertChildrenToPages.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.ConvertChildrenToPages.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.ConvertChildrenToPages.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "linkIds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeRepeatedStringField(value: &self.linkIds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.linkIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.linkIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.ConvertChildrenToPages.Response, rhs: Anytype_Rpc.BlockList.ConvertChildrenToPages.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.linkIds != rhs.linkIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.ConvertChildrenToPages.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.ConvertChildrenToPages.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.ConvertChildrenToPages.Response.Error, rhs: Anytype_Rpc.BlockList.ConvertChildrenToPages.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.ConvertChildrenToPages.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.BlockList.Move: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.protoMessageName + ".Move"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Move, rhs: Anytype_Rpc.BlockList.Move) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Move.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Move.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockIds"),
    3: .same(proto: "targetContextId"),
    4: .same(proto: "dropTargetId"),
    5: .same(proto: "position"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      case 3: try decoder.decodeSingularStringField(value: &self.targetContextID)
      case 4: try decoder.decodeSingularStringField(value: &self.dropTargetID)
      case 5: try decoder.decodeSingularEnumField(value: &self.position)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    if !self.targetContextID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetContextID, fieldNumber: 3)
    }
    if !self.dropTargetID.isEmpty {
      try visitor.visitSingularStringField(value: self.dropTargetID, fieldNumber: 4)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Move.Request, rhs: Anytype_Rpc.BlockList.Move.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.targetContextID != rhs.targetContextID {return false}
    if lhs.dropTargetID != rhs.dropTargetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Move.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Move.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Move.Response, rhs: Anytype_Rpc.BlockList.Move.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Move.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Move.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Move.Response.Error, rhs: Anytype_Rpc.BlockList.Move.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Move.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.BlockList.MoveToNewPage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.protoMessageName + ".MoveToNewPage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.MoveToNewPage, rhs: Anytype_Rpc.BlockList.MoveToNewPage) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.MoveToNewPage.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.MoveToNewPage.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockIds"),
    3: .same(proto: "details"),
    4: .same(proto: "dropTargetId"),
    5: .same(proto: "position"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      case 3: try decoder.decodeSingularMessageField(value: &self._details)
      case 4: try decoder.decodeSingularStringField(value: &self.dropTargetID)
      case 5: try decoder.decodeSingularEnumField(value: &self.position)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.dropTargetID.isEmpty {
      try visitor.visitSingularStringField(value: self.dropTargetID, fieldNumber: 4)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.MoveToNewPage.Request, rhs: Anytype_Rpc.BlockList.MoveToNewPage.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs._details != rhs._details {return false}
    if lhs.dropTargetID != rhs.dropTargetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.MoveToNewPage.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.MoveToNewPage.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "linkId"),
    3: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.linkID)
      case 3: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.linkID.isEmpty {
      try visitor.visitSingularStringField(value: self.linkID, fieldNumber: 2)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.MoveToNewPage.Response, rhs: Anytype_Rpc.BlockList.MoveToNewPage.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.linkID != rhs.linkID {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.MoveToNewPage.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.MoveToNewPage.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.MoveToNewPage.Response.Error, rhs: Anytype_Rpc.BlockList.MoveToNewPage.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.MoveToNewPage.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.BlockList.Duplicate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.protoMessageName + ".Duplicate"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Duplicate, rhs: Anytype_Rpc.BlockList.Duplicate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Duplicate.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Duplicate.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "targetId"),
    3: .same(proto: "blockIds"),
    4: .same(proto: "position"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.targetID)
      case 3: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      case 4: try decoder.decodeSingularEnumField(value: &self.position)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 2)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 3)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Duplicate.Request, rhs: Anytype_Rpc.BlockList.Duplicate.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.targetID != rhs.targetID {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.position != rhs.position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Duplicate.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Duplicate.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "blockIds"),
    3: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      case 3: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Duplicate.Response, rhs: Anytype_Rpc.BlockList.Duplicate.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Duplicate.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Duplicate.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Duplicate.Response.Error, rhs: Anytype_Rpc.BlockList.Duplicate.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Duplicate.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.BlockList.Set: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.protoMessageName + ".Set"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set, rhs: Anytype_Rpc.BlockList.Set) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Page: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.protoMessageName + ".Page"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Page, rhs: Anytype_Rpc.BlockList.Set.Page) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Page.IsArchived: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Page.protoMessageName + ".IsArchived"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Page.IsArchived, rhs: Anytype_Rpc.BlockList.Set.Page.IsArchived) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Page.IsArchived.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Page.IsArchived.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockIds"),
    3: .same(proto: "isArchived"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      case 3: try decoder.decodeSingularBoolField(value: &self.isArchived)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    if self.isArchived != false {
      try visitor.visitSingularBoolField(value: self.isArchived, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Page.IsArchived.Request, rhs: Anytype_Rpc.BlockList.Set.Page.IsArchived.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.isArchived != rhs.isArchived {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Page.IsArchived.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Page.IsArchived.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Page.IsArchived.Response, rhs: Anytype_Rpc.BlockList.Set.Page.IsArchived.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Page.IsArchived.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Page.IsArchived.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Page.IsArchived.Response.Error, rhs: Anytype_Rpc.BlockList.Set.Page.IsArchived.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Page.IsArchived.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.BlockList.Set.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.protoMessageName + ".Text"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Text, rhs: Anytype_Rpc.BlockList.Set.Text) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Text.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Text.protoMessageName + ".Style"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Text.Style, rhs: Anytype_Rpc.BlockList.Set.Text.Style) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Text.Style.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Text.Style.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockIds"),
    3: .same(proto: "style"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      case 3: try decoder.decodeSingularEnumField(value: &self.style)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    if self.style != .paragraph {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Text.Style.Request, rhs: Anytype_Rpc.BlockList.Set.Text.Style.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.style != rhs.style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Text.Style.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Text.Style.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Text.Style.Response, rhs: Anytype_Rpc.BlockList.Set.Text.Style.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Text.Style.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Text.Style.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Text.Style.Response.Error, rhs: Anytype_Rpc.BlockList.Set.Text.Style.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Text.Style.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.BlockList.Set.Text.Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Text.protoMessageName + ".Color"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Text.Color, rhs: Anytype_Rpc.BlockList.Set.Text.Color) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Text.Color.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Text.Color.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockIds"),
    3: .same(proto: "color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      case 3: try decoder.decodeSingularStringField(value: &self.color)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Text.Color.Request, rhs: Anytype_Rpc.BlockList.Set.Text.Color.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.color != rhs.color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Text.Color.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Text.Color.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Text.Color.Response, rhs: Anytype_Rpc.BlockList.Set.Text.Color.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Text.Color.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Text.Color.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Text.Color.Response.Error, rhs: Anytype_Rpc.BlockList.Set.Text.Color.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Text.Color.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.BlockList.Set.BackgroundColor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.protoMessageName + ".BackgroundColor"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.BackgroundColor, rhs: Anytype_Rpc.BlockList.Set.BackgroundColor) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.BackgroundColor.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.BackgroundColor.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockIds"),
    3: .same(proto: "color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      case 3: try decoder.decodeSingularStringField(value: &self.color)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.BackgroundColor.Request, rhs: Anytype_Rpc.BlockList.Set.BackgroundColor.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.color != rhs.color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.BackgroundColor.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.BackgroundColor.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.BackgroundColor.Response, rhs: Anytype_Rpc.BlockList.Set.BackgroundColor.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.BackgroundColor.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.BackgroundColor.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.BackgroundColor.Response.Error, rhs: Anytype_Rpc.BlockList.Set.BackgroundColor.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.BackgroundColor.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.BlockList.Set.Align: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.protoMessageName + ".Align"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Align, rhs: Anytype_Rpc.BlockList.Set.Align) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Align.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Align.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockIds"),
    3: .same(proto: "align"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      case 3: try decoder.decodeSingularEnumField(value: &self.align)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    if self.align != .left {
      try visitor.visitSingularEnumField(value: self.align, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Align.Request, rhs: Anytype_Rpc.BlockList.Set.Align.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.align != rhs.align {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Align.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Align.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Align.Response, rhs: Anytype_Rpc.BlockList.Set.Align.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Align.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Align.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Align.Response.Error, rhs: Anytype_Rpc.BlockList.Set.Align.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Align.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.BlockList.Set.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.protoMessageName + ".Fields"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Fields, rhs: Anytype_Rpc.BlockList.Set.Fields) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Fields.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Fields.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockFields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.blockFields)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockFields.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blockFields, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Fields.Request, rhs: Anytype_Rpc.BlockList.Set.Fields.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockFields != rhs.blockFields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Fields.Request.BlockField: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Fields.Request.protoMessageName + ".BlockField"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blockId"),
    2: .same(proto: "fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.blockID)
      case 2: try decoder.decodeSingularMessageField(value: &self._fields)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 1)
    }
    if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Fields.Request.BlockField, rhs: Anytype_Rpc.BlockList.Set.Fields.Request.BlockField) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Fields.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Fields.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Fields.Response, rhs: Anytype_Rpc.BlockList.Set.Fields.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Fields.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Fields.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Fields.Response.Error, rhs: Anytype_Rpc.BlockList.Set.Fields.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Fields.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.BlockList.Set.Div: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.protoMessageName + ".Div"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Div, rhs: Anytype_Rpc.BlockList.Set.Div) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Div.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Div.protoMessageName + ".Style"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Div.Style, rhs: Anytype_Rpc.BlockList.Set.Div.Style) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Div.Style.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Div.Style.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockIds"),
    3: .same(proto: "style"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      case 3: try decoder.decodeSingularEnumField(value: &self.style)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    if self.style != .line {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Div.Style.Request, rhs: Anytype_Rpc.BlockList.Set.Div.Style.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.style != rhs.style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Div.Style.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Div.Style.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Div.Style.Response, rhs: Anytype_Rpc.BlockList.Set.Div.Style.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Div.Style.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Set.Div.Style.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Set.Div.Style.Response.Error, rhs: Anytype_Rpc.BlockList.Set.Div.Style.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Set.Div.Style.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.BlockList.Delete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.protoMessageName + ".Delete"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Delete, rhs: Anytype_Rpc.BlockList.Delete) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Delete.Page: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Delete.protoMessageName + ".Page"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Delete.Page, rhs: Anytype_Rpc.BlockList.Delete.Page) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Delete.Page.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Delete.Page.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blockIds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Delete.Page.Request, rhs: Anytype_Rpc.BlockList.Delete.Page.Request) -> Bool {
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Delete.Page.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Delete.Page.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Delete.Page.Response, rhs: Anytype_Rpc.BlockList.Delete.Page.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Delete.Page.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.BlockList.Delete.Page.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.BlockList.Delete.Page.Response.Error, rhs: Anytype_Rpc.BlockList.Delete.Page.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.BlockList.Delete.Page.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".Block"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block, rhs: Anytype_Rpc.Block) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Replace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Replace"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Replace, rhs: Anytype_Rpc.Block.Replace) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Replace.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Replace.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "block"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._block)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if let v = self._block {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Replace.Request, rhs: Anytype_Rpc.Block.Replace.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._block != rhs._block {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Replace.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Replace.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "blockId"),
    3: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Replace.Response, rhs: Anytype_Rpc.Block.Replace.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Replace.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Replace.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Replace.Response.Error, rhs: Anytype_Rpc.Block.Replace.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Replace.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Split: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Split"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Split, rhs: Anytype_Rpc.Block.Split) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Split.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Split.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "range"),
    4: .same(proto: "style"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._range)
      case 4: try decoder.decodeSingularEnumField(value: &self.style)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if let v = self._range {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.style != .paragraph {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Split.Request, rhs: Anytype_Rpc.Block.Split.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._range != rhs._range {return false}
    if lhs.style != rhs.style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Split.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Split.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "blockId"),
    3: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Split.Response, rhs: Anytype_Rpc.Block.Split.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Split.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Split.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Split.Response.Error, rhs: Anytype_Rpc.Block.Split.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Split.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Merge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Merge"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Merge, rhs: Anytype_Rpc.Block.Merge) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Merge.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Merge.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "firstBlockId"),
    3: .same(proto: "secondBlockId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.firstBlockID)
      case 3: try decoder.decodeSingularStringField(value: &self.secondBlockID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.firstBlockID.isEmpty {
      try visitor.visitSingularStringField(value: self.firstBlockID, fieldNumber: 2)
    }
    if !self.secondBlockID.isEmpty {
      try visitor.visitSingularStringField(value: self.secondBlockID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Merge.Request, rhs: Anytype_Rpc.Block.Merge.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.firstBlockID != rhs.firstBlockID {return false}
    if lhs.secondBlockID != rhs.secondBlockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Merge.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Merge.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Merge.Response, rhs: Anytype_Rpc.Block.Merge.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Merge.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Merge.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Merge.Response.Error, rhs: Anytype_Rpc.Block.Merge.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Merge.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Copy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Copy"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Copy, rhs: Anytype_Rpc.Block.Copy) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Copy.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Copy.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blocks"),
    3: .same(proto: "selectedTextRange"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.blocks)
      case 3: try decoder.decodeSingularMessageField(value: &self._selectedTextRange)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 2)
    }
    if let v = self._selectedTextRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Copy.Request, rhs: Anytype_Rpc.Block.Copy.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blocks != rhs.blocks {return false}
    if lhs._selectedTextRange != rhs._selectedTextRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Copy.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Copy.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "html"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.html)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.html.isEmpty {
      try visitor.visitSingularStringField(value: self.html, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Copy.Response, rhs: Anytype_Rpc.Block.Copy.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.html != rhs.html {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Copy.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Copy.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Copy.Response.Error, rhs: Anytype_Rpc.Block.Copy.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Copy.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Paste: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Paste"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Paste, rhs: Anytype_Rpc.Block.Paste) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Paste.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Paste.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "focusedBlockId"),
    3: .same(proto: "selectedTextRange"),
    4: .same(proto: "selectedBlockIds"),
    5: .same(proto: "copyTextRange"),
    6: .same(proto: "textSlot"),
    7: .same(proto: "htmlSlot"),
    8: .same(proto: "anySlot"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.focusedBlockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._selectedTextRange)
      case 4: try decoder.decodeRepeatedStringField(value: &self.selectedBlockIds)
      case 5: try decoder.decodeSingularMessageField(value: &self._copyTextRange)
      case 6: try decoder.decodeSingularStringField(value: &self.textSlot)
      case 7: try decoder.decodeSingularStringField(value: &self.htmlSlot)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.anySlot)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.focusedBlockID.isEmpty {
      try visitor.visitSingularStringField(value: self.focusedBlockID, fieldNumber: 2)
    }
    if let v = self._selectedTextRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.selectedBlockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.selectedBlockIds, fieldNumber: 4)
    }
    if let v = self._copyTextRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.textSlot.isEmpty {
      try visitor.visitSingularStringField(value: self.textSlot, fieldNumber: 6)
    }
    if !self.htmlSlot.isEmpty {
      try visitor.visitSingularStringField(value: self.htmlSlot, fieldNumber: 7)
    }
    if !self.anySlot.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.anySlot, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Paste.Request, rhs: Anytype_Rpc.Block.Paste.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.focusedBlockID != rhs.focusedBlockID {return false}
    if lhs._selectedTextRange != rhs._selectedTextRange {return false}
    if lhs.selectedBlockIds != rhs.selectedBlockIds {return false}
    if lhs._copyTextRange != rhs._copyTextRange {return false}
    if lhs.textSlot != rhs.textSlot {return false}
    if lhs.htmlSlot != rhs.htmlSlot {return false}
    if lhs.anySlot != rhs.anySlot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Paste.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Paste.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "blockIds"),
    3: .same(proto: "caretPosition"),
    4: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      case 3: try decoder.decodeSingularInt32Field(value: &self.caretPosition)
      case 4: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    if self.caretPosition != 0 {
      try visitor.visitSingularInt32Field(value: self.caretPosition, fieldNumber: 3)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Paste.Response, rhs: Anytype_Rpc.Block.Paste.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.caretPosition != rhs.caretPosition {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Paste.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Paste.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Paste.Response.Error, rhs: Anytype_Rpc.Block.Paste.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Paste.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Cut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Cut"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Cut, rhs: Anytype_Rpc.Block.Cut) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Cut.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Cut.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blocks"),
    3: .same(proto: "selectedTextRange"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.blocks)
      case 3: try decoder.decodeSingularMessageField(value: &self._selectedTextRange)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 2)
    }
    if let v = self._selectedTextRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Cut.Request, rhs: Anytype_Rpc.Block.Cut.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blocks != rhs.blocks {return false}
    if lhs._selectedTextRange != rhs._selectedTextRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Cut.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Cut.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "textSlot"),
    3: .same(proto: "htmlSlot"),
    4: .same(proto: "anySlot"),
    5: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.textSlot)
      case 3: try decoder.decodeSingularStringField(value: &self.htmlSlot)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.anySlot)
      case 5: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.textSlot.isEmpty {
      try visitor.visitSingularStringField(value: self.textSlot, fieldNumber: 2)
    }
    if !self.htmlSlot.isEmpty {
      try visitor.visitSingularStringField(value: self.htmlSlot, fieldNumber: 3)
    }
    if !self.anySlot.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.anySlot, fieldNumber: 4)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Cut.Response, rhs: Anytype_Rpc.Block.Cut.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.textSlot != rhs.textSlot {return false}
    if lhs.htmlSlot != rhs.htmlSlot {return false}
    if lhs.anySlot != rhs.anySlot {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Cut.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Cut.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Cut.Response.Error, rhs: Anytype_Rpc.Block.Cut.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Cut.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Export: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Export"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Export, rhs: Anytype_Rpc.Block.Export) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Export.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Export.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blocks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.blocks)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Export.Request, rhs: Anytype_Rpc.Block.Export.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blocks != rhs.blocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Export.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Export.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "path"),
    3: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.path)
      case 3: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 2)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Export.Response, rhs: Anytype_Rpc.Block.Export.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.path != rhs.path {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Export.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Export.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Export.Response.Error, rhs: Anytype_Rpc.Block.Export.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Export.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Upload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Upload"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Upload, rhs: Anytype_Rpc.Block.Upload) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Upload.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Upload.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "filePath"),
    4: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularStringField(value: &self.filePath)
      case 4: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if !self.filePath.isEmpty {
      try visitor.visitSingularStringField(value: self.filePath, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Upload.Request, rhs: Anytype_Rpc.Block.Upload.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.filePath != rhs.filePath {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Upload.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Upload.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Upload.Response, rhs: Anytype_Rpc.Block.Upload.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Upload.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Upload.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Upload.Response.Error, rhs: Anytype_Rpc.Block.Upload.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Upload.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Download: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Download"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Download, rhs: Anytype_Rpc.Block.Download) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Download.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Download.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Download.Request, rhs: Anytype_Rpc.Block.Download.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Download.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Download.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Download.Response, rhs: Anytype_Rpc.Block.Download.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Download.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Download.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Download.Response.Error, rhs: Anytype_Rpc.Block.Download.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Download.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Set"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set, rhs: Anytype_Rpc.Block.Set) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.protoMessageName + ".Fields"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Fields, rhs: Anytype_Rpc.Block.Set.Fields) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Fields.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Fields.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._fields)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Fields.Request, rhs: Anytype_Rpc.Block.Set.Fields.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Fields.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Fields.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Fields.Response, rhs: Anytype_Rpc.Block.Set.Fields.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Fields.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Fields.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Fields.Response.Error, rhs: Anytype_Rpc.Block.Set.Fields.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Fields.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.Details: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.protoMessageName + ".Details"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Details, rhs: Anytype_Rpc.Block.Set.Details) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Details.Detail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Details.protoMessageName + ".Detail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularMessageField(value: &self._value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Details.Detail, rhs: Anytype_Rpc.Block.Set.Details.Detail) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Details.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Details.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.details)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.details.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.details, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Details.Request, rhs: Anytype_Rpc.Block.Set.Details.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Details.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Details.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Details.Response, rhs: Anytype_Rpc.Block.Set.Details.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Details.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Details.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Details.Response.Error, rhs: Anytype_Rpc.Block.Set.Details.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Details.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.Restrictions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.protoMessageName + ".Restrictions"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Restrictions, rhs: Anytype_Rpc.Block.Set.Restrictions) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Restrictions.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Restrictions.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "restrictions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._restrictions)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if let v = self._restrictions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Restrictions.Request, rhs: Anytype_Rpc.Block.Set.Restrictions.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._restrictions != rhs._restrictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Restrictions.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Restrictions.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Restrictions.Response, rhs: Anytype_Rpc.Block.Set.Restrictions.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Restrictions.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Restrictions.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Restrictions.Response.Error, rhs: Anytype_Rpc.Block.Set.Restrictions.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Restrictions.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.Page: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.protoMessageName + ".Page"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Page, rhs: Anytype_Rpc.Block.Set.Page) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Page.IsArchived: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Page.protoMessageName + ".IsArchived"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Page.IsArchived, rhs: Anytype_Rpc.Block.Set.Page.IsArchived) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Page.IsArchived.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Page.IsArchived.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "isArchived"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularBoolField(value: &self.isArchived)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if self.isArchived != false {
      try visitor.visitSingularBoolField(value: self.isArchived, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Page.IsArchived.Request, rhs: Anytype_Rpc.Block.Set.Page.IsArchived.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.isArchived != rhs.isArchived {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Page.IsArchived.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Page.IsArchived.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Page.IsArchived.Response, rhs: Anytype_Rpc.Block.Set.Page.IsArchived.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Page.IsArchived.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Page.IsArchived.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Page.IsArchived.Response.Error, rhs: Anytype_Rpc.Block.Set.Page.IsArchived.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Page.IsArchived.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.protoMessageName + ".Text"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text, rhs: Anytype_Rpc.Block.Set.Text) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.protoMessageName + ".Text"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Text, rhs: Anytype_Rpc.Block.Set.Text.Text) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Text.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.Text.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "text"),
    4: .same(proto: "marks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularStringField(value: &self.text)
      case 4: try decoder.decodeSingularMessageField(value: &self._marks)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 3)
    }
    if let v = self._marks {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Text.Request, rhs: Anytype_Rpc.Block.Set.Text.Text.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.text != rhs.text {return false}
    if lhs._marks != rhs._marks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Text.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.Text.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Text.Response, rhs: Anytype_Rpc.Block.Set.Text.Text.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Text.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.Text.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Text.Response.Error, rhs: Anytype_Rpc.Block.Set.Text.Text.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Text.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.Text.Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.protoMessageName + ".Color"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Color, rhs: Anytype_Rpc.Block.Set.Text.Color) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Color.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.Color.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularStringField(value: &self.color)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Color.Request, rhs: Anytype_Rpc.Block.Set.Text.Color.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.color != rhs.color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Color.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.Color.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Color.Response, rhs: Anytype_Rpc.Block.Set.Text.Color.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Color.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.Color.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Color.Response.Error, rhs: Anytype_Rpc.Block.Set.Text.Color.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Color.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.Text.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.protoMessageName + ".Style"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Style, rhs: Anytype_Rpc.Block.Set.Text.Style) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Style.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.Style.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "style"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularEnumField(value: &self.style)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if self.style != .paragraph {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Style.Request, rhs: Anytype_Rpc.Block.Set.Text.Style.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.style != rhs.style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Style.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.Style.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Style.Response, rhs: Anytype_Rpc.Block.Set.Text.Style.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Style.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.Style.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Style.Response.Error, rhs: Anytype_Rpc.Block.Set.Text.Style.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Style.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.Text.Checked: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.protoMessageName + ".Checked"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Checked, rhs: Anytype_Rpc.Block.Set.Text.Checked) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Checked.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.Checked.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "checked"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularBoolField(value: &self.checked)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if self.checked != false {
      try visitor.visitSingularBoolField(value: self.checked, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Checked.Request, rhs: Anytype_Rpc.Block.Set.Text.Checked.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.checked != rhs.checked {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Checked.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.Checked.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Checked.Response, rhs: Anytype_Rpc.Block.Set.Text.Checked.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Checked.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Text.Checked.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Text.Checked.Response.Error, rhs: Anytype_Rpc.Block.Set.Text.Checked.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Text.Checked.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.protoMessageName + ".File"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.File, rhs: Anytype_Rpc.Block.Set.File) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.File.Name: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.File.protoMessageName + ".Name"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.File.Name, rhs: Anytype_Rpc.Block.Set.File.Name) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.File.Name.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.File.Name.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.File.Name.Request, rhs: Anytype_Rpc.Block.Set.File.Name.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.File.Name.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.File.Name.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.File.Name.Response, rhs: Anytype_Rpc.Block.Set.File.Name.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.File.Name.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.File.Name.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.File.Name.Response.Error, rhs: Anytype_Rpc.Block.Set.File.Name.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.File.Name.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.protoMessageName + ".Image"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Image, rhs: Anytype_Rpc.Block.Set.Image) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Image.Name: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Image.protoMessageName + ".Name"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Image.Name, rhs: Anytype_Rpc.Block.Set.Image.Name) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Image.Name.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Image.Name.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Image.Name.Request, rhs: Anytype_Rpc.Block.Set.Image.Name.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Image.Name.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Image.Name.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Image.Name.Response, rhs: Anytype_Rpc.Block.Set.Image.Name.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Image.Name.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Image.Name.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Image.Name.Response.Error, rhs: Anytype_Rpc.Block.Set.Image.Name.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Image.Name.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.Image.Width: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Image.protoMessageName + ".Width"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Image.Width, rhs: Anytype_Rpc.Block.Set.Image.Width) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Image.Width.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Image.Width.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "width"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.width)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Image.Width.Request, rhs: Anytype_Rpc.Block.Set.Image.Width.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.width != rhs.width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Image.Width.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Image.Width.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Image.Width.Response, rhs: Anytype_Rpc.Block.Set.Image.Width.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Image.Width.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Image.Width.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Image.Width.Response.Error, rhs: Anytype_Rpc.Block.Set.Image.Width.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Image.Width.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.Video: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.protoMessageName + ".Video"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Video, rhs: Anytype_Rpc.Block.Set.Video) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Video.Name: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Video.protoMessageName + ".Name"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Video.Name, rhs: Anytype_Rpc.Block.Set.Video.Name) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Video.Name.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Video.Name.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Video.Name.Request, rhs: Anytype_Rpc.Block.Set.Video.Name.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Video.Name.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Video.Name.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Video.Name.Response, rhs: Anytype_Rpc.Block.Set.Video.Name.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Video.Name.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Video.Name.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Video.Name.Response.Error, rhs: Anytype_Rpc.Block.Set.Video.Name.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Video.Name.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.Video.Width: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Video.protoMessageName + ".Width"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Video.Width, rhs: Anytype_Rpc.Block.Set.Video.Width) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Video.Width.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Video.Width.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "width"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.width)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Video.Width.Request, rhs: Anytype_Rpc.Block.Set.Video.Width.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.width != rhs.width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Video.Width.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Video.Width.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Video.Width.Response, rhs: Anytype_Rpc.Block.Set.Video.Width.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Video.Width.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Video.Width.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Video.Width.Response.Error, rhs: Anytype_Rpc.Block.Set.Video.Width.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Video.Width.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Set.Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.protoMessageName + ".Link"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Link, rhs: Anytype_Rpc.Block.Set.Link) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Link.TargetBlockId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Link.protoMessageName + ".TargetBlockId"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Link.TargetBlockId, rhs: Anytype_Rpc.Block.Set.Link.TargetBlockId) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Link.TargetBlockId.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Link.TargetBlockId.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "targetBlockId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularStringField(value: &self.targetBlockID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if !self.targetBlockID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetBlockID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Link.TargetBlockId.Request, rhs: Anytype_Rpc.Block.Set.Link.TargetBlockId.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.targetBlockID != rhs.targetBlockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Link.TargetBlockId.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Link.TargetBlockId.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Link.TargetBlockId.Response, rhs: Anytype_Rpc.Block.Set.Link.TargetBlockId.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Link.TargetBlockId.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Set.Link.TargetBlockId.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Set.Link.TargetBlockId.Response.Error, rhs: Anytype_Rpc.Block.Set.Link.TargetBlockId.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Set.Link.TargetBlockId.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Bookmark: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Bookmark"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Bookmark, rhs: Anytype_Rpc.Block.Bookmark) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Bookmark.Fetch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Bookmark.protoMessageName + ".Fetch"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Bookmark.Fetch, rhs: Anytype_Rpc.Block.Bookmark.Fetch) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Bookmark.Fetch.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Bookmark.Fetch.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Bookmark.Fetch.Request, rhs: Anytype_Rpc.Block.Bookmark.Fetch.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Bookmark.Fetch.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Bookmark.Fetch.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Bookmark.Fetch.Response, rhs: Anytype_Rpc.Block.Bookmark.Fetch.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Bookmark.Fetch.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Bookmark.Fetch.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Bookmark.Fetch.Response.Error, rhs: Anytype_Rpc.Block.Bookmark.Fetch.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Bookmark.Fetch.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Bookmark.CreateAndFetch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Bookmark.protoMessageName + ".CreateAndFetch"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Bookmark.CreateAndFetch, rhs: Anytype_Rpc.Block.Bookmark.CreateAndFetch) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Bookmark.CreateAndFetch.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Bookmark.CreateAndFetch.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "targetId"),
    3: .same(proto: "position"),
    4: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.targetID)
      case 3: try decoder.decodeSingularEnumField(value: &self.position)
      case 4: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 2)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Bookmark.CreateAndFetch.Request, rhs: Anytype_Rpc.Block.Bookmark.CreateAndFetch.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.targetID != rhs.targetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Bookmark.CreateAndFetch.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "blockId"),
    3: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response, rhs: Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response.Error, rhs: Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Bookmark.CreateAndFetch.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".File"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.File, rhs: Anytype_Rpc.Block.File) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.File.CreateAndUpload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.File.protoMessageName + ".CreateAndUpload"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.File.CreateAndUpload, rhs: Anytype_Rpc.Block.File.CreateAndUpload) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.File.CreateAndUpload.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.File.CreateAndUpload.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "targetId"),
    3: .same(proto: "position"),
    4: .same(proto: "url"),
    5: .same(proto: "localPath"),
    6: .same(proto: "fileType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.targetID)
      case 3: try decoder.decodeSingularEnumField(value: &self.position)
      case 4: try decoder.decodeSingularStringField(value: &self.url)
      case 5: try decoder.decodeSingularStringField(value: &self.localPath)
      case 6: try decoder.decodeSingularEnumField(value: &self.fileType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 2)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    if !self.localPath.isEmpty {
      try visitor.visitSingularStringField(value: self.localPath, fieldNumber: 5)
    }
    if self.fileType != .none {
      try visitor.visitSingularEnumField(value: self.fileType, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.File.CreateAndUpload.Request, rhs: Anytype_Rpc.Block.File.CreateAndUpload.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.targetID != rhs.targetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.url != rhs.url {return false}
    if lhs.localPath != rhs.localPath {return false}
    if lhs.fileType != rhs.fileType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.File.CreateAndUpload.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.File.CreateAndUpload.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "blockId"),
    3: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.File.CreateAndUpload.Response, rhs: Anytype_Rpc.Block.File.CreateAndUpload.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.File.CreateAndUpload.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.File.CreateAndUpload.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.File.CreateAndUpload.Response.Error, rhs: Anytype_Rpc.Block.File.CreateAndUpload.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.File.CreateAndUpload.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Get: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Get"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Get, rhs: Anytype_Rpc.Block.Get) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Get.Marks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Get.protoMessageName + ".Marks"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Get.Marks, rhs: Anytype_Rpc.Block.Get.Marks) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Get.Marks.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Get.Marks.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
    3: .same(proto: "range"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._range)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if let v = self._range {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Get.Marks.Request, rhs: Anytype_Rpc.Block.Get.Marks.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._range != rhs._range {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Get.Marks.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Get.Marks.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Get.Marks.Response, rhs: Anytype_Rpc.Block.Get.Marks.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Get.Marks.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Get.Marks.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Get.Marks.Response.Error, rhs: Anytype_Rpc.Block.Get.Marks.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Get.Marks.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Undo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Undo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Undo, rhs: Anytype_Rpc.Block.Undo) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Undo.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Undo.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Undo.Request, rhs: Anytype_Rpc.Block.Undo.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Undo.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Undo.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Undo.Response, rhs: Anytype_Rpc.Block.Undo.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Undo.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Undo.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Undo.Response.Error, rhs: Anytype_Rpc.Block.Undo.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Undo.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    3: .same(proto: "CAN_NOT_MOVE"),
  ]
}

extension Anytype_Rpc.Block.Redo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Redo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Redo, rhs: Anytype_Rpc.Block.Redo) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Redo.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Redo.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Redo.Request, rhs: Anytype_Rpc.Block.Redo.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Redo.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Redo.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Redo.Response, rhs: Anytype_Rpc.Block.Redo.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Redo.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Redo.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Redo.Response.Error, rhs: Anytype_Rpc.Block.Redo.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Redo.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    3: .same(proto: "CAN_NOT_MOVE"),
  ]
}

extension Anytype_Rpc.Block.Open: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Open"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Open, rhs: Anytype_Rpc.Block.Open) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Open.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Open.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Open.Request, rhs: Anytype_Rpc.Block.Open.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Open.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Open.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Open.Response, rhs: Anytype_Rpc.Block.Open.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Open.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Open.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Open.Response.Error, rhs: Anytype_Rpc.Block.Open.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Open.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.GetPublicWebURL: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".GetPublicWebURL"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.GetPublicWebURL, rhs: Anytype_Rpc.Block.GetPublicWebURL) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.GetPublicWebURL.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.GetPublicWebURL.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blockId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.blockID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.GetPublicWebURL.Request, rhs: Anytype_Rpc.Block.GetPublicWebURL.Request) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.GetPublicWebURL.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.GetPublicWebURL.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.GetPublicWebURL.Response, rhs: Anytype_Rpc.Block.GetPublicWebURL.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.GetPublicWebURL.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.GetPublicWebURL.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.GetPublicWebURL.Response.Error, rhs: Anytype_Rpc.Block.GetPublicWebURL.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.GetPublicWebURL.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.OpenBreadcrumbs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".OpenBreadcrumbs"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.OpenBreadcrumbs, rhs: Anytype_Rpc.Block.OpenBreadcrumbs) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.OpenBreadcrumbs.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.OpenBreadcrumbs.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.OpenBreadcrumbs.Request, rhs: Anytype_Rpc.Block.OpenBreadcrumbs.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.OpenBreadcrumbs.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.OpenBreadcrumbs.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "blockId"),
    3: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.OpenBreadcrumbs.Response, rhs: Anytype_Rpc.Block.OpenBreadcrumbs.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.OpenBreadcrumbs.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.OpenBreadcrumbs.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.OpenBreadcrumbs.Response.Error, rhs: Anytype_Rpc.Block.OpenBreadcrumbs.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.OpenBreadcrumbs.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.SetBreadcrumbs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".SetBreadcrumbs"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.SetBreadcrumbs, rhs: Anytype_Rpc.Block.SetBreadcrumbs) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.SetBreadcrumbs.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.SetBreadcrumbs.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "breadcrumbsId"),
    2: .same(proto: "ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.breadcrumbsID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.ids)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.breadcrumbsID.isEmpty {
      try visitor.visitSingularStringField(value: self.breadcrumbsID, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.SetBreadcrumbs.Request, rhs: Anytype_Rpc.Block.SetBreadcrumbs.Request) -> Bool {
    if lhs.breadcrumbsID != rhs.breadcrumbsID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.SetBreadcrumbs.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.SetBreadcrumbs.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.SetBreadcrumbs.Response, rhs: Anytype_Rpc.Block.SetBreadcrumbs.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.SetBreadcrumbs.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.SetBreadcrumbs.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.SetBreadcrumbs.Response.Error, rhs: Anytype_Rpc.Block.SetBreadcrumbs.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.SetBreadcrumbs.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Create: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Create"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Create, rhs: Anytype_Rpc.Block.Create) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Create.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Create.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "targetId"),
    3: .same(proto: "block"),
    4: .same(proto: "position"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.targetID)
      case 3: try decoder.decodeSingularMessageField(value: &self._block)
      case 4: try decoder.decodeSingularEnumField(value: &self.position)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 2)
    }
    if let v = self._block {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Create.Request, rhs: Anytype_Rpc.Block.Create.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.targetID != rhs.targetID {return false}
    if lhs._block != rhs._block {return false}
    if lhs.position != rhs.position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Create.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Create.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "blockId"),
    3: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Create.Response, rhs: Anytype_Rpc.Block.Create.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Create.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Create.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Create.Response.Error, rhs: Anytype_Rpc.Block.Create.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Create.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.CreatePage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".CreatePage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.CreatePage, rhs: Anytype_Rpc.Block.CreatePage) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.CreatePage.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.CreatePage.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "targetId"),
    3: .same(proto: "details"),
    4: .same(proto: "position"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.targetID)
      case 3: try decoder.decodeSingularMessageField(value: &self._details)
      case 4: try decoder.decodeSingularEnumField(value: &self.position)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 2)
    }
    if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.CreatePage.Request, rhs: Anytype_Rpc.Block.CreatePage.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.targetID != rhs.targetID {return false}
    if lhs._details != rhs._details {return false}
    if lhs.position != rhs.position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.CreatePage.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.CreatePage.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "blockId"),
    3: .same(proto: "targetId"),
    4: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      case 3: try decoder.decodeSingularStringField(value: &self.targetID)
      case 4: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 3)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.CreatePage.Response, rhs: Anytype_Rpc.Block.CreatePage.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.targetID != rhs.targetID {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.CreatePage.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.CreatePage.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.CreatePage.Response.Error, rhs: Anytype_Rpc.Block.CreatePage.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.CreatePage.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Unlink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Unlink"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Unlink, rhs: Anytype_Rpc.Block.Unlink) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Unlink.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Unlink.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockIds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.blockIds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Unlink.Request, rhs: Anytype_Rpc.Block.Unlink.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Unlink.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Unlink.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._event)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Unlink.Response, rhs: Anytype_Rpc.Block.Unlink.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Unlink.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Unlink.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Unlink.Response.Error, rhs: Anytype_Rpc.Block.Unlink.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Unlink.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Block.Close: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Close"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Close, rhs: Anytype_Rpc.Block.Close) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Close.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Close.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contextID)
      case 2: try decoder.decodeSingularStringField(value: &self.blockID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Close.Request, rhs: Anytype_Rpc.Block.Close.Request) -> Bool {
    if lhs.contextID != rhs.contextID {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Close.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Close.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Close.Response, rhs: Anytype_Rpc.Block.Close.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Close.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Block.Close.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Block.Close.Response.Error, rhs: Anytype_Rpc.Block.Close.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Block.Close.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Wallet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".Wallet"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Wallet, rhs: Anytype_Rpc.Wallet) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Wallet.Create: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Wallet.protoMessageName + ".Create"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Wallet.Create, rhs: Anytype_Rpc.Wallet.Create) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Wallet.Create.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Wallet.Create.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rootPath"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.rootPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rootPath.isEmpty {
      try visitor.visitSingularStringField(value: self.rootPath, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Wallet.Create.Request, rhs: Anytype_Rpc.Wallet.Create.Request) -> Bool {
    if lhs.rootPath != rhs.rootPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Wallet.Create.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Wallet.Create.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "mnemonic"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.mnemonic)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.mnemonic.isEmpty {
      try visitor.visitSingularStringField(value: self.mnemonic, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Wallet.Create.Response, rhs: Anytype_Rpc.Wallet.Create.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.mnemonic != rhs.mnemonic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Wallet.Create.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Wallet.Create.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Wallet.Create.Response.Error, rhs: Anytype_Rpc.Wallet.Create.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Wallet.Create.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "FAILED_TO_CREATE_LOCAL_REPO"),
  ]
}

extension Anytype_Rpc.Wallet.Recover: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Wallet.protoMessageName + ".Recover"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Wallet.Recover, rhs: Anytype_Rpc.Wallet.Recover) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Wallet.Recover.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Wallet.Recover.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rootPath"),
    2: .same(proto: "mnemonic"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.rootPath)
      case 2: try decoder.decodeSingularStringField(value: &self.mnemonic)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rootPath.isEmpty {
      try visitor.visitSingularStringField(value: self.rootPath, fieldNumber: 1)
    }
    if !self.mnemonic.isEmpty {
      try visitor.visitSingularStringField(value: self.mnemonic, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Wallet.Recover.Request, rhs: Anytype_Rpc.Wallet.Recover.Request) -> Bool {
    if lhs.rootPath != rhs.rootPath {return false}
    if lhs.mnemonic != rhs.mnemonic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Wallet.Recover.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Wallet.Recover.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Wallet.Recover.Response, rhs: Anytype_Rpc.Wallet.Recover.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Wallet.Recover.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Wallet.Recover.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Wallet.Recover.Response.Error, rhs: Anytype_Rpc.Wallet.Recover.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Wallet.Recover.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "FAILED_TO_CREATE_LOCAL_REPO"),
  ]
}

extension Anytype_Rpc.Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".Account"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account, rhs: Anytype_Rpc.Account) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Create: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.protoMessageName + ".Create"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Create, rhs: Anytype_Rpc.Account.Create) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Create.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.Create.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "avatarLocalPath"),
    3: .same(proto: "avatarColor"),
    20: .same(proto: "alphaInviteCode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2:
        if self.avatar != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.avatar = .avatarLocalPath(v)}
      case 3:
        if self.avatar != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.avatar = .avatarColor(v)}
      case 20: try decoder.decodeSingularStringField(value: &self.alphaInviteCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    switch self.avatar {
    case .avatarLocalPath(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    case .avatarColor(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    case nil: break
    }
    if !self.alphaInviteCode.isEmpty {
      try visitor.visitSingularStringField(value: self.alphaInviteCode, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Create.Request, rhs: Anytype_Rpc.Account.Create.Request) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.alphaInviteCode != rhs.alphaInviteCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Create.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.Create.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._account)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Create.Response, rhs: Anytype_Rpc.Account.Create.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._account != rhs._account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Create.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.Create.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Create.Response.Error, rhs: Anytype_Rpc.Account.Create.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Create.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "ACCOUNT_CREATED_BUT_FAILED_TO_START_NODE"),
    102: .same(proto: "ACCOUNT_CREATED_BUT_FAILED_TO_SET_NAME"),
    103: .same(proto: "ACCOUNT_CREATED_BUT_FAILED_TO_SET_AVATAR"),
    104: .same(proto: "FAILED_TO_STOP_RUNNING_NODE"),
    900: .same(proto: "BAD_INVITE_CODE"),
  ]
}

extension Anytype_Rpc.Account.Recover: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.protoMessageName + ".Recover"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Recover, rhs: Anytype_Rpc.Account.Recover) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Recover.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.Recover.protoMessageName + ".Request"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Recover.Request, rhs: Anytype_Rpc.Account.Recover.Request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Recover.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.Recover.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Recover.Response, rhs: Anytype_Rpc.Account.Recover.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Recover.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.Recover.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Recover.Response.Error, rhs: Anytype_Rpc.Account.Recover.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Recover.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "NO_ACCOUNTS_FOUND"),
    102: .same(proto: "NEED_TO_RECOVER_WALLET_FIRST"),
    103: .same(proto: "FAILED_TO_CREATE_LOCAL_REPO"),
    104: .same(proto: "LOCAL_REPO_EXISTS_BUT_CORRUPTED"),
    105: .same(proto: "FAILED_TO_RUN_NODE"),
    106: .same(proto: "WALLET_RECOVER_NOT_PERFORMED"),
    107: .same(proto: "FAILED_TO_STOP_RUNNING_NODE"),
  ]
}

extension Anytype_Rpc.Account.Select: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.protoMessageName + ".Select"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Select, rhs: Anytype_Rpc.Account.Select) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Select.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.Select.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "rootPath"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.rootPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.rootPath.isEmpty {
      try visitor.visitSingularStringField(value: self.rootPath, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Select.Request, rhs: Anytype_Rpc.Account.Select.Request) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.rootPath != rhs.rootPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Select.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.Select.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._account)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Select.Response, rhs: Anytype_Rpc.Account.Select.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._account != rhs._account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Select.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.Select.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Select.Response.Error, rhs: Anytype_Rpc.Account.Select.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Select.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "FAILED_TO_CREATE_LOCAL_REPO"),
    102: .same(proto: "LOCAL_REPO_EXISTS_BUT_CORRUPTED"),
    103: .same(proto: "FAILED_TO_RUN_NODE"),
    104: .same(proto: "FAILED_TO_FIND_ACCOUNT_INFO"),
    105: .same(proto: "LOCAL_REPO_NOT_EXISTS_AND_MNEMONIC_NOT_SET"),
    106: .same(proto: "FAILED_TO_STOP_SEARCHER_NODE"),
    107: .same(proto: "FAILED_TO_RECOVER_PREDEFINED_BLOCKS"),
  ]
}

extension Anytype_Rpc.Account.Stop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.protoMessageName + ".Stop"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Stop, rhs: Anytype_Rpc.Account.Stop) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Stop.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.Stop.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "removeData"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.removeData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.removeData != false {
      try visitor.visitSingularBoolField(value: self.removeData, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Stop.Request, rhs: Anytype_Rpc.Account.Stop.Request) -> Bool {
    if lhs.removeData != rhs.removeData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Stop.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.Stop.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Stop.Response, rhs: Anytype_Rpc.Account.Stop.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Stop.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Account.Stop.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Account.Stop.Response.Error, rhs: Anytype_Rpc.Account.Stop.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Stop.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "ACCOUNT_IS_NOT_RUNNING"),
    102: .same(proto: "FAILED_TO_STOP_NODE"),
    103: .same(proto: "FAILED_TO_REMOVE_ACCOUNT_DATA"),
  ]
}

extension Anytype_Rpc.Log: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".Log"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Log, rhs: Anytype_Rpc.Log) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Log.Send: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Log.protoMessageName + ".Send"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Log.Send, rhs: Anytype_Rpc.Log.Send) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Log.Send.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Log.Send.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .same(proto: "level"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.message)
      case 2: try decoder.decodeSingularEnumField(value: &self.level)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if self.level != .debug {
      try visitor.visitSingularEnumField(value: self.level, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Log.Send.Request, rhs: Anytype_Rpc.Log.Send.Request) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.level != rhs.level {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Log.Send.Request.Level: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEBUG"),
    1: .same(proto: "ERROR"),
    2: .same(proto: "FATAL"),
    3: .same(proto: "INFO"),
    4: .same(proto: "PANIC"),
    5: .same(proto: "WARNING"),
  ]
}

extension Anytype_Rpc.Log.Send.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Log.Send.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Log.Send.Response, rhs: Anytype_Rpc.Log.Send.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Log.Send.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Log.Send.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Log.Send.Response.Error, rhs: Anytype_Rpc.Log.Send.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Log.Send.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "NOT_FOUND"),
    102: .same(proto: "TIMEOUT"),
  ]
}

extension Anytype_Rpc.Version: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".Version"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Version, rhs: Anytype_Rpc.Version) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Version.Get: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Version.protoMessageName + ".Get"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Version.Get, rhs: Anytype_Rpc.Version.Get) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Version.Get.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Version.Get.protoMessageName + ".Request"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Version.Get.Request, rhs: Anytype_Rpc.Version.Get.Request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Version.Get.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Version.Get.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "version"),
    3: .same(proto: "details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.version)
      case 3: try decoder.decodeSingularStringField(value: &self.details)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if !self.details.isEmpty {
      try visitor.visitSingularStringField(value: self.details, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Version.Get.Response, rhs: Anytype_Rpc.Version.Get.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.version != rhs.version {return false}
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Version.Get.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Version.Get.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Version.Get.Response.Error, rhs: Anytype_Rpc.Version.Get.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Version.Get.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    3: .same(proto: "VERSION_IS_EMPTY"),
    101: .same(proto: "NOT_FOUND"),
    102: .same(proto: "TIMEOUT"),
  ]
}

extension Anytype_Rpc.Ipfs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".Ipfs"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs, rhs: Anytype_Rpc.Ipfs) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.protoMessageName + ".File"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.File, rhs: Anytype_Rpc.Ipfs.File) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.File.Get: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.File.protoMessageName + ".Get"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.File.Get, rhs: Anytype_Rpc.Ipfs.File.Get) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.File.Get.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.File.Get.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.File.Get.Request, rhs: Anytype_Rpc.Ipfs.File.Get.Request) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.File.Get.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.File.Get.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "data"),
    3: .same(proto: "media"),
    4: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      case 3: try decoder.decodeSingularStringField(value: &self.media)
      case 4: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    if !self.media.isEmpty {
      try visitor.visitSingularStringField(value: self.media, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.File.Get.Response, rhs: Anytype_Rpc.Ipfs.File.Get.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.data != rhs.data {return false}
    if lhs.media != rhs.media {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.File.Get.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.File.Get.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.File.Get.Response.Error, rhs: Anytype_Rpc.Ipfs.File.Get.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.File.Get.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "NOT_FOUND"),
    102: .same(proto: "TIMEOUT"),
  ]
}

extension Anytype_Rpc.Ipfs.Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.protoMessageName + ".Image"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.Image, rhs: Anytype_Rpc.Ipfs.Image) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.Image.Get: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.Image.protoMessageName + ".Get"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.Image.Get, rhs: Anytype_Rpc.Ipfs.Image.Get) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.Blob: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.Image.Get.protoMessageName + ".Blob"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.Image.Get.Blob, rhs: Anytype_Rpc.Ipfs.Image.Get.Blob) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.Blob.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.Image.Get.Blob.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "wantWidth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.hash)
      case 2: try decoder.decodeSingularInt32Field(value: &self.wantWidth)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if self.wantWidth != 0 {
      try visitor.visitSingularInt32Field(value: self.wantWidth, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.Image.Get.Blob.Request, rhs: Anytype_Rpc.Ipfs.Image.Get.Blob.Request) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.wantWidth != rhs.wantWidth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.Blob.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.Image.Get.Blob.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "blob"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularBytesField(value: &self.blob)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blob.isEmpty {
      try visitor.visitSingularBytesField(value: self.blob, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.Image.Get.Blob.Response, rhs: Anytype_Rpc.Ipfs.Image.Get.Blob.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.blob != rhs.blob {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.Image.Get.Blob.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error, rhs: Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.Blob.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "NOT_FOUND"),
    102: .same(proto: "TIMEOUT"),
    103: .same(proto: "NODE_NOT_STARTED"),
  ]
}

extension Anytype_Rpc.Ipfs.Image.Get.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.Image.Get.protoMessageName + ".File"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.Image.Get.File, rhs: Anytype_Rpc.Ipfs.Image.Get.File) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.File.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.Image.Get.File.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "wantWidth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.hash)
      case 2: try decoder.decodeSingularInt32Field(value: &self.wantWidth)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if self.wantWidth != 0 {
      try visitor.visitSingularInt32Field(value: self.wantWidth, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.Image.Get.File.Request, rhs: Anytype_Rpc.Ipfs.Image.Get.File.Request) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.wantWidth != rhs.wantWidth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.File.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.Image.Get.File.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "localPath"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.localPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.localPath.isEmpty {
      try visitor.visitSingularStringField(value: self.localPath, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.Image.Get.File.Response, rhs: Anytype_Rpc.Ipfs.Image.Get.File.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.localPath != rhs.localPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.File.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ipfs.Image.Get.File.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ipfs.Image.Get.File.Response.Error, rhs: Anytype_Rpc.Ipfs.Image.Get.File.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ipfs.Image.Get.File.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "NOT_FOUND"),
    102: .same(proto: "TIMEOUT"),
    103: .same(proto: "NODE_NOT_STARTED"),
  ]
}

extension Anytype_Rpc.Shutdown: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".Shutdown"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Shutdown, rhs: Anytype_Rpc.Shutdown) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Shutdown.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Shutdown.protoMessageName + ".Request"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Shutdown.Request, rhs: Anytype_Rpc.Shutdown.Request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Shutdown.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Shutdown.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Shutdown.Response, rhs: Anytype_Rpc.Shutdown.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Shutdown.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Shutdown.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Shutdown.Response.Error, rhs: Anytype_Rpc.Shutdown.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Shutdown.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "NODE_NOT_STARTED"),
  ]
}

extension Anytype_Rpc.Config: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".Config"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Config, rhs: Anytype_Rpc.Config) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Config.Get: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Config.protoMessageName + ".Get"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Config.Get, rhs: Anytype_Rpc.Config.Get) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Config.Get.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Config.Get.protoMessageName + ".Request"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Config.Get.Request, rhs: Anytype_Rpc.Config.Get.Request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Config.Get.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Config.Get.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "homeBlockId"),
    3: .same(proto: "archiveBlockId"),
    4: .same(proto: "profileBlockId"),
    101: .same(proto: "gatewayUrl"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.homeBlockID)
      case 3: try decoder.decodeSingularStringField(value: &self.archiveBlockID)
      case 4: try decoder.decodeSingularStringField(value: &self.profileBlockID)
      case 101: try decoder.decodeSingularStringField(value: &self.gatewayURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.homeBlockID.isEmpty {
      try visitor.visitSingularStringField(value: self.homeBlockID, fieldNumber: 2)
    }
    if !self.archiveBlockID.isEmpty {
      try visitor.visitSingularStringField(value: self.archiveBlockID, fieldNumber: 3)
    }
    if !self.profileBlockID.isEmpty {
      try visitor.visitSingularStringField(value: self.profileBlockID, fieldNumber: 4)
    }
    if !self.gatewayURL.isEmpty {
      try visitor.visitSingularStringField(value: self.gatewayURL, fieldNumber: 101)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Config.Get.Response, rhs: Anytype_Rpc.Config.Get.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.homeBlockID != rhs.homeBlockID {return false}
    if lhs.archiveBlockID != rhs.archiveBlockID {return false}
    if lhs.profileBlockID != rhs.profileBlockID {return false}
    if lhs.gatewayURL != rhs.gatewayURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Config.Get.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Config.Get.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Config.Get.Response.Error, rhs: Anytype_Rpc.Config.Get.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Config.Get.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "NODE_NOT_STARTED"),
  ]
}

extension Anytype_Rpc.Ping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".Ping"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ping, rhs: Anytype_Rpc.Ping) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ping.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ping.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "numberOfEventsToSend"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.index)
      case 2: try decoder.decodeSingularInt32Field(value: &self.numberOfEventsToSend)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    if self.numberOfEventsToSend != 0 {
      try visitor.visitSingularInt32Field(value: self.numberOfEventsToSend, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ping.Request, rhs: Anytype_Rpc.Ping.Request) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.numberOfEventsToSend != rhs.numberOfEventsToSend {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ping.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ping.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularInt32Field(value: &self.index)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ping.Response, rhs: Anytype_Rpc.Ping.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ping.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Ping.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Ping.Response.Error, rhs: Anytype_Rpc.Ping.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Ping.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Process: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".Process"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Process, rhs: Anytype_Rpc.Process) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Process.Cancel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Process.protoMessageName + ".Cancel"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Process.Cancel, rhs: Anytype_Rpc.Process.Cancel) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Process.Cancel.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Process.Cancel.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Process.Cancel.Request, rhs: Anytype_Rpc.Process.Cancel.Request) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Process.Cancel.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Process.Cancel.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Process.Cancel.Response, rhs: Anytype_Rpc.Process.Cancel.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Process.Cancel.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Process.Cancel.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Process.Cancel.Response.Error, rhs: Anytype_Rpc.Process.Cancel.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Process.Cancel.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.LinkPreview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".LinkPreview"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.LinkPreview, rhs: Anytype_Rpc.LinkPreview) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.LinkPreview.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.LinkPreview.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.LinkPreview.Request, rhs: Anytype_Rpc.LinkPreview.Request) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.LinkPreview.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.LinkPreview.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "linkPreview"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._linkPreview)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._linkPreview {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.LinkPreview.Response, rhs: Anytype_Rpc.LinkPreview.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._linkPreview != rhs._linkPreview {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.LinkPreview.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.LinkPreview.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.LinkPreview.Response.Error, rhs: Anytype_Rpc.LinkPreview.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.LinkPreview.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.UploadFile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".UploadFile"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.UploadFile, rhs: Anytype_Rpc.UploadFile) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.UploadFile.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.UploadFile.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "localPath"),
    3: .same(proto: "type"),
    4: .same(proto: "disableEncryption"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularStringField(value: &self.localPath)
      case 3: try decoder.decodeSingularEnumField(value: &self.type)
      case 4: try decoder.decodeSingularBoolField(value: &self.disableEncryption)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.localPath.isEmpty {
      try visitor.visitSingularStringField(value: self.localPath, fieldNumber: 2)
    }
    if self.type != .none {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if self.disableEncryption != false {
      try visitor.visitSingularBoolField(value: self.disableEncryption, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.UploadFile.Request, rhs: Anytype_Rpc.UploadFile.Request) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.localPath != rhs.localPath {return false}
    if lhs.type != rhs.type {return false}
    if lhs.disableEncryption != rhs.disableEncryption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.UploadFile.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.UploadFile.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularStringField(value: &self.hash)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.UploadFile.Response, rhs: Anytype_Rpc.UploadFile.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.UploadFile.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.UploadFile.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.UploadFile.Response.Error, rhs: Anytype_Rpc.UploadFile.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.UploadFile.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Navigation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.protoMessageName + ".Navigation"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Navigation, rhs: Anytype_Rpc.Navigation) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Navigation.ListPages: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Navigation.protoMessageName + ".ListPages"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Navigation.ListPages, rhs: Anytype_Rpc.Navigation.ListPages) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Navigation.ListPages.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Navigation.ListPages.protoMessageName + ".Request"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Navigation.ListPages.Request, rhs: Anytype_Rpc.Navigation.ListPages.Request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Navigation.ListPages.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Navigation.ListPages.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "pages"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.pages)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.pages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pages, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Navigation.ListPages.Response, rhs: Anytype_Rpc.Navigation.ListPages.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.pages != rhs.pages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Navigation.ListPages.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Navigation.ListPages.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Navigation.ListPages.Response.Error, rhs: Anytype_Rpc.Navigation.ListPages.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Navigation.ListPages.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Rpc.Navigation.GetPageInfoWithLinks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Navigation.protoMessageName + ".GetPageInfoWithLinks"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Navigation.GetPageInfoWithLinks, rhs: Anytype_Rpc.Navigation.GetPageInfoWithLinks) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Navigation.GetPageInfoWithLinks.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Navigation.GetPageInfoWithLinks.protoMessageName + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pageId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.pageID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pageID.isEmpty {
      try visitor.visitSingularStringField(value: self.pageID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Navigation.GetPageInfoWithLinks.Request, rhs: Anytype_Rpc.Navigation.GetPageInfoWithLinks.Request) -> Bool {
    if lhs.pageID != rhs.pageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Navigation.GetPageInfoWithLinks.protoMessageName + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "page"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._error)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response, rhs: Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._page != rhs._page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response.Error, rhs: Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Navigation.GetPageInfoWithLinks.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}

extension Anytype_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Empty"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Anytype_Empty, rhs: Anytype_Empty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
